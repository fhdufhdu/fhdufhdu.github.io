[{"content":"this란? 일반적으로 대부분의 언어에서 this 키워드는 자기 자신의 인스턴스를 가리키는 용어이다.(python에서는 self 키워드)\n하지만, javascript의 this 키워드는 다른 언어와는 다른 방식으로 작동한다.\n* chrome 브라우저 환경에서 테스트한 결과입니다. node의 경우 window 전역 객체 대신 global 전역 객체를 사용하는데, global이 제대로 반환되지 않아서 브라우저 환경에서 진행하였습니다.\nJava에서의 this class Test { public int number; public void setNumber(int number){ this.number = number } } class Main { public static void main(String[] args){ Test t1 = new Test(); Test t2 = new Test(); t1.setNumber(1); t2.setNumber(2); System.out.println(t1.number); // 1 System.out.println(t2.number); // 2 } } 당연하게도 Java에서의 this는 Test 인스턴스를 가리킨다는 것을 알 수 있다. 그렇다면 js에서는 어떻게 작동할까?\njavascript에서의 this this 바인딩 규칙 우선 설명 이전에, 바인딩 규칙부터 알아보자.\n일반 함수(function 키워드 사용)에서 사용된 this는 해당 함수를 호출하는 객체를 가리킨다. 화살표 함수에서 사용된 this는 block을 타고 올라갔을 때, 맨 처음 만나는 일반 함수의 this를 가리킨다. new 키워드를 사용할 경우 생성자 함수가 객체 그 자체가 된다. 생성자 함수는 일반 함수여야한다. 생성자 함수 호출 시 this는 무조건 자기 자신이다. 첫 번째 규칙 - 일반 함수의 this 일반 함수(function 키워드 사용)에서 사용된 this는 해당 함수를 호출하는 객체를 가리킨다.\nconst test = { setNumber: function(number) { this.number = number return this } } const result = test.setNumber(1) console.log(test.number) // 1 console.log(result === test) // true 해당 방식은 다른 언어와 유사하게 작동하는 것을 알 수 있다.\n규칙에 맞게 따져보자.\nsetNumber 함수가 일반 함수로 선언되어 있음. setNumber 함수를 test 객체가 호출함. ex. test.setNumber(1) -\u0026gt; setNumber 에서 this = test 그렇다면 setNumber 함수를 다른 객체에서 사용하면 어떻게 될까?\nconst test = { setNumber: function(number) { this.number = number return this } } const other = {} other.setNumber = test.setNumber const result = other.setNumber(1) console.log(test.number) // undefined console.log(other.number) // 1 console.log(result === test) // false console.log(result === other) // true test 의 setNumber 를 other 의 setNumber 로 옮김. other.setNubmer(1) 을 실행. -\u0026gt; this = other 임을 알 수 있음. 즉, 규칙에 따라, this는 일반함수를 호출하는 객체임을 알 수 있다.\n두 번째 규칙 - 화살표 함수의 this 화살표 함수에서 사용된 this 는 block 계층을 타고 올라갔을 때, 맨 처음 만나는 일반 함수의 this 를 가리킨다.\nconst test = { setNumber: (number) =\u0026gt; { this.number = number return this } } const result = test.setNumber(1) console.log(test.number) // undefined console.log(result === test) // false console.log(result === window) // true 해당 코드를 보면, setNumber 내부의 this 가 window 객체임을 알 수 있다. 왜 이런 현상이 발생한 것 일까?\n규칙에 맞게 한번 따져보자,\nsetNumber 는 화살표 함수임. setNumber 의 상위 블록은 전역 객체인 window 임. 맨 처음 만나는 일반 함수가 없었으므로, window = this 임을 알 수 있음. 이번엔 일반함수가 있는 경우를 알아보자\nconst test = { setNumber: function (number) { const run = (number) =\u0026gt; { this.number = number return this } return run(number) } } const result = test.setNumber(1) console.log(test.number) // 1 console.log(result === test) // true console.log(result === window) // false 이번 코드의 결과는 위의 결과와 완전히 정반대라는 것을 알 수 있다.\n다시한번 규칙에 맞게 따져보자.\nsetNumber 는 일반 함수임. setNumber 내부에 run 이라는 화살표 함수가 존재함. setNumber 는 run 을 실행한 후 결과를 반환함. run 의 상위 계층 블록은 setNumber이고, setNumber 의 상위 계층 블록은 window 임. run 에게는 setNumber 가 상위 계층 블록 중 처음 만나는 일반 함수이므로 setNumber 의 this 가 바로 run 의 this 임. setNumber 를 호출한 객체는 test 객체임 그러므로 this = test 임을 알 수 있음. 세 번째 규칙 - new 키워드 new 키워드를 사용할 경우 생성자 함수가 객체 그 자체가 된다. 생성자 함수는 일반 함수여야한다. 생성자 함수 호출 시 this는 무조건 자기 자신이다.\nclass Test { setNumber(number) { this.number = number return this } } const test = new Test() const result = test.setNumber(1) console.log(test.number) // 1 console.log(result === test) // true 해당 코드는 setNumber가 일반함수이므로 당연히 this 가 test 임을 알 수 있다.\n그런데 만약 아래와 같은 코드가 있다면 어떨까?\nclass Test { setNumber = (number) =\u0026gt; { this.number = number return this } } const test = new Test() const result = test.setNumber(1) console.log(test.number) // 1 console.log(result === test) // true 해당 코드는 setNumber가 화살표 함수이므로, 앞서 말했던 것 처럼 this가 window가 될 것 같지 않은가?\n그렇지 않다. 위 코드는 아래와 같은 코드이다.\nconst Test = function () { this.setNumber = (number) =\u0026gt; { this.number = number return this } } const test = new Test() const result = test.setNumber(1) console.log(test.number) // 1 console.log(result === test) // true js에서는 함수에 new를 붙여버리면, 그 함수가 생성자 함수가 되어버린다. 그리고 new는 일반 함수에만 붙일 수 있다.\n그렇다면 setNumber의 맨 처음 만나는 상위 블록의 일반 함수가 생성자이고, 생성자의 호출시 this는 자기자신이므로 setNumber의 this는 test가 된다.\n정리 해당 내용은 mdn web docs - this을 참고해서 작성한 글이다. 더 자세한 정보를 얻고 싶다면 문서에서 확인해보자.\nthis 바인딩 정리 일반 함수(function 키워드 사용)에서 사용된 this는 해당 함수를 호출하는 객체를 가리킨다. 화살표 함수에서 사용된 this는 block을 타고 올라갔을 때, 맨 처음 만나는 일반 함수의 this를 가리킨다. new 키워드를 사용할 경우 생성자 함수가 객체 그 자체가 된다. 생성자 함수는 일반 함수여야한다. 생성자 함수 호출 시 this는 무조건 자기 자신이다. 최상위 this는 window 이다.(node.js에서는 global) ","date":"2024-01-17T13:08:00+09:00","permalink":"https://fhdufhdu.github.io/post/12/","title":"[JS] this 바인딩에 대해 알아보자"},{"content":"이전 버전의 문제 저번 게시글에서 무한 스크롤을 구현했지만, 하나의 html에 모든 데이터를 가지고 있는 구조였다. 해당 구조는 게시글이 1,000개 혹은 10,000개가 된다면, 메인 페이지를 불러오는데, 많은 네트워크 자원을 소비하게 될 것이다. 실제로 게시글 200개 정도로 테스트해 보니, 요청에 600kb를 사용하는 것을 확인했다.\n방법을 찾자 처음 발상은 이랬다.\n특정 범위에 해당하는 게시글 리스트를 미리 저장해놓고, http GET 요청을 통해 그때그때 가져오면 되지 않을까?\n그런데 여기에는 아래와 같은 조건이 붙는다.\nhtml로 만들어진 게시글 리스트가 필요. 테마가 업데이트되어도 수정 없이 무한 스크롤을 구현하고 싶음. json과 같은 데이터는 js로 html을 만들어야 하므로, 현재 사용하는 테마가 업데이트되면, 필자가 작성한 js도 수정해야 함. 즉, 5개씩 로딩하고 싶다면, 아래와 같은 리스트를 5개씩 html 형태로 빌드하고, 해당 데이터를 http get을 이용해 가져와야 한다는 것이다.\n여러가지 생각이 들었는데,\n게시글.md를 게시글.html로 바꿔주는 로직이 있으니, 게시글.md를 게시글.html, 게시글-타이틀.html로 만들어 줄 수 있겠다. 공식문서를 살펴보니, 게시글.md는 무조건 하나의 게시글.html로 치환되도록 설계되어 있음.(공식 문서) 적용 불가 Pagination 기능을 활용해 볼까? (공식 문서) Pagination 기능을 활성화하면, /page/${pageNum}으로 접근 가능함. Pagination은 index.html을 총 페이지 숫자에 맞게 여러 개 생성해 줌. 그래서 index.html에 Pagination 템플릿을 삽입하면 각 페이지에 맞는 컨텐츠를 삽입해 줌. index.html {{ $pages := where .Site.RegularPages \u0026#34;Type\u0026#34; \u0026#34;in\u0026#34; .Site.Params.mainSections }} {{ $notHidden := where .Site.RegularPages \u0026#34;Params.hidden\u0026#34; \u0026#34;!=\u0026#34; true }} {{ $filtered := ($pages | intersect $notHidden) }} {{ $pag := .Paginate ($filtered) }} \u0026lt;section id=\u0026#34;posts\u0026#34; id=\u0026#34;posts\u0026#34; class=\u0026#34;article-list\u0026#34;\u0026gt; {{ range $index, $element := $pag.Pages }} {{ partial \u0026#34;article-list/default\u0026#34; . }} {{ end }} \u0026lt;/section\u0026gt; 위와 같은 index.html이 있고, paginate=5로 설정해둔다면, index.html은 1~5 게시글이 삽입되어서 빌드. page/1/index.html은 index.html으로 리다이렉팅하게끔 빌드. page/2/index.html은 6~10 게시글이 삽입되어서 빌드. \u0026hellip; 즉, index.html과 page/{pageNum}/index.html은 기본 구조가 동일 그렇다면 이것을 활용하면 되겠다. 그래서 Pagination을 이용해서 개발을 진행하기로 한다.\n구현 hugo.toml 수정 baseURL = \u0026#39;https://fhdufhdu.github.io/\u0026#39; languageCode = \u0026#39;ko-KR\u0026#39; title = \u0026#39;fhdufhdu\u0026#39; theme = \u0026#39;hugo-theme-stack\u0026#39; paginate = 5 //추가 index.html 수정 \u0026lt;section id=\u0026#34;posts\u0026#34; class=\u0026#34;article-list\u0026#34;\u0026gt; {{ range $index, $element := $pag.Pages }} {{ partial \u0026#34;article-list/default\u0026#34; . }} {{ end }} \u0026lt;/section\u0026gt; \u0026lt;div id=\u0026#34;posts-footer\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; var postsId = \u0026#39;#posts\u0026#39; var http = new XMLHttpRequest(); var page=2 // 1 페이지는 index.html에 들어가 있으니까. 2 페이지로 init value 지정 var intersectionObserver = new IntersectionObserver((entries)=\u0026gt;{ // intersectionRatio가 0 이하이면 아직 노출되지 않은 것 if (entries[0].intersectionRatio \u0026lt;= 0) return; const url = `/page/${page}/` console.log(`${page}페이지 로드 중...`) // http 요청을 통해 page html 가져오기 fetch(url) .then((response) =\u0026gt; { // ok가 아니라면 마지막 페이지라는 것 if (!response.ok) throw new Error(`${page-1}페이지가 마지막입니다`) return response.text() }) .then((html) =\u0026gt; { // 데이터 파싱을 위해 html을 가상의 element에 넣음. const element = document.createElement(\u0026#39;temp\u0026#39;) element.innerHTML = html // #posts 데이터를 들고와서 innerHTML 추가(innerHTML에는 게시글 리스트가 있음) document.querySelector(postsId).innerHTML += element.querySelector(postsId).innerHTML console.log(`${page}페이지 로드 완료`); page++ }) .catch((err)=\u0026gt;console.log(err.message)) }); // element 구독 intersectionObserver.observe(document.querySelector(\u0026#39;#posts-footer\u0026#39;)); \u0026lt;/script\u0026gt; 후기 이전 게시글에서 무한 스크롤을 구현하고나서 많이 뿌듯했지만, 한편으로는 가슴속에 남아있는 불편함이 있었다. 보기에는 무한 스크롤이지만, 실제로는 무한 스크롤이라고 부르기는 좀 좋지 않은 구조였기 때문이다. 실제로 게시글 수가 많아질수록 쓸데없이 네트워크 자원을 소비한다는 문제가 있는 구조이다.\n어쨌든, 좀 더 나은 코드를 작성하는 것이 바로 개발자의 역할이 아니겠는가? 이 불편한 감정을 해결하기 위해 고민을 오래 했던 것 같다. 샤워하다가도 생각나고, 밥먹다가도 생각나고, 출근하다가도 생각이 났다.\n그런 상황에서 해결하고 나니, 진짜 진지하게 속이 뻥 뚫리는 느낌이다. 이래서 개발을 못 끊나 보다.\n","date":"2024-01-14T14:16:00+09:00","permalink":"https://fhdufhdu.github.io/post/11/","title":"[Hugo] [개선판] 무한스크롤을 구현해 보자"},{"content":"새로운 방법 추가! 해당 방법보다 더 좋은 아이디어로 개발했습니다. 해당 게시글 참고 해주세요!\n발단 Hudi님의 블로그를 보다 보니 게시글 목록이 무한 스크롤로 구성되어 있었다. 필자도 구현하고 싶어서 여러 가지 방법을 찾아보았다.\n찾아보니 제일 좋은 방법은 IntersectionObserver를 이용하는 것이라고 한다.\nInsersectionObserver란 상위 요소와의 교차 영역에 대한 변화를 비동기적으로 감지하는 API. element가 화면에 노출되었는지 여부를 간단하게 구독할 수 있음.\n문제 그런데 문제는, hugo와 js가 궁합이 그렇게 좋지 않다는 것이다.\n블로그 게시글 hugo 템플릿과 js는 공존이 불가능하다.\nvar num = 1 var test = ` {{ $test := 1 }}{{ $test }}{{ ${num} }} ` 위와 같은 코드는 빌드 시에 아래처럼 에러가 발생한다.\n이유가 무엇일까? 우리는 hugo 빌드와 js 실행 사이의 순서를 알아야 한다.\nhugo 빌드 hugo 템플릿에 값들이 설정되어 변환됨 ex. {{ $test := 1 }}{{ $test }} 라는 템플릿은 1로 변환 변환된 html이 배포됨 사용자가 해당 사이트에 접속할 때 js 실행 즉, hugo 빌드 시점에 템플릿에는 값이 설정되어야 하는데 js가 실행되지 않았으므로 빌드를 완료할 수 없는 것이다.\n해결 방법 방법은 전체 html을 만들어 놓고, 필요에 따라 잘라서 집어 넣는 것이다.\n\u0026lt;section id=\u0026#34;posts\u0026#34; class=\u0026#34;article-list\u0026#34;\u0026gt; \u0026lt;!-- 게시글 목록이 보여질 곳 --\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- IntersectionObserver로 구독할 element --\u0026gt; \u0026lt;div id=\u0026#34;posts-footer\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 전체 게시글 대상으로 게시글 목록 html을 생성 // \u0026#34;__pd__\u0026#34;의 경우 게시글과 게시글 사이 구분자 var pageHtml = ` {{ range $index, $element := $filtered }} {{ partial \u0026#34;article-list/default\u0026#34; . }} {{ \u0026#34;__pd__\u0026#34; }} {{ end }} ` // 구분자로 html을 게시글 html list로 만듦 var pageHtmlList = pageHtml.split(\u0026#39;__pd__\u0026#39;) // 현재 보여지는 게시글 갯수 var currCnt = 0 // 몇 개씩 보여질지 var paginate = 10 var intersectionObserver = new IntersectionObserver((entries)=\u0026gt;{ // intersectionRatio가 0 이하이면 아직 노출되지 않은 것 if (entries[0].intersectionRatio \u0026lt;= 0) return; // 게시글 추가 이후 보여지는 게시글 갯수 let nextCnt = currCnt + paginate for (let i = currCnt; i \u0026lt; nextCnt \u0026amp;\u0026amp; i \u0026lt; pageHtmlList.length; i++){ // 게시글 추가 document.querySelector(\u0026#39;#posts\u0026#39;).innerHTML += pageHtmlList[i] } // 현재 게시글 갯수 업데이트 currCnt = nextCnt console.log(\u0026#39;Loaded new items\u0026#39;); }); // element 구독 intersectionObserver.observe(document.querySelector(\u0026#39;#posts-footer\u0026#39;)); \u0026lt;/script\u0026gt; 이렇게 하면 정상 구동하는 것을 확인할 수 있다.\n위 영상을 보면, 새로고침하고나서 Loaded new items가 한번 출력되고, 이후 스크롤을 내리면서 \u0026lt;div id=\u0026quot;posts-footer\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;가 화면에 노출될 때 마다 Loaded new items가 계속해서 호출되는 것을 볼 수 있다.\n후기 쉬울듯 하면서도 생각보다 너무 어려웠다. hugo 템플릿은 브라우저에서 동적으로 작동하지 않는다. 라는 것을 모르는 상태에서 js와 결합하려고 하니 그랬던 것 같다. 그래도 IntersectionObserver를 알게되고, hugo 템플릿의 작동 방식을 알게된 좋은 기회였다.\n하지만 조금은 아쉬운 방식이다. 저 방식은 한 html에 모든 데이터를 가지고 있고 보여주는 것만 잘라서 보여주는 것이니까, 본질적으로 한번에 모든 데이터를 보여주는 것과 똑같다고 느껴진다. 조금 더 hugo의 정보를 찾아봐서 다른 방식을 찾아봐야 겠다.\n오랜만에 하나하나 내가 원하는 것을 만들어가는 재미를 느낀 것 같다. 앞으로도 더 많이 꾸며봐야지.\n","date":"2024-01-11T09:41:00+09:00","permalink":"https://fhdufhdu.github.io/post/10/","title":"[Hugo] [구버전] 무한스크롤을 구현해 보자"},{"content":"With 절이란? 복잡한 쿼리를 작성하다 보면, 비슷한 쿼리를 여러 번 사용해야 할 때가 있다. 매번 똑같은 쿼리를 사용하면 실행 시간이 계속 늘어날 것 같고, 한 번만 실행하고 싶을 때가 있을 것이다.\n이럴 때 필요한 것이 with 절이다. with 절은 select 쿼리를 실행하고 해당 결과를 임시로 저장해준다. 이러한 것들은 CTE(common table expression)라고 한다.\n사용법 테이블 구조 create table user( id integer not null primary key, name varchar(8) not null, locale varchar(8) not null ) select 쿼리 with temp_user as ( select * from user where name like \u0026#34;fhdu%\u0026#34; ) select * from temp_user u1 left join temp_user u2 on u1.locale = u2.locale temp_user에 결과를 저장해놓고 계속 불러와서 쓸 수 있게 도와준다.\nwith 절 여러 개 사용 with temp_user as ( select * from user where name like \u0026#34;fhdu%\u0026#34; ), temp_user2 as ( select * from user where name like \u0026#34;woo%\u0026#34; ) select * from temp_user u1 left join temp_user2 u2 on u1.locale = u2.locale 위와 같이 ,기호로 하나의 쿼리에서 여러 개의 with 절을 사용할 수 있다.\n","date":"2024-01-11T08:54:00+09:00","permalink":"https://fhdufhdu.github.io/post/9/","title":"[PostgreSQL] 쿼리 결과를 임시로 저장해서 사용하는 방법(with 절)"},{"content":" 문제 1편의 문제를 해결한 이후 새로운 이슈가 발생했다. 해당 이슈는 게시글 리스트의 댓글 개수와 실제 게시글에 들어갔을 때 댓글 개수가 달라요 이다. 이전에 수정한 코드가 문제가 있던 것은 아니고, 기존의 로직 자체의 문제였다.\n위 이미지의 델 oem 4090의 모험(완) 게시글을 보면 댓글이 6개라고 나와 있다. 그런데, 실제로 해당 게시글을 클릭해서 들어가면 5개, 4개 같이 댓글 개수가 줄어드는 버그가 있었다.\n이는 서비스의 댓글 정책에서 기인하는 문제이다. 해당 정책은 댓글의 노출이 삭제, 차단, 신고, 위치, 순서 등의 조건에 영향을 받는 정책이다. 단순히 봐도 복잡할 것이 예상되지 않는가?\n그래서 그랬을까? 애초에 로직이 조금 이상했었다. 게시글 리스트를 가져올 때는 단순하게 삭제된 댓글을 제외한 개수를 가져와서 반환하고, 게시글 상세 정보 조회 시에는 실제로 댓글 리스트에 정책을 js 코드로 필터를 작성해서 반환했다. 그래서 댓글의 작성과 삭제가 빈번하게 일어나는 게시글일수록 점점 차이가 심하게 나기 시작했다.\n솔직히 처음 코드를 보고 조금 벙쪘다. 아무리 그래도 그렇지\u0026hellip; 두개의 댓글 개수 카운팅 방식이 같지 않다니\u0026hellip;\n문제를 어떻게 해결할 것인가 문제의 원인을 파악하고 나서, 어떻게 해결할 지 고민이 많이 되었다. 곰곰히 생각하면서 세가지의 생각이 떠올랐다.\n프론트엔드에게 처리 맞기기 절대 안된다. 프론트엔드에게 처리를 맞기면 똑같은 문제가 발생할 것이다. 게시글 목록 조회시 댓글도 싹다 불러와서 정책 필터 적용시키기 전체 게시글 개수(n) * 전체 댓글 개수(m) = O(n*m) 만큼의 시간 소모 뭔가 딱봐도 시간이 오래 걸릴 것 같은 느낌 orm을 제거하고 정책을 sql 쿼리에 녹여서 만들기 생각만해도 어렵고, 귀찮다. 근데 이 방법 밖에 없다. 결론은 sql 쿼리를 사용하는 것이었다. 하지만 여기에도 문제가 존재한다.\n추가 문제 기존 response dto를 유지해야함. 이것이 제일 큰 문제이다. orm은 join시 자동으로 아래 예시 처럼 nest object를 만들어준다. 기존 response dto는 orm의 nest object에 강하게 의존하고 있다. sql로도 해당 nest object를 만들 수 있어야 한다. 일반적으로 sql로 내려받은 데이터는 object안에 object가 없는 평면적인 데이터이다. 이를 코드상으로 해결하기에는 꽤나 보기싫은 코드가 생겨나게 될 것이다.(많은 loop와 map을 이용한 코드)\n상당히 보기 지저분한 코드가 나올 것이라고 예상할 수 있다. 또한 2중 중첩이 아니라. 3중,4중으로 가게되면 더욱 복잡해질 것이다.\n답은 postgresql의 jsonb 기능이다. postgresql은 groub by 집계함수로 json을 만들어 낼 수가 있다. 이를 통해 결론적으로 nested object를 만들어 바로 반환할 것이다.\npostgresql에는 jsonb와 json 타입이 있다. jsonb는 바이너리, json은 텍스트이다. 바이너리로 구성된 jsonb는 내부 값 컨트롤(추가, 수정, 삭제)이 가능하다.\n해결 과정 with절 적극 활용하기 postgresql에는 with절이라는 것이 있다. with절은 특정 select 구문을 한번 실행하고 임시로 저장해두는 역할을 한다. 비슷한 쿼리를 여러번 실행해야 하는 경우 속도 측면에서 엄청난 강점을 가진다. 이를 보통 CTE(common table expression)이라고 한다. (참고 링크)\n대상 게시글 선택 with절을 활용해 게시글을 조회한다. 해당 게시글 id로 댓글 조회 row 개수를 최소화 하는 목적을 가진다.\n댓글 선택 댓글 테이블의 self join을 통해 정책을 sql에 녹여낸다. self join시 row 개수가 많으면 시간이 오래 걸리므로 위의 게시글 조회를 저장해둔 결과를 가져와 댓글 범위를 최소화 한다. 이후 댓글과 유저를 join 한 후 유저 정보를 jsonb로 변환한다. 해당 결과도 with절로 저장해둔다.\n게시글과 댓글 조합 후 json 제작 대상 게시글과 댓글 정보를 이용해 join을 맺는다. 이를 통해 게시글-댓글리스트를 json으로 만들고 전달할 수 있게 된다.\n후기 해당 쿼리를 게시글 리스트 조회 API와 게시글 상세 조회 API 모두에 사용했다. 같은 쿼리를 사용함으로써 두 API의 데이터를 일관적으로 전달할 수 있었다. 또한 앞서 언급한 jsonb를 이용해서 response dto도 그대로 유지할 수 있었다.\n의외로 추가적인 소득도 있었다. 속도가 1s에서 200ms 대로 줄었던 것이다. with절을 이용한 방식이 효과가 컸던 것 같다. 이번 문제를 해결하기 위해 처음으로 사용해본 것인데, 앞으로도 애용할 것 같다.\n","date":"2024-01-10T14:34:00+09:00","permalink":"https://fhdufhdu.github.io/post/8/","title":"[PostgreSQL] [실무] 데이터를 일관되게 전달해 보자"},{"content":" 문제 챗봇들의 게시글을 조회하는 데 15초가 걸려버리는 일이 발생했다. 해당 이슈를 듣자마자 바로 SQL 쿼리 문제라는 생각이 들었다. 역시나 예상대로 쿼리가 문제였다.\n정확히 말하면, ORM이 문제였다. 해당 백엔드 서버는 초기 개발을 외주업체에서 진행했는데, 듣자 하니 되게 시간이 촉박했다고 한다. 그래서 그런지 모든 데이터베이스 접근이 ORM으로만 되어 있었다.\n그래서 서버 코드를 인수·인계받고 필자가 제일 먼저 했던 작업이 raw SQL도 사용할 수 있게끔 하는 것이었다.\n이번 문제의 쿼리도 ORM으로 작성된 쿼리였다.\n이제 한번 문제를 살펴보자\n원인 회사의 특정 쿼리의 결과가 아래와 같았다. 그리고 해당 쿼리에는 select에 서브쿼리가 작성되어 있다.\nc.id c.content b.id l.id 1 \u0026ldquo;반가워요\u0026rdquo; 1 1 1 \u0026ldquo;반가워요\u0026rdquo; 1 2 1 \u0026ldquo;반가워요\u0026rdquo; 1 3 2 \u0026ldquo;안녕\u0026rdquo; 4 5 2 \u0026ldquo;안녕\u0026rdquo; 4 6 원하는 결과는 c의 리스트이다. 노출되는 c의 개수는 2개인데, 총 row의 개수는 5개로 뻥튀기된 것을 볼 수 있다. 그렇다면 2번만 서브쿼리를 실행하면 될 것을, 5번이나 실행하고 있었다는 것이다.\n원하는 결과에 c의 갯수가 많아지면 많아 질 수록 row의 개수는 뻥튀기 될 것이다. 만약 20개의 c를 원한다고 하면 100개의 row가 조회될 수도 있고, 100개의 row에 모두 서브쿼리가 실행된다면 20개의 서브쿼리보다 훨씬 느릴 것이다.\n원인파악 완료! 개선해 보자 Result Row의 갯수를 줄이자. ORM 코드를 잘 살펴보니 특정 조건이 빠져있었다. 그래서 필요한 행 말고 모든 행에 대해 join을 걸면서 row의 갯수가 늘어났던 것이었다.\n그 조건을 넣어서 테스트 해봤더니 row의 갯수도 잘 줄어들었고, 15s -\u0026gt; 1s로 속도가 빨라진 것을 확인했다.\n후기 사실 코드와 테이블 구조를 보여주면서 설명하려고 했지만 회사의 코드여서 그렇게 하지 못했다.\n생각보다 간단하게 수정되어서 조금은 허탈했다.\n코드의 의도를 읽기 위해서 온갖 시도를 했었는데(실제 코드는 많이 복잡하다.) 의도를 파악하고, 문제를 파악하고 나니, 정말 어이없는 곳에서 문제가 있었던 케이스였던 것 같다.\n이 트러블슈팅 경험으로 인해 ORM에 대한 단점이 더 눈에 들어오더라. ORM이 마냥 좋은 것만은 아니라는 건 체감하고 있었지만, 이번 경험으로 인해 그 생각이 확고히 굳어진 것 같다. SQL, 그리고 DBMS에 대한 이해 없이 ORM만 사용하게 된다면, 좋은 개발자가 될 수 없을 것이라고 생각한다.\n앞으로도 여러 가지 방법을 잘 조합해서 사용해 보도록 해야겠다.\n","date":"2024-01-07T20:35:00+09:00","permalink":"https://fhdufhdu.github.io/post/7/","title":"[PostgreSQL] [실무] Select 쿼리 속도를 개선해 보자"},{"content":"문제 ​ 회사에서 필자가 개발한, 멀티 챗봇 시스템에 VOC가 들어오게 되었다. 해당 내용은 \u0026ldquo;가끔 너무 챗봇이 느려요\u0026quot;였다. ​ 챗봇 모델 쪽에서 응답이 늦는 경우는 자주 있었기에, 이번에도 그렇겠거니 하고 확인을 해보았다. ​ 그런데, 로그에 찍힌 시간을 보니, 모델은 빠른 시간 내에 응답을 해주는 것을 확인했다. 거기서 문제가 있다는 것을 깨닫고, 문제점을 찾아가기 시작했다. ​ 문제는 importlib이라는 python 기본 라이브러리가 문제였다. 해당 라이브러리를 사용할 때 간헐적으로 최대 1.8초나 지연되는 현상이 발생했다. ​\n기존 라우팅 방식 ​ 우선 간략하게 현재 개발 환경을 말하자면 아래와 같다. ​\nAWS Lambda(람다) AWS Api Gateway PostgreSQL Python 웹 프레임워크 사용하지 않음 ​ 챗봇 서버는 웹 프레임워크를 사용하지 않았기에, 챗봇별로 로직을 실행할 때 importlib이라는 라이브러리를 이용해서 라우팅을 실시했다. importlib은 동적으로 import를 할 수 있게 도와주는 라이브러리이다. ​ 예를 들어 body에 chatbotId가 Foo이면 FooFacade 클래스를 import 해서 쓰거나, Bar이면 BarFacade 클래스를 import해서 쓰거나 하는 식으로 진행했다. ​ 그런데 importlib이 느리다니\u0026hellip; 이해가 되지 않았다. importlib은 결국 __import__ 함수의 래퍼이다. __import__함수는 import 구문을 만나면 실행되는 기본적인 함수이다. 이게 느리다면, 파이썬을 사용해도 되는 것일까? ​\nImport의 작동 방식에 대해서 알아보자 ​ 해당 정보는 김지연 님의 블로그를 참고해서 작성했다. ​\n1. sys.module에 모듈이 존재하는지 찾아보기 ​ sys.module에는 이때까지 사용했던 module들이 딕셔너리 형태로 저장되어 있다. import시 해당 모듈이 이전에 import 된 것이라면 빠르게 가져올 수 있다. ​\n2. sys.path에 저장된 파일 목록들 하나하나 찾아보기 ​ 이 작업이 좀 오래 걸린다. 파일 리스트을 하나하나 탐색하면서 모듈을 가져오기 때문에 시간이 오래걸린다. 아마 필자의 생각으로는 File I/O 작업이라서 오래 걸리는 것 같다. ​\n그럼 동적으로 import 하는 것은\u0026hellip;? ​ 만약 FooFacade 클래스를 처음 동적으로 import 한다면, 생각보다 시간이 오래 걸릴 수 있겠다는 생각이 들었다. 실제로도 처음 실행할 때와, 조금 유휴시간이 지난 후 실행하면 importlib 동작 시간이 오래 걸리는 것을 확인할 수 있었다. ​ 심지어 AWS 람다를 이용하고 있어서, 일정 유휴시간이 지나면 컨테이너가 내려가버린다. 그렇다면 새롭게 컨테이너가 생성될 때마다, importlib에서 시간을 많이 잡아먹었다. ​\n해결방법 ​ 이제 문제점을 찾았으니 해결을 해보자. ​ 결국 라우팅의 문제였으니, 이 라우팅을 다른 방식으로 하면 되지 않을까? ​ 그래서 유명한 파이썬 웹 프레임워크인 FastAPI의 깃허브 소스를 뜯어보았다. ​ FastAPI는 어떻게 라우팅을 사용하고 있을까? ​\nfrom fastapi import APIRouter, FastAPI ​ app = FastAPI() internal_router = APIRouter() users_router = APIRouter() ​ @users_router.get(\u0026#34;/users/\u0026#34;) def read_users(): return [{\u0026#34;name\u0026#34;: \u0026#34;Rick\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;Morty\u0026#34;}] ​ internal_router.include_router(users_router) app.include_router(internal_router) ​ 이런 식으로 APIRouter 객체를 하나 생성하고, APIRouter 객체의 get(post, put, \u0026hellip;) 함수를 라우팅 하고자 하는 함수에 데코레이터로 붙여준다. 그리고 app 객체에 해당 라우터를 전달한다. ​ 이후 http 요청이 들어오면 app 객체로 전달되고, app 객체는 라우팅 정보를 확인해서 해당 함수를 실행한다. ​ 자 어떻게 이것이 가능할까. ​ 필자의 생각은 아래와 같았다. ​\nAPIRouter 객체는 멤버 함수로 데코레이터로 사용가능한 함수를 가지고 있다.(ex. get, post, put, patch, delete) 데코레이터 함수는 자기가 붙은 함수를 객체 형태로 사용할 수 있다.\n(ex. user_router의 get 함수는 read_users 함수를 객체형태로 사용가능) 그렇다면 get을 호출하면, read_users 같은 함수를 users_router에 딕셔너리 형태로 저장하면 되겠네?\n(ex. {\u0026quot;users\u0026quot;: read_user} 와 같은 형태로) 맞는 것 같은데\u0026hellip; 한번 확인해 볼까? ​ APIRouter의 get 함수를 보면 self.api_route(...)를 호출하고 해당 결괏값을 바로 반환한다. ​ 그렇다면 api_route 함수를 보자. ​ # 너무 길어서 간략하게 축소한 버전이다. def api_route( self, path: str, **kwargs, ) -\u0026gt; Callable[[DecoratedCallable], DecoratedCallable]: def decorator(func: DecoratedCallable) -\u0026gt; DecoratedCallable: self.add_api_route( path, func, **kwargs ) return func ​ return decorator ​ 해당 함수를 보게 되면, user_router.get이 read_users에 데코레이터로 붙게 되는 순간 func 파라미터에 read_users가 들어오게 된다. 이후 self.add_api_route를 호출하는데, 이때 아래와 같은 코드가 실행된다. ​\ndef add_api_route( self, path: str, endpoint: Callable[..., Any], **kwargs, ) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; 생략 \u0026#34;\u0026#34;\u0026#34; route = route_class( self.prefix + path, endpoint=endpoint, \u0026#34;\u0026#34;\u0026#34; 생략 \u0026#34;\u0026#34;\u0026#34; ) self.routes.append(route) ​ path는 \u0026ldquo;/user/\u0026rdquo;, endpoint는 read_users 함수이다. 이 두 가지를 통해 route 객체를 하나 만들고 이를 user_routes의 routes 리스트에 추가한다. ​ 필자가 생각한 3번 과정은 아니고, 리스트 탐색으로 라우팅을 하는 것이지만, 어찌 됐든 비슷하다고 생각했다. ​ 그리고 path param을 생각하면 딕셔너리의 key, value 탐색보다 리스트 탐색이 더 낫다고 생각이 든다.(path param이 들어가면 어쨌든 n만큼 순회해야 하니까!)\n​ 필자의 생각이 어느 정도 맞다는 걸 인지했으니 신나게 Router 객체를 제작해서 만들었다. (아쉽게도 회사의 코드는 공개할 수 없으므로 비슷하게도 공개할 수 없다..) ​\n결과 ​ 무려 라우팅시 1.8초나 걸리던 것이 0.001초 미만에 해결되는 모습을 보였다. 해당 코드를 만들고 동료 개발자와 코드리뷰 때 \u0026ldquo;어떻게 이런 생각을 했냐\u0026quot;라고 하셔서 되게 기분이 좋았다.\n","date":"2024-01-04T23:10:00+09:00","permalink":"https://fhdufhdu.github.io/post/6/","title":"[Python] [실무] 커스텀 Router 객체를 만들어 보았다."},{"content":"오늘은 JS의 비동기에 관해 설명해 보고자 한다. JS에 대해 잘 모르고 비동기에 대한 개념이 희박하던 때, 단순히 콜백함수가 비동기 함수인 줄 알았다. 하지만 단순히 콜백함수를 만든다고 해서 비동기적으로 작동하는 것은 아니다. 특정 조건의 함수만 비동기 함수가 될 수 있다.\n동기와 비동기 작업에 대해 알아보고 싶다면 해당게시글을 참고하자.\n조금 더 자세히 알아보자.\n콜백 함수는 동기이다. const count = (num, callback) =\u0026gt; { for (let i = 0; i \u0026lt; 10; i++){ console.log(num) num += 1 } callback(num) } count(1, (num) =\u0026gt;{ console.log(1, num) }) console.log(\u0026#34;============================\u0026#34;) count(1000, (num) =\u0026gt; { console.log(1000, num) }) count 함수는 파라미터 num에 10번 반복문을 돌면서 1을 더하는 함수이다. 그리고 for가 끝나면 콜백을 실행한다.\n해당 코드를 실행하면 아래와 같은 결과가 나온다.\n1 2 3 4 5 6 7 8 9 10 1 11 ============================ 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1000 1010 완벽하게 동기로 실행되는 것을 볼 수 있다. 그러므로 콜백함수를 만든다고 해서 비동기로 작동하지 않는다.\njavascript 런타임 js에서 비동기를 이해하기 위해서는 javacript 런타임 에 대해 이해할 필요가 있다.\n런타임은 어떠한 코드가 실제로 구동할 수 있는 환경을 의미힌다. 그러므로 당연하게도 javascript 런타임은 js 코드를 실제로 구동할 수 있는 환경이다.\njavascript 런타임도 종류가 있는데, 크게 분리하면 웹 브라우저 와 node.js가 있다. 웹 브라우저는 흔히 사용하는 크롬, 사파리, 파이어폭스 등이 있다.\n앞서 런타임은 구동 환경을 의미한다고 했다. javascript 런타임에는 어떤 종류의 환경이 존재할까?\njavacript 엔진 이벤트 루프 포함 Web APIs(node.js에서는 libuv) 이 두가지가 존재한다.\njavascript 엔진 그렇다면 javascript 엔진이란 무엇일까? js 코드를 실제로 실행하는 영역이다. 개발자가 작성한 모든 js 코드는 javascript 엔진에서 파싱되고 실행된다. 이 javascript 엔진은 싱글 스레드에서 작동한다.\n여기에는 흔히 알려져 있는 이벤트 루프도 포함되어 있다. 이벤트 루프에 대해서는 뒤에서 자세하게 설명하도록 하겠다. 우선 이 이벤트 루프가 javascript 엔진에서 작동한다는 사실만 기억하자.\njavascript 엔진의 구성 요소 콜 스택 (call stack) 실행되어야할 함수들을 저장하는 곳\nconst test = (num) =\u0026gt; { console.log(num) } test(1) test(1)이 이 콜스택에 삽입 후 실행 test(1)에 있는 console.log(1)을 콜스택에 삽입 후 실행 1이 출력 후 console.log(1) 콜스택에서 제거 test(1) 콜스택에서 제거 힙 (heap) 데이터가 동적으로 저장되는 공간 이벤트 루프(event loop) 비동기 작업이 끝난 후 결과값을 처리할 콜백 함수를 저장해두는 곳 Web APIs 웹 브라우저에서 비동기적인 이벤트를 처리하기 위해 제공하는 API들이다. 웹 브라우저에서 제공하는 것이기 때문에, 해당 api는 javascript 엔진에서 실행되지 않는다. 이 api들은 javascript 엔진과 실제로 다른 프로세스에서 실행되며, js에서 호출할 수 있도록 javascript 엔진에서는 인터페이스만 제공한다.\n여기서 잠깐! 인터페이스만 제공한다는 것의 의미란? API는 Application Programming Interface의 약자이다. 이는 두 개의 서로 다른 프로세스(혹은 프로그램)간에 통신을 위한 일종의 약속이다.\nA와 B라는 두 개의 프로세스가 있고, B에는 getData라는 기능이 있다. A에서 B의 getData라는 기능을 사용하기 위해서는 getData의 실행에 필요한 데이터를 전달해 주어야 한다. 이때 \u0026quot;B는 특정 형태의 프로토콜과 특정 형태의 구조로 데이터를 전달해주면, getData라는 기능을 실행하고, 결과를 특정한 형태로 응답해주겠다\u0026quot; 라고 약속하는 것이 바로 API라고 할 수 있다.\nWeb APIs도 똑같다. 실제 Web APIs는 js 코드로 실행하면, javascript 엔진이 해당 요청을 다른 프로세스(=웹 브라우저)에게 요청하고, 응답을 받으면 그것을 js에서 사용할 수 있도록 결과값을 반환해주는 역할을 한다.\n즉, javascript 엔진과 웹 브라우저 간의 통신 약속이 바로 Web APIs이다.\n해당 게시글을 처음 시작할 때, 특정 조건의 함수만 비동기가 될 수 있다고 했다. 그 특정 조건의 함수란 바로, Web APIs에 등록된 함수이다.\nWeb APIs 함수 목록-mdn web docs\n이벤트 루프 이벤트 루프를 이해하기 위해서는 비동기에 대한 이해가 필요하다.\n비동기란? 파일 저장, 네트워크 요청 등 처리에 시간이 걸리는 I/O 작업이 진행 중에 다른 코드를 실행하는 것을 의미한다. 시간이 걸리는 작업 중에는 프로그램은 놀고 있는 것이기 때문에, 이 시간을 최대한 활용하기 위해 나온 개념이다.\njs는 싱글 스레드이기 때문에, 비동기 코드를 실행할 수 없다. 그래서 앞서 설명한 Web APIs를 통해 브라우저에게 비동기 작업을 요청한다. 그렇다면, 비동기 작업이 종료되었을때, 응답을 받을 것이다. 그 응답은 어떻게 처리해야 할까?\nsetTimeout(()=\u0026gt;{console.log(1)}, 1000) console.log(2) /* 결과 2 1 */ 위와 같은 코드를 보자. 해당 코드는 실행하면 2가 출력되고 1초 후 1이 출력될 것이다. 조금 이상하지 않은가? 코드는 위에서 아래로 진행하면서 실행될 텐데, 1, 2가 출력되는 것이 아니라 2, 1로 반대로 출력된다. 마치 이것은 두 번째 줄이 먼저 실행되고, 첫 번째 줄이 실행된 것 처럼 보인다.\n이것이 앞서 설명한 응답 처리에 대한 질문의 답이라고 할 수 있다. 코드 실행을 순서대로 알아보자\nsetTimeout 콜스택에 삽입 후 실행 1초 타이머를 Web API를 통해 웹 브라우저에게 요청, 이때 ()=\u0026gt;{console.log(1)}을 같이 웹 브라우저에게 전달 setTimeout 콜스택에서 제거 console.log(2) 콜스택에 삽입 후 실행 2 출력 console.log(2) 콜스택에서 제거 1초가 지난 후 웹 브라우저는 ()=\u0026gt;{console.log(1)}을 이벤트 루프 큐에 삽입 이벤트 루프는 큐에 ()=\u0026gt;{console.log(1)}가 생겼으므로, 해당 함수를 콜스택에 삽입 ()=\u0026gt;{console.log(1)} 실행 console.log(1) 콜스택에 삽입 후 실행 1 출력 console.log(1) 콜스택에서 제거 ()=\u0026gt;{console.log(1)} 콜스택에서 제거 종료 이렇듯, 코드는 순차적으로 실행된 것이 맞고, 응답 처리의 방법은 비동기 작업이 종료된 이후 처리할 코드를 미리 넘겨주는 것이다. 이것이 바로 콜백 함수이다. 위 예제에서 콜백 함수는 ()=\u0026gt;{console.log(1)}이다.\n그리고 이벤트 루프의 역할은 비동기 처리가 완료된 이후 실행되어야 할 콜백 함수들의 저장소이다. 이 이벤트 루프는 콜백 함수를 저장하고, 일정 주기(틱)마다 콜백 함수 큐를 확인해서 콜백 함수가 존재하면 해당 함수를 콜 스택에 삽입한다.\n아래 GIF를 보면 콜 스택, 웹 브라우저, 이벤트 루프간의 상호작용을 한눈에 볼 수 있다.\n정리 콜백을 사용한다고 모두 비동기가 되는 것이 아니다. javascript 런타임은 js를 실행하는 구동 환경이다. javascript 엔진과 Web APIs로 구성된다. javascript 엔진은 js를 파싱하고 실행한다. 싱글 스레드로 작동한다. 여기서는 비동기가 작동할 수 없다. 콜 스택, 힙, 이벤트 루프로 구성된다. Web APIs는 웹 브라우저에서 비동기 이벤트를 처리하기 위해 제공되는 api이다. javascript 엔진은 비동기 요청을 Web APIs를 통해 웹 브라우저에게 전달한다. 웹 브라우저는 비동기 작업이 끝나면 콜백 함수를 이벤트 루프 콜백 함수 큐에 삽입힌다. 콜백 함수란 비동기 요청이 끝난 후 응답을 처리하는 함수이다. 이벤트 루프란 콜백 함수 저장소이다. 일정 주기(틱)마다 콜백 함수 큐를 검사하고, 콜백 함수가 존재하면 콜 스택에 해당 함수를 삽입한다. ","date":"2024-01-03T23:34:00+09:00","permalink":"https://fhdufhdu.github.io/post/5/","title":"[JS] 이벤트 루프와 비동기 함수"},{"content":"오늘은 동기와 비동기에 대해서 설명하고자 한다.\n해당 개념은 설명만 들으면 쉽게 이해가 될 수도 있지만, 헷갈릴 여지도 많은 개념이라고 생각한다.\n특히 스레드 개념과 엮이기 시작하면 많이 헷갈리기 시작하는 개념이다.\n동기(Sync) 동기가 제일 간단하다. 흔히 우리가 쓰는 코드를 상상하면 된다.\n아래 JS 예제가 있다.\nconsole.log(1) console.log(2) console.log(3) 결과는 위에서부터 순차적으로 실행되어 아래와 같은 결과를 보일 것이다.\n비동기(Async) 자 이제 비동기에 대해 이해해 보자. 단순하게 비동기는 동기의 반대말이다. 동기가 순차적으로 실행되는 것을 의미하니까 비동기는 순차적으로 실행되지 않는다고 생각하면 된다. 순차적으로 실행되지 않는다면, 코드의 실행순서를 파악하기 힘들 것이다. 이렇게 생각했을 때 비동기가 정말 필요한지에 대해 의문점이 생긴다.\n비동기의 필요성 비동기가 등장한 이유는 낭비되는 시간이 아까워서이다. 아래와 같은 코드를 보자\n// 해당 코드는 psuedo 코드이다. //1 const reqBody = { \u0026#34;choding\u0026#34;: \u0026#34;is good\u0026#34; } //2. 해당 http 요청이 100초가 오래걸린다는 것을 가정하자 const response = requests.post(\u0026#34;http://localhost:3000\u0026#34;, reqBody) //3 console.log(response.body) // 이후 필요한 로직 실행! 단순하게 http 요청을 보내는 코드이다. 이 코드가 동기적으로 작동한다면 대락 100초 이후에 console.log(response.body)가 실행되고 이후 로직이 작동할 것이다. 근데 http 요청을 보내고, 받는 100초 동안 프로세스는 무엇을 하고 있을까?\n정답은 \u0026ldquo;아무것도 안하고 있다.\u0026rdquo; 이다. 정말 아무것도 안 하고 http 응답을 받는 순간까지 기다리는 것만 진행할 것이다. 만약 이 100초라는 시간에 다른 작업을 하면 어떨까? 웬만하면 많은 작업들을 처리할 수 있을 것이다.\n이 남는 시간을 활용하기 위해 비동기라는 개념이 등장했다.\n위 그림처럼, 2번이 완료되지 않았음에도, 2번의 응답이 오기까지의 시간동안 다른 작업을 하는 것이 바로 비동기라고 할 수 있다.\n콜백 앞서 비동기의 필요성을 말했다. 그렇다면 100초 동안 비는 시간에 다른 작업을 하고 나서, 응답을 받는 순간에는 어떻게 될까? 해당 값으로 처리하는 로직이 필요할 것이다. 그것이 바로 콜백(callback)이다.\n콜백의 주요 논지는 \u0026ldquo;해야할 일을 뒤로 미루는 것\u0026rdquo; 이다.\n사실, 이름만 봐도 알 수 있다. callback은 회신하다/답신하다는 뜻이다.\n그러니까 \u0026ldquo;할일 다 하고(=해야 할 일 미루고), 네가 요청한 일 처리할 수 있을 때 처리하겠다\u0026quot;라는 것이다.\n아래 코드를 다시 보자.\n2번 과정이 100초가 걸리니까, 2번의 응답이 오는 100초 동안 다른 일을 JS가 한다고 하자. 이후 100초가 지난 후, 2번의 응답을 가지고 무언가 작업을 해야 할 것이다. 그런데, 어떻게 실행할 것인가? // 해당 코드는 psuedo 코드이다. //1 const reqBody = { \u0026#34;choding\u0026#34;: \u0026#34;is good\u0026#34; } //2. 해당 http 요청이 100초가 오래걸린다는 것을 가정하자 requests.post(\u0026#34;http://localhost:3000\u0026#34;, reqBody) //3 console.log(response.body) // 이후 필요한 로직 실행! //100초 후... //어라, 어떻게 응답을 처리하지? //응답은 왔는데.... 처리할 코드를 어떻게 작성하지...? 이때 콜백을 작성하면 응답을 처리할 수 있는 코드를 작성할 수 있다.\n// 해당 코드는 psuedo 코드이다. //1 const reqBody = { \u0026#34;choding\u0026#34;: \u0026#34;is good\u0026#34; } //2. 해당 http 요청이 100초가 오래걸린다는 것을 가정하자 requests.post(\u0026#34;http://localhost:3000\u0026#34;, reqBody, function(response){ // 4. 100초 후 이 함수 실행 console.log(response.data) }) //3 console.log(response.body) 위 처럼 콜백 함수를 작성할 수 있을 것이다. 저 4번 콜백 함수는 http 응답이 오면 실행된다.\n4번의 콜백 함수는 앞서 말한 \u0026ldquo;해야 할 일을 뒤로 미루는 것\u0026quot;과 같다.\n마무리 간단하게 비동기와 콜백에 대해 알아보았다.\n이렇게 보면 비동기 자체는 크게 어렵지 않은 것 같다. 하지만 필자도 이 개념을 오해 없이 이해하기에 많은 시간이 들었다.\n여러분들도 오해없이 비동기를 이해할 수 있게 되었으면 좋겠다.\n","date":"2024-01-02T22:15:00+09:00","permalink":"https://fhdufhdu.github.io/post/4/","title":"[CS] 동기/비동기에 대해서 알아보자(sync/async)"},{"content":"Docker 컨테이너를 그대로 이미지로 만들어서 Docker Hub에 올리고 싶다면 아래와 같이 진행하자.\nDocker Hub 로그인하기 Docker Hub에 들어가서 로그인을 먼저 한다. 회원가입을 진행하지 않았다면 회원가입을 먼저 하자.\n개인 Docker Hub Repository에 이미지를 올리기 때문에 로그인은 필수다.\n회원가입을 하고 나면 플랜을 선택하라는 화면이 나올 수 있는데, 이때 Personal 플랜으로 진행하면 된다.(무료)\nRepository 만들기 로그인을 하고나서 메인화면에서\n위 이미지와 같이 Repository -\u0026gt; Create Repository를 눌러준다.\n정보 입력 후 Repostiory를 생성하게 되면 자신의 Repository 화면으로 들어갈 수 있게 된다.\n컨테이너 commit 하기 현재 자신의 컴퓨터에 존재하는 컨테이너를 image화 하는 과정이다.\n$ docker commit 자신의컨테이너이름 repository경로:tag # 실제 입력 예 # tag(=version)는 본인 전략대로 사용하기 $ docker commit es fhdufhdu/test_elasticsearch:1.0 생성된 이미지를 업로드하기 # 로그인, username에 email은 입력하지 말기 $ docker login #이미지 이름에 있는 repository로 이미지가 업로드되게 된다. $ docker push fhdufhdu/mim_elasticsearch:1.0 The push refers to repository [docker.io/fhdufhdu/mim_elasticsearch] ec8582fc54e5: Pushed bca54c335b28: Mounted from library/elasticsearch de080e772c1a: Mounted from library/elasticsearch cfc1ead7498a: Mounted from library/elasticsearch 245d80f411fb: Mounted from library/elasticsearch 489e330647ba: Mounted from library/elasticsearch cff7c30e604c: Mounted from library/elasticsearch 3a50035e8665: Mounted from library/elasticsearch 7074040eb2b7: Mounted from library/elasticsearch af7ed92504ae: Mounted from library/elasticsearch 1.0: digest: sha256:018de9cde96f6304cb8967a5747fe123244af76ef502fd7c5e446dd91b6aa765 size: 2417 위 명령어를 실행하면, 이미지를 Repository에 올릴 것이다.\n이후 이미지를 받아와서 컨테이너에 올리는 작업은 기존 방식과 동일하게 진행하면 된다.\n","date":"2023-12-20T12:39:00+09:00","permalink":"https://fhdufhdu.github.io/post/3/","title":"[Docker] 컨테이너를 Docker Hub에 올리기"},{"content":"추상 클래스 만들기 import abc class BaseClass(metaclass=abc.ABCMeta): @abc.abstractmethod def run(self): pass # 아래처럼 class BaseClass: __metaclass__ = abc.ABCMeta @abc.abstractmethod def run(self): pass class ChildClass(BaseClass): def run(self): print(\u0026#34;hello world!\u0026#34;) a = ChildClass() 위와 같이 metaclass로 해당 클래스가 추상 클래스라는 것을 명시한다.\n이후 추상클래스로 쓰고 싶은 메서드에 abstractmethod 데코레이터를 달면 된다.\n만약 상속받는 클래스에서 추상클래스를 구현하지 않으면 아래와 같이 에러가 뜬다.\nTraceback (most recent call last): File \u0026#34;/var/task/main.py\u0026#34;, line 12, in \u0026lt;module\u0026gt; a = ChildClass() TypeError: Can\u0026#39;t instantiate abstract class ChildClass with abstract method run ","date":"2023-12-20T12:16:00+09:00","permalink":"https://fhdufhdu.github.io/post/2/","title":"[Python] 추상 클래스 만들기"},{"content":" 개발을 막 시작한 새내기 개발자부터 개발 경력이 많은 개발자까지 무조건 들어봤을 용어, 객체 지향에 대해 알아보자.자동차 운전을 코드로 구현하는 것을 예시로, 객체 지향과 절차 지향을 비교해 가면서 설명한다. 객체 지향을 배우러 왔는데, 절차 지향까지 알아야 한다고 겁먹지 말자, 절차 지향을 이해한다면, 객체 지향을 이해하기 더욱 쉬울 것이다.이 내용은 기본적인 코드 작성 지식이 있어야 이해할 수 있다.\n절차 지향과 객체 지향 절차 지향이란? 객체지향이 있기 이전, 개발 패러다임은 절차 지향이었다. 절차 지향은 간단히 \u0026ldquo;어떤 일을 하기 위해 필요한 행동들의 나열\u0026rdquo; 이라고 정의할 수 있다. 아래와 같은 코드 예제를 보자\ndef main(): direction = input(\u0026#34;핸들을 어느 방향으로 돌릴 것 인가요?(left, right): \u0026#34;) if direction == \u0026#34;right\u0026#34;: print(\u0026#34;핸들을 오른쪽으로 전환!\u0026#34;) else: print(\u0026#34;핸들을 왼쪽으로 전환!\u0026#34;) main() 사용자에게 핸들 방향을 입력받고, 해당 방향에 맞게 핸들을 돌렸다고 출력해 주는 코드이다.\n이와 같이, \u0026ldquo;핸들을 꺾기 위해(어떤 일) 사용자의 입력을 받고, 입력에 맞게 문자열을 출력하는 코드 (행동들의 나열)\u0026ldquo;로 볼 수 있는 것이 절차 지향적인 코드 작성 방법이다.\n객체 지향이란? 객체 지향은 절차지향의 정의인 \u0026ldquo;어떤 일을 하기 위해 필요한 행동들의 나열\u0026quot;을 확장해서 \u0026ldquo;어떤 일을 하기 위한 객체들의 상호작용\u0026quot;으로 정의할 수 있다. 아래와 같은 코드 예제를 보자\nclass Car: def chagne_direction(self, direction: string): if direction == \u0026#34;right\u0026#34;: print(\u0026#34;핸들을 오른쪽으로 전환!\u0026#34;) else: print(\u0026#34;핸들을 왼쪽으로 전환!\u0026#34;) def main(): direction = input(\u0026#34;핸들을 어느 방향으로 돌릴 것 인가요?(left, right): \u0026#34;) car = Car() car.chagne_direction(direction) main() 우선 Car라는 클래스를 만든다. 해당 클래스에서는 자동자의 \u0026ldquo;행동\u0026quot;과 관련된 모든 것을 다룬다. 여기에서는 방향전환 행동만을 추가했다.\n그리고 절차 지향에서의 코드와 같이 사용자에게 입력을 받고, 해당 입력을 저장해 둔다.\n이후, Car(클래스)에서 car(인스턴스)를 만들고, car(인스턴스)의 change_direction을 실행해서 핸들을 전환하도록 한다.\n이와 같이 자동차라는 개념적인 그룹으로 묶어서 코드를 작성하는 방식을 객체 지향 개발이라고 한다.\n클래스와 인스턴스 클래스/인스턴스는 처음 마주했을 때 이해하기 쉽지 않은 용어이다.\n자동차를 예로 들어보자.\n자동차는 어떤 것인가? 명확히 정의하긴 어렵지만, 바퀴 4개(혹은 더 여러 개), 엔진, 핸들이 있는 탈 것이라고 할 수 있다. 이런 개념적인 것들을 가진 모든 것들을 자동차라고 부를 수 있다. 이렇게 보면, 완전히 추상적인 개념이라고 볼 수 있다. 이런 것들을 클래스라고 한다.\n우리가 실제 이용하는 자동차들은 무엇이 있을까. 나의 산타페, 다른 사람의 산타페, 602-1A번 버스 등 많은 자동차들이 있다. 이런 것들을 인스턴스라고 한다.\n자동차라는 \u0026ldquo;개념\u0026quot;만 가지고는 행동을 할 수 없지만, 산타페라는 실체를 가지고는 운전을 할 수 있다. 이처럼 행동을 할 수 있도록 클래스에서 객체를 만들어서 사용한다.\n아래와 같은 코드 예제를 보자\nclass Car: def chagne_direction(self, direction: string): if direction == \u0026#34;right\u0026#34;: print(\u0026#34;핸들을 오른쪽으로 전환!\u0026#34;) else: print(\u0026#34;핸들을 왼쪽으로 전환!\u0026#34;) def main(): # car1과 car2는 Car에서 생성된 두개의 다른 실체임 car1 = Car() car2 = Car() main() 이 코드는 Car클래스에서 두 개의 인스턴스를 생성한다.\n다르게 이야기하면, 하나의 Car라는 추상적인 개념에서 두 대의 실제 자동차를 생성한 것이고, 이 자동차들을 각자 개별적으로 움직일 것이다.\n정리하자면,\n클래스는 \u0026ldquo;어떤 행동을 하는 추상적인 개념 - 자동차, 사람\u0026rdquo;\n**인스턴스는 \u0026ldquo;실제로 그 행동을 하는 실체 - 산타페(자동차), 나 자신(사람), 여러분들(사람)\u0026rdquo;**으로 정리할 수 있겠다.\n객체와의 상호작용 이번엔 객체 지향 프로그래밍의 본질인, 객체와의 상호작용을 알아보자.\n이번에도 코드 예제를 보도록 하자.\nclass Wheel: def change_direction(self, direction: string): if direction == \u0026#34;right\u0026#34;: print(\u0026#34;바퀴를 오른쪽으로 전환!\u0026#34;) else: print(\u0026#34;바퀴를 왼쪽으로 전환!\u0026#34;) class Car: def __init__(self): self.wheel = Wheel() def chagne_direction(self, direction: string): if direction == \u0026#34;right\u0026#34;: print(\u0026#34;핸들을 오른쪽으로 전환!\u0026#34;) else: print(\u0026#34;핸들을 왼쪽으로 전환!\u0026#34;) self.wheel.change_direction(direction) def main(): direction = input(\u0026#34;핸들을 어느 방향으로 돌릴 것 인가요?(left, right): \u0026#34;) car = Car() car.chagne_direction(direction) main() main 함수는 위의 예제와 같다.\n이번에 추가된 것은 Wheel의 존재다. 잘 생각해 보면, 자동차는 바퀴가 있어야 굴러갈 것이다. 그리고 사용자가 핸들을 돌리면 바퀴가 돌아가야 할 것이다. 그러므로 Car는 Wheel을 가지고 있어야 한다. (이것을 has-a 관계라고 하는데, 이 부분은 나중에 설명하겠다)\n그래서 위의 예제는 사용자가 핸들을 돌리면 바퀴도 같이 돌아가는 예제이다.\nCar는 처음 생성될 때, Wheel을 생성해서 자신이 가지고 있고, 사용자가 핸들을 돌리면, Car는 Wheel의 방향을 변경한다.\n이렇게 보면 Car와 Wheel이 상호작용하고 있는 것을 볼 수 있다.\n만약 절차 지향적인 코드였다면 어땠을까? def main(): direction = input(\u0026#34;핸들을 어느 방향으로 돌릴 것 인가요?(left, right): \u0026#34;) if direction == \u0026#34;right\u0026#34;: print(\u0026#34;핸들을 오른쪽으로 전환!\u0026#34;) print(\u0026#34;바퀴를 오른쪽으로 전환!\u0026#34;) else: print(\u0026#34;핸들을 왼쪽으로 전환!\u0026#34;) print(\u0026#34;바퀴를 왼쪽으로 전환!\u0026#34;) main() 위와 같이 끝났을 것이다.\n어라 근데 여기서 이상한 점이 보인다.\n절차 지향이 더 좋아 보이는데\u0026hellip;? 필자가 제시한 예제를 보면, 절차지향적인 코드가 훨씬 짧고 간결해 보이고, 이해하기도 쉬워 보인다.\n하지만 다들 실제로 객체지향적으로 구현을 하고 있다.\n이유가 뭘까?\n이유는 재사용성이다.\n만약 자동차가 100대가 동시에 움직인다면?\n저 if-else 부분을 100번 돌리는 것이 좋을까? Car를 100개 만드는 게 좋을까?\n직관적으로 봤을 때, Car를 100개 만드는 것이 다른 사람이 볼 때 더욱 이해하기가 쉽지 않을까?\n하지만 더욱 중요한 이유가 있다.\n다른 사람과의 협업을 고려하자. 개발은 혼자 할 수 도 있지만 여러 명과 같이 할 수도 있다.\n클래스로 짜놓으면, 누가 봐도 \u0026lsquo;아 이 부분은 자동차를 구현하려고 한 거구나\u0026rsquo;를 알 수 있다.(주석 없이도!) if-else 문을 100번 반복한다고 했을 때, 같이 협업하는 사람이 보면 과연 이 코드를 제대로 이해할까? 필자였다면, 머릿속에 물음표만을 띄웠을 것이다.\n그런 면에서 봤을 때, 객체 지향 프로그래밍이 많이 쓰이는 이유를 알 수 있을 것이다.\n맹신은 금물. 어느 패러다임이 항상 정답은 경우는 없다. 객체 지향이 무조건 옳지도 않고, 상황에 따라 절차 지향적으로 개발하는 것이 더 좋을 때도 있다.\n항상 요구사항에 맞게 개발하는 것이 중요하다. 무조건적인 적용은 오히려 협업을 방해할 수도 있다는 것을 명심하자.\n마무리하며 오늘은 객체 지향에 대해 설명해 보았다. 필자도 객체지향에 대해 설명하면서, 알고 있다고 생각했지만 머릿속에 막연히 있는 개념을 글로 풀어내는 것이 참 어렵다고 느낀다. 이 개념을 처음 접하는 분들도 이해하지 못한 부분이 있을 것이라고 생각한다. 그런 부분이 있다면 댓글로 물어봐주시길 바란다.\n","date":"2023-12-20T11:14:00+09:00","permalink":"https://fhdufhdu.github.io/post/1/","title":"[개발방법론] 객체 지향과 절차 지향에 대해 알아보자"}]