<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on fhdufhdu</title><link>https://fhdufhdu.github.io/post/</link><description>Recent content in Posts on fhdufhdu</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Mon, 18 Mar 2024 18:34:00 +0900</lastBuildDate><atom:link href="https://fhdufhdu.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>[React] 가상 돔(Virtual DOM)이 왜 필요할까?</title><link>https://fhdufhdu.github.io/post/20/</link><pubDate>Mon, 18 Mar 2024 18:34:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/20/</guid><description>&lt;h1 id="들어가며">들어가며&lt;/h1>
&lt;p>나는 백엔드 개발자이지만 프론트, nlp, 보안 등등 여러 방면으로 공부하는 것을 좋아한다. 새로운 지식은 항상 재밌게 느껴지더라고&amp;hellip;&lt;/p>
&lt;p>그래서 오늘은 그냥 지극히 개인적인 궁금증으로 찾아본 가상 돔에 대해서 이야기해보고자 한다. 사실, 혼자 공부한 건 아니고 회사의 프론트엔드 개발자 분하고 같이 공부했다.&lt;/p>
&lt;h1 id="dom">DOM&lt;/h1>
&lt;p>DOM은 Document Object Model의 약자이다. 이는 HTML 요소들을 객체화해서 구조화해놓은 것을 의미한다. 이 DOM을 조작하기 위해서 JS가 탄생했다.&lt;/p>
&lt;p>하여튼, 이 DOM을 조작하게 되면, 다시 DOM이 구조화되고 새롭게 화면으로 그려진다. 이것을 리렌더링이라고 한다. 리렌더링이 반복되고 무수히 많이 일어난다면? 매우 느릴 것이다.&lt;/p>
&lt;p>한번 예를 들어보자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">nums&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">rootNode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">nums&lt;/span>.&lt;span style="color:#a6e22e">forEach&lt;/span>((&lt;span style="color:#a6e22e">num&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">newNode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">newNode&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rootNode&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">newNode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이런 코드가 있다고 해보자.
이 코드는 forEach를 돌 때마다, 계속해서 리렌더링이 일어난다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">nums&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">rootNode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">html&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">nums&lt;/span>.&lt;span style="color:#a6e22e">forEach&lt;/span>((&lt;span style="color:#a6e22e">num&lt;/span>)=&amp;gt;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">newNode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">newNode&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">html&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">newNode&lt;/span>.&lt;span style="color:#a6e22e">outerHTML&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">rootNode&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">html&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 코드는 어떨까? 단 한 번 업데이트하는 것이기 때문에 리렌더링도 단 한 번 일어날 것이다.&lt;/p>
&lt;p>이렇듯 한 번에 모아서 업데이트를 하면 렌더링 횟수를 줄일 수 있다.&lt;/p>
&lt;h1 id="가상-돔virtual-dom">가상 돔(Virtual DOM)&lt;/h1>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/20/image.png"
width="755"
height="304"
loading="lazy"
alt="출처 https://callmedevmomo.medium.com/virtual-dom-react-%ED%95%B5%EC%8B%AC%EC%A0%95%EB%A6%AC-bfbfcecc4fbb"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="596px"
>&lt;/p>
&lt;p>리액트는 이렇게 변경점을 한 번에 업데이트 하기 위해서, 가상 돔이라는 것을 만들어 냈다. 이 가상 돔은 실제 돔을 복사한 것이다. 그래서 아무리 이 가상 돔을 업데이트해도 실제로 업데이트가 일어나지는 않는다.&lt;/p>
&lt;p>가상 돔은 총 두 가지가 존재한다. 원본 가상 돔과, 변경 가상 돔이다. 실제로 상태 값이 업데이트된다면, 리액트는 변경 가상 돔을 건드려 값을 업데이트 한다. 이후 diffing을 통해서 원본 가상 돔과 변경 가상 돔을 비교해서 어느 부분이 업데이트 되었는지를 확인한다.&lt;/p>
&lt;p>이후 리액트는 위의 코드처럼 실제 돔에 한 번에 업데이트 할 수 있도록 코드를 작성하고, 실제 돔에 업데이트를 진행한다. 그렇다면 리렌더링을 최소화할 수 있다.&lt;/p>
&lt;h1 id="마치며">마치며&lt;/h1>
&lt;p>오늘은 궁금했던 가상 돔에 대해서 얘기해 보았다. 사실 프론트엔드 개발자가 아니라서 자세하게 작성하지는 않았지만, 왜 필요한지는 정리해야 할 것 같아서 포스팅하게 되었다. 언젠가 이런 구조를 내가 백엔드에서 써먹을 수도 있을 수도 있으니까! 개발한 코드와 구조는 돌고 돈다고 생각한다.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[Python] ASGI 서버를 직접!! 만들어보자</title><link>https://fhdufhdu.github.io/post/19/</link><pubDate>Tue, 12 Mar 2024 15:00:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/19/</guid><description>&lt;h1 id="들어가며">들어가며&lt;/h1>
&lt;p>이전에 &lt;a class="link" href="https://fhdufhdu.github.io/post/14" >WSGI 서버를 직접!! 만들어보자&lt;/a>라는 게시글을 통해 WSGI 서버를 만들어보았다. WSGI만 하면 아쉬우니 이번에는 ASGI 서버를 만들어보도록 하겠다.&lt;/p>
&lt;p>전체 코드는 &lt;a class="link" href="https://github.com/fhdufhdu/MyUvicorn" target="_blank" rel="noopener"
>깃허브에서&lt;/a> 확인해 볼 수 있다.&lt;/p>
&lt;h1 id="asgi">ASGI&lt;/h1>
&lt;p>WSGI는 Web Server Gateway Interface의 약자다. 그럼 ASGI는 어떤 단어들의 약자일까?&lt;/p>
&lt;p>정답은 Asynchronous Server Gateway Interface의 약자이다. 이름을 보면 알 수 있듯이, ASGI는 비동기 처리가 가능한 서버 인터페이스이다.&lt;/p>
&lt;p>&lt;em>동기/비동기에 대해서 궁금하다면 해당 &lt;a class="link" href="https://fhdufhdu.github.io/post/4" >게시글&lt;/a>로!&lt;/em>&lt;/p>
&lt;p>ASGI 공식문서를 보면 &lt;em>&lt;strong>ASGI (Asynchronous Server Gateway Interface) is a spiritual successor to WSGI&lt;/strong>&lt;/em> 라고 쓰여있다. ASGI는 WSGI의 정신적으로 계승했다는 것인데 그 말대로 WSGI와 전체적인 구조가 비슷하다.&lt;/p>
&lt;h1 id="cpython의-gil">CPython의 GIL&lt;/h1>
&lt;p>자바의 경우 한 요청당 하나의 스레드가 배정된다. 이렇게 되면, 여러 개의 요청이 들어와도 동시에 처리할 수 있다.&lt;/p>
&lt;p>그런데 이전의 WSGI는 왜 스레드를 사용하지 않고, 여러 개의 프로세스를 사용했을까? 안타깝게도, 이는 CPython의 GIL때문이다.&lt;/p>
&lt;p>GIL이란 Global Interpreter Lock의 약자로, Python에서 하나의 스레드가 활성화되면 다른 스레드는 활성화되지 않도록 락을 거는 정책이다. 그래서 스레드를 여러 개 만들어도 제대로 실행되는 스레드는 단 하나밖에 없다. 그래서 멀티 프로세스로 처리하게 된 것이다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>동시성과 병렬성&lt;/strong> &lt;br> 병렬성은 정말, 여러 개가 동시에 작업을 처리하는 것을 의미한다. 컴퓨터 두 대로 동시에 작업을 하는 경우가 바로 병렬성이다. &lt;br> 동시성은 짧게 짧게 일을 처리함으로써 동시에 처리되는 것처럼 보이는 것이다. 여러 개의 스레드가 하나의 cpu를 0.1초 동안 점유하면서 일한다고 생각해 보자. 전체 실행 시간은 늘어나겠지만, 동시에 진행되는 것처럼 보일 것이다.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>CPython?&lt;/strong> &lt;br>
python은 인터프리터 언어로, python으로 작성된 스크립트를 실행시켜 주는 실행기가 존재한다. 이 실행기는 C, Java 등등의 언어로 작성되어 있다. 이때 C로 작성된 실행기를 CPython이라고 부른다. 맨 처음 Python이 릴리즈될 때 사용된 것이 CPython이고 대부분 CPython을 사용한다.&lt;/p>
&lt;/blockquote>
&lt;h1 id="여기에-비동기를-한-스푼">여기에 비동기를 한 스푼&lt;/h1>
&lt;p>잘 생각해 보면, 실행 로직이 CPU bound인 작업은 정말 웬만하면 처리 시간이 엄청 짧다. 문제인 것은 바로 네트워크 I/O이다. 예를 들어, DB 연결, 외부 API 호출 등등 네트워크를 사용하면 생각보다 딜레이 되는 시간이 많다. 그런 남는 시간에 CPU bound 작업을 처리한다면 매우 효율적이지 않을까?&lt;/p>
&lt;p>그래서 탄생한 것이 ASGI다.&lt;/p>
&lt;h1 id="python에서-비동기를-사용하는-방법">Python에서 비동기를 사용하는 방법&lt;/h1>
&lt;h2 id="동기-코드">동기 코드&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_response&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> requests&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;https://www.naver.com&amp;#34;&lt;/span>) &lt;span style="color:#75715e"># 이 부분에서 3초가 걸림&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(response&lt;span style="color:#f92672">.&lt;/span>text) &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span>(a:int, b:int):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(result) &lt;span style="color:#75715e"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>get_response()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sum(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>자, 이런 코드가 있다고 해보자. 이 코드는 1번이 출력되고, 2번이 출력될 것이다. get_response에 3초가 걸린다고 하더라도 순서대로 진행될 것이다.&lt;/p>
&lt;p>근데 우리는 이 requests.post에 낭비되는 3초가 너무 아깝다고 생각한다. 이 3초 동안 sum을 실행시켜 보자.&lt;/p>
&lt;h2 id="비동기-코드">비동기 코드&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> asyncio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> aiohttp &lt;span style="color:#75715e"># pip install aiohttp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_response&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> aiohttp&lt;span style="color:#f92672">.&lt;/span>ClientSession() &lt;span style="color:#66d9ef">as&lt;/span> session:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> session&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;https://www.naver.com&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> response: &lt;span style="color:#75715e"># 이 부분에서 3초가 걸림&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#66d9ef">await&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>text()) &lt;span style="color:#75715e"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span>(a:int, b:int):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(result) &lt;span style="color:#75715e"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 비동기 등록&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task1 &lt;span style="color:#f92672">=&lt;/span> asyncio&lt;span style="color:#f92672">.&lt;/span>create_task(get_response())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task2 &lt;span style="color:#f92672">=&lt;/span> asyncio&lt;span style="color:#f92672">.&lt;/span>create_task(sum(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> task1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> task2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>asyncio&lt;span style="color:#f92672">.&lt;/span>run(main())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 코드를 실행시키면, 2번이 먼저 출력되고, 1번이 출력되는 것을 볼 수 있다. http 요청에 3초가 걸릴 때, 이 시간에 다른 작업(&lt;code>sum&lt;/code>)을 진행한 것이다.&lt;/p>
&lt;h1 id="asgi-구현">ASGI 구현&lt;/h1>
&lt;p>이제 python에서 비동기를 사용하는 방법도 알아보았으니, 본격적으로 ASGI를 구현해 보자.&lt;/p>
&lt;p>WSGI랑 마찬가지로 Application과 Server로 구성되어 있다. Application은 앞으로 app이라고 부르겠다.&lt;/p>
&lt;h2 id="asgi-application">ASGI Application&lt;/h2>
&lt;p>간단한 app의 구현체는 아래와 같이 생겼다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SimpleASGIApp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> __call__(self, scope, receive, send):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> send({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;type&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;http.response.start&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;status&amp;#39;&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;headers&amp;#39;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;content-type&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;text/plain&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> send({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;type&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;http.response.body&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;body&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Hello, world!&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">await&lt;/span> app(scope, receive, send)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>scope: WSGI의 environ과 같은 역할&lt;/li>
&lt;li>receive: app은 &lt;code>await receive()&lt;/code>처럼 receive를 호출해 request body를 가져올 수 있음&lt;/li>
&lt;li>send: response를 하려면 해당 함수를 호출해야 함&lt;/li>
&lt;/ul>
&lt;h2 id="asgi-server">ASGI Server&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> asyncio
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> fast_api_app &lt;span style="color:#f92672">import&lt;/span> app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyUvicorn&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, host: str, port: int, app):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>host &lt;span style="color:#f92672">=&lt;/span> host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>port &lt;span style="color:#f92672">=&lt;/span> port
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>status &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>headers &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>body &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>app &lt;span style="color:#f92672">=&lt;/span> app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 서버 시작&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">start_server&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>server &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> asyncio&lt;span style="color:#f92672">.&lt;/span>start_server(self&lt;span style="color:#f92672">.&lt;/span>_request_handle, self&lt;span style="color:#f92672">.&lt;/span>host, self&lt;span style="color:#f92672">.&lt;/span>port)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>server:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>server&lt;span style="color:#f92672">.&lt;/span>serve_forever()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># HTTP 요청 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">_request_handle&lt;/span>(self, reader: asyncio&lt;span style="color:#f92672">.&lt;/span>StreamReader, writer: asyncio&lt;span style="color:#f92672">.&lt;/span>StreamWriter):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> reader&lt;span style="color:#f92672">.&lt;/span>read(&lt;span style="color:#ae81ff">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 데이터를 읽고, feed_eof를 매번 호출해주어야 at_eof를 확인할 수 있음.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 참고) https://docs.python.org/3.10/library/asyncio-stream.html#asyncio.StreamReader.at_eof&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader&lt;span style="color:#f92672">.&lt;/span>feed_eof()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> reader&lt;span style="color:#f92672">.&lt;/span>at_eof():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 만약 빈 값을 받았다면, 연결 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> data &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> writer&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> writer&lt;span style="color:#f92672">.&lt;/span>wait_closed()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_data &lt;span style="color:#f92672">=&lt;/span> data&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># body, header, http_info 추출 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(splited_data) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_header, b_body &lt;span style="color:#f92672">=&lt;/span> splited_data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_header &lt;span style="color:#f92672">=&lt;/span> splited_data[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_body &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _, b_path, _ &lt;span style="color:#f92672">=&lt;/span> b_header&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;?&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> b_path:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_uri, b_query_string &lt;span style="color:#f92672">=&lt;/span> b_path&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;?&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_uri, b_query_string &lt;span style="color:#f92672">=&lt;/span> b_path, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#f92672">=&lt;/span> b_header&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http_info &lt;span style="color:#f92672">=&lt;/span> headers[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>decode()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method, _, http_scheme_and_version &lt;span style="color:#f92672">=&lt;/span> http_info&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uri, query_string &lt;span style="color:#f92672">=&lt;/span> b_uri&lt;span style="color:#f92672">.&lt;/span>decode(), b_query_string&lt;span style="color:#f92672">.&lt;/span>decode()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http_scheme, http_version &lt;span style="color:#f92672">=&lt;/span> http_scheme_and_version&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#f92672">=&lt;/span> headers[&lt;span style="color:#ae81ff">1&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#f92672">=&lt;/span> list(map(&lt;span style="color:#66d9ef">lambda&lt;/span> x: x&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;: &amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>), headers))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#f92672">=&lt;/span> [[key, value] &lt;span style="color:#66d9ef">for&lt;/span> key, value &lt;span style="color:#f92672">in&lt;/span> headers]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># asgi scope 제작&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 참고) https://asgi.readthedocs.io/en/latest/specs/www.html#http-connection-scope&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scope &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;type&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;http&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;asgi&amp;#39;&lt;/span>:{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;version&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;2.4&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;spec_version&amp;#39;&lt;/span>:&lt;span style="color:#e6db74">&amp;#39;2.0&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;http_version&amp;#39;&lt;/span>: http_version,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;method&amp;#39;&lt;/span>: method,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;scheme&amp;#39;&lt;/span>: http_scheme,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;path&amp;#39;&lt;/span>: uri,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;raw_path&amp;#39;&lt;/span>: b_uri,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;query_string&amp;#39;&lt;/span>: query_string,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;headers&amp;#39;&lt;/span>: headers,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;client&amp;#39;&lt;/span>: writer&lt;span style="color:#f92672">.&lt;/span>get_extra_info(&lt;span style="color:#e6db74">&amp;#39;peername&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;server&amp;#39;&lt;/span>:(&lt;span style="color:#e6db74">&amp;#39;127.0.0.1&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">9000&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># receive 함수 제작&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># asgi app은 해당 함수를 통해 body 데이터를 수신함&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 참고) https://asgi.readthedocs.io/en/latest/specs/www.html#request-receive-event&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">receive&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;type&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;http.request&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;body&amp;#39;&lt;/span>: b_body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># send 함수 제작&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># asgi app은 해당 함수를 통해 response를 반환함&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 참고) http.response.start =&amp;gt; https://asgi.readthedocs.io/en/latest/specs/www.html#response-start-send-event&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 참고) http.response.body =&amp;gt; https://asgi.readthedocs.io/en/latest/specs/www.html#response-body-send-event&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send&lt;/span>(options:dict):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> options[&lt;span style="color:#e6db74">&amp;#39;type&amp;#39;&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;http.response.start&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>status &lt;span style="color:#f92672">=&lt;/span> options[&lt;span style="color:#e6db74">&amp;#39;status&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>headers &lt;span style="color:#f92672">=&lt;/span> options[&lt;span style="color:#e6db74">&amp;#39;headers&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> options[&lt;span style="color:#e6db74">&amp;#39;type&amp;#39;&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;http.response.body&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>body &lt;span style="color:#f92672">=&lt;/span> options[&lt;span style="color:#e6db74">&amp;#39;body&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># app에게 처리하라고 전달&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>app(scope, receive, send)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 처리 종료 후 response 제작&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_first &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>http_scheme_and_version&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>status&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_header &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list(map(&lt;span style="color:#66d9ef">lambda&lt;/span> x:x[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;: &amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>x[&lt;span style="color:#ae81ff">1&lt;/span>], self&lt;span style="color:#f92672">.&lt;/span>headers))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> response_first&lt;span style="color:#f92672">.&lt;/span>encode() &lt;span style="color:#f92672">+&lt;/span> response_header &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\r\n\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>body
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 소켓을 통해서 응답 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> writer&lt;span style="color:#f92672">.&lt;/span>write(response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> writer&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> writer&lt;span style="color:#f92672">.&lt;/span>wait_closed()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>uvicorn &lt;span style="color:#f92672">=&lt;/span> MyUvicorn(&lt;span style="color:#e6db74">&amp;#39;127.0.0.1&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">1026&lt;/span>, app)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>asyncio&lt;span style="color:#f92672">.&lt;/span>run(uvicorn&lt;span style="color:#f92672">.&lt;/span>start_server())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>기본적인 구조는 WSGI랑 매우 유사하다.&lt;/p>
&lt;ol>
&lt;li>소켓에서 데이터를 받아와서 scope 제작&lt;/li>
&lt;li>body 부분은 bytes 형태 그래도 receive 함수를 통해 반환하도록&lt;/li>
&lt;li>send를 통해 받아온 response header와 response body를 하나로 합쳐서 소켓으로 전달&lt;/li>
&lt;/ol>
&lt;h1 id="결과">결과&lt;/h1>
&lt;p>테스트도 빼놓을 수는 없다.
이번에는 두 가지의 테스트를 진행했다.&lt;/p>
&lt;p>[조건]&lt;/p>
&lt;ul>
&lt;li>0.1초 단위로 요청 전송&lt;/li>
&lt;li>동시에 1000명 접속&lt;/li>
&lt;li>MyGunicorn의 경우 worker = 16 으로 진행&lt;/li>
&lt;li>아래 코드와 같이 2초 sleep하고 진행&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># asgi - FastAPI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@app.get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/hello_world/&lt;/span>&lt;span style="color:#e6db74">{id}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">hello_world&lt;/span>(request: Request, id: int, abcd:int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> asyncio&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id:abcd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># wsgi - django&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HelloWorld&lt;/span>(GenericAPIView):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>(self, request: Request, id:int):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Response({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: request&lt;span style="color:#f92672">.&lt;/span>GET[&lt;span style="color:#e6db74">&amp;#39;abcd&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="uvicorn-vs-myuvicorn">Uvicorn vs MyUvicorn&lt;/h2>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/19/image.png"
width="3682"
height="2576"
loading="lazy"
alt="uvicorn vs MyUvicorn 비교 결과"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="343px"
>&lt;/p>
&lt;h2 id="asgi-vs-wsgi">ASGI vs WSGI&lt;/h2>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/19/image-1.png"
width="3670"
height="2600"
loading="lazy"
alt="asgi vs wsgi 비교 결과"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="338px"
>&lt;/p>
&lt;h2 id="총평">총평&lt;/h2>
&lt;p>각 요청당 2초 딜레이됐을 뿐인데도, 16개의 프로세서가 작동하는 동기 방식이 매우 성능이 떨어지는 것을 볼 수 있다. 확실히 네트워크 I/O가 자주 발생할 경우에는 비동기 방식이 필수라고 생각이 된다.&lt;/p>
&lt;p>또한 Uvicorn과 MyUvicorn이 성능에서 큰 차이를 보이지 않는 것을 확인했다. 하지만 간단한 상황에서만 비슷한 것이고, 실제 복잡한 상용 서버에 적용하기에는 문제가 있을 것이다.&lt;/p>
&lt;p>오늘도 ASGI를 성공적으로 구현했다. WSGI에 이어, 매우 재미있었다. 아마도 다음에는 golang의 goroutine을 이용한 동시성 프로그래밍을 진행해 볼 것 같다.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[Spring][Spring Security] REST api + Session 로그인을 구현해보자</title><link>https://fhdufhdu.github.io/post/18/</link><pubDate>Tue, 05 Mar 2024 17:00:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/18/</guid><description>&lt;h1 id="들어가며">들어가며&lt;/h1>
&lt;p>일반적으로 Spring Security는 from 로그인과 http basic 로그인을 지원한다. 이는 RESTful한 방식과는 맞지 않기 때문에, 따로 필터를 만들어야 한다.&lt;/p>
&lt;p>간단한 플로우차트는 아래와 같다.
&lt;img src="https://fhdufhdu.github.io/post/18/image.png"
width="2564"
height="3840"
loading="lazy"
alt="alt text"
class="gallery-image"
data-flex-grow="66"
data-flex-basis="160px"
>&lt;/p>
&lt;h1 id="authentication">Authentication&lt;/h1>
&lt;p>세션에 등록할 객체이다. 이 친구를 세션에 등록해서 Sprint Security의 인증, 인가를 사용할 수 있다. Authentication 자체는 인터페이스이며, 구현체를 직접 만들어야 한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> com.fhdufhdu.kiosk.auth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.fhdufhdu.kiosk.entity.Store
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.core.Authentication
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.core.GrantedAuthority
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StoreUserDetails&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> store: Store) : Authentication {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> isAuthenticated: Boolean = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 이름 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">getName&lt;/span>(): String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> store.name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 해당 유저의 권한 리스트
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">getAuthorities&lt;/span>(): MutableCollection&amp;lt;&lt;span style="color:#66d9ef">out&lt;/span> GrantedAuthority&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ArrayList()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 비밀번호 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">getCredentials&lt;/span>(): Any {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> store.password
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 상세 내용 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">getDetails&lt;/span>(): Any {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> store.name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 아이디 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">getPrincipal&lt;/span>(): Any {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> store.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 인증 여부 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">isAuthenticated&lt;/span>(): Boolean {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> isAuthenticated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 인증 여부 설정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">setAuthenticated&lt;/span>(isAuthenticated: Boolean) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.isAuthenticated = isAuthenticated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 부분에서 제일 중요한 부분은, &lt;code>getAuthorities()&lt;/code>와 &lt;code>isAuthenticated()&lt;/code>이다. 이 두 가지가 인가, 인증을 검증할 때 사용된다.&lt;/p>
&lt;h1 id="loginfilter-코드">LoginFilter 코드&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> com.fhdufhdu.kiosk.auth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.fhdufhdu.kiosk.common.KioskPasswordEncoder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.fhdufhdu.kiosk.domain.store.StoreRequest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.fhdufhdu.kiosk.repository.StoreRepository
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.servlet.FilterChain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.servlet.http.HttpServletRequest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.servlet.http.HttpServletResponse
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.data.repository.findByIdOrNull
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.core.context.SecurityContextHolder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.web.context.HttpSessionSecurityContextRepository
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.web.filter.OncePerRequestFilter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LoginFilter&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Bean 주입
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> passwordEncoder: KioskPasswordEncoder,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> storeRepository: StoreRepository
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) : OncePerRequestFilter() { &lt;span style="color:#75715e">// 스프링 시큐리티 필터를 제작하려면, OncePerRequestFilter를 상속받아야 한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 필수 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">doFilterInternal&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request: HttpServletRequest,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response: HttpServletResponse,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filterChain: FilterChain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// URI 체크
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (request.requestURI &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/store/sign-in&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 로그인 요청이 아니면 다음 필터 호출
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> filterChain.doFilter(request, response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// request.inputStream은 한번 읽으면 다시 읽을 수 없다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 그러므로 RequestWrapper를 만들어서 여러번 읽을 수 있도록 한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> newRequest = LoginRequestWrapper(request)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// request.inputStream을 DTO 클래스로 변환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> om = jacksonObjectMapper()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> signInDto = om.readValue(newRequest.inputStream, &lt;span style="color:#a6e22e">StoreRequest&lt;/span>.SingIn&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>.java)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 데이터가 존재하는 지 확인, 없으면 401 에러 반환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> store = storeRepository.findByIdOrNull(signInDto.id) &lt;span style="color:#f92672">?:&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> failLogin(response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 비밀번호가 일치하는 지 확인, 일치하지 않으면 401 에러 반환, 일치하면 Authentication 제작
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> auth = StoreUserDetails(store)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth.isAuthenticated = passwordEncoder.matches(signInDto.password + store.salt, store.password)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!auth.isAuthenticated) &lt;span style="color:#66d9ef">return&lt;/span> failLogin(response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 현재 리퀘스트 바운드에서 auth를 적용한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">SecurityContextHolder&lt;/span>.getContext().authentication = auth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 리퀘스트 바운드 영역 데이터를 글로벌한 영역으로 저장함. 향후 다른 리퀘스트에서도 세션이 유지되도록
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> newRequest.session.setAttribute(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">HttpSessionSecurityContextRepository&lt;/span>.SPRING_SECURITY_CONTEXT_KEY,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SecurityContextHolder&lt;/span>.getContext()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 해당 세션 비활성화 유지 시간 설정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> newRequest.session.maxInactiveInterval = &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (err: Exception) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> err.printStackTrace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> failLogin(response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">failLogin&lt;/span>(response: HttpServletResponse) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response.sendError(&lt;span style="color:#ae81ff">401&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="스프링-설정-변경">스프링 설정 변경&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> com.fhdufhdu.kiosk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.fhdufhdu.kiosk.auth.LoginFilter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.fhdufhdu.kiosk.common.KioskPasswordEncoder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.fhdufhdu.kiosk.repository.StoreRepository
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.context.annotation.Bean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.context.annotation.ComponentScan
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.context.annotation.Configuration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.authentication.AuthenticationManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.config.annotation.web.builders.HttpSecurity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.crypto.password.PasswordEncoder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.web.SecurityFilterChain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@ComponentScan&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@EnableWebSecurity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SpringConfiguration&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> authenticationConfiguration: AuthenticationConfiguration,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> storeRepository: StoreRepository
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Throws&lt;/span>(Exception&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">securityFilterChain&lt;/span>(http: HttpSecurity): SecurityFilterChain {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 기본 로그인 방식 비활성화
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .formLogin {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">it&lt;/span>.disable()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .httpBasic {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">it&lt;/span>.disable()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .csrf {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">it&lt;/span>.disable()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 필터 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .addFilterBefore(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LoginFilter(kioskPasswordEncoder(), storeRepository),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UsernamePasswordAuthenticationFilter&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>.java
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 특정 URL 오픈, 그 외 URL 모두 인증해야만 접근할 수 있도록
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .authorizeHttpRequests {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">it&lt;/span>.requestMatchers(&lt;span style="color:#e6db74">&amp;#34;/store/sign-in&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/store/sign-up&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/error&amp;#34;&lt;/span>).permitAll()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .anyRequest().authenticated()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> http.build()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">authenticationManager&lt;/span>(): AuthenticationManager {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> authenticationConfiguration.authenticationManager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">passwordEncoder&lt;/span>(): PasswordEncoder {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> kioskPasswordEncoder()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">kioskPasswordEncoder&lt;/span>(): KioskPasswordEncoder {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> KioskPasswordEncoder()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="결과">결과&lt;/h1>
&lt;p>실제로 테스트 해본 결과 로그인 한 이후 인증 전용 URL에도 접근이 잘 되는 것을 확인했다. 사실 JWT를 사용해볼까도 싶었지만, 이번 개발의 목적이 MSA가 아닌 대규모 트래픽 대응 서버를 만들어보는 것이기 때문에 세션을 사용하기로 결정했다.&lt;/p>
&lt;p>JWT는 MSA 시스템이 아닌 이상 큰 장점을 가지지는 않는다고 생각한다. 생각보다 검증해야할 것이 많고, 탈취 당했을 때 대응도 어렵다.
모놀리식 서버 구조라면 세션 방식이 더 효율적이라고 생각한다.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[Kotlin] Byte to Hex String을 구현해 보자</title><link>https://fhdufhdu.github.io/post/17/</link><pubDate>Fri, 23 Feb 2024 13:14:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/17/</guid><description>&lt;h1 id="시작하며">시작하며&lt;/h1>
&lt;p>&lt;a class="link" href="https://fhdufhdu.github.io/post/16" >이전 글&lt;/a>에서 코틀린 해시 결과인 byte를 string으로 변환하는 과정을 탐구하던 중에, 2의 보수까지 알아야 해서 2의 보수에 관해 공부했다. 이번 포스팅에는 왜 2의 보수를 공부해야 했는지 설명하면서, 어떻게 byte를 hex string으로 변환하는지 알아보자.&lt;/p>
&lt;h1 id="문제">문제&lt;/h1>
&lt;p>&lt;code>val b = 244.toByte()&lt;/code>를 실행하면, 어떤 값이 나올까? 답은 &lt;code>-12&lt;/code>이다. 왜 그럴까??&lt;/p>
&lt;p>답은 2의 보수다. byte는 8bit이고 244는 $1111\ 0100_2$이다. 최상위 비트가 1이므로 2의 보수를 취하면 $0000\ 1100_2$이고 이 값은 12이다. 그러므로 결괏값은 -12가 된다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> b = &lt;span style="color:#ae81ff">244.&lt;/span>toByte()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(b.toString(&lt;span style="color:#ae81ff">16&lt;/span>)) &lt;span style="color:#75715e">// -C
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>여기서 문제는 &lt;code>244&lt;/code>는 hex로 &lt;code>F4&lt;/code>이다. 그런데 Kotlin에서는 &lt;code>244.toByte().toStrint(16)&lt;/code>를 &lt;code>-C&lt;/code>로 표현한다. 같은 입력값인데 서로 다른 결괏값을 표현하게 된다.&lt;/p>
&lt;h1 id="이유가-뭘까">이유가 뭘까?&lt;/h1>
&lt;p>이는 &lt;code>toString()&lt;/code> 함수의 구현 방식에 문제가 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Integer&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> Number
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">implements&lt;/span> Comparable&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span>, Constable, ConstantDesc {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... 중략
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> digits &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;1&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;3&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;4&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;5&amp;#39;&lt;/span> ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;6&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;7&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;8&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;9&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;b&amp;#39;&lt;/span> ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;d&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;e&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;f&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;g&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;h&amp;#39;&lt;/span> ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;i&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;j&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;k&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;l&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;m&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;n&amp;#39;&lt;/span> ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;o&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;p&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;q&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;s&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;t&amp;#39;&lt;/span> ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;u&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;v&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;x&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;y&amp;#39;&lt;/span> , &lt;span style="color:#e6db74">&amp;#39;z&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... 중략
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> String &lt;span style="color:#a6e22e">toString&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i, &lt;span style="color:#66d9ef">int&lt;/span> radix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (radix &lt;span style="color:#f92672">&amp;lt;&lt;/span> Character.&lt;span style="color:#a6e22e">MIN_RADIX&lt;/span> &lt;span style="color:#f92672">||&lt;/span> radix &lt;span style="color:#f92672">&amp;gt;&lt;/span> Character.&lt;span style="color:#a6e22e">MAX_RADIX&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> radix &lt;span style="color:#f92672">=&lt;/span> 10;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Use the faster version */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (radix &lt;span style="color:#f92672">==&lt;/span> 10) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> toString(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (COMPACT_STRINGS) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> buf &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[&lt;/span>33&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">boolean&lt;/span> negative &lt;span style="color:#f92672">=&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;&lt;/span> 0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> charPos &lt;span style="color:#f92672">=&lt;/span> 32;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>negative) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>radix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf&lt;span style="color:#f92672">[&lt;/span>charPos&lt;span style="color:#f92672">--]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">byte&lt;/span>)digits&lt;span style="color:#f92672">[-&lt;/span>(i &lt;span style="color:#f92672">%&lt;/span> radix)&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">/&lt;/span> radix;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf&lt;span style="color:#f92672">[&lt;/span>charPos&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">byte&lt;/span>)digits&lt;span style="color:#f92672">[-&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (negative) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buf&lt;span style="color:#f92672">[--&lt;/span>charPos&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> StringLatin1.&lt;span style="color:#a6e22e">newString&lt;/span>(buf, charPos, (33 &lt;span style="color:#f92672">-&lt;/span> charPos));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> toStringUTF16(i, radix);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ... 중략
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>구현 방식을 살펴보면, i는 변환하고자 하는 값이고, radix는 n진수를 의미한다. 이때 i의 타입이 integer이므로 byte가 들어와도 integer로 형변환된다. 그리고 radix씩 나눈 나머지를 합친 것이 n진수 변환 string이다.&lt;/p>
&lt;p>앞서 i가 byte가 integer로 형변환 된다고 했다. 낮은 비트 타입에서 높은 비트 타입으로 형변환 될 때 낮은 비트의 최상위 비트로 확장되는 부분을 채운다.&lt;/p>
&lt;ul>
&lt;li>예시) $1111\ 0100_2$(-12)를 32비트 integer로 변환&lt;/li>
&lt;li>결과) $1111\ 1111\ 1111\ 1111\ 1111\ 1111\ 1111\ 0100_2$&lt;/li>
&lt;/ul>
&lt;p>확장된 나머지 24개의 비트가 최상위 비트인 1로 모두 채워져 있는 것을 알 수 있다.&lt;/p>
&lt;p>즉, 244는 byte로 -12로 표현되는데, 이를 integer로 확장해도 -12로 표현되는 것이다.&lt;/p>
&lt;p>그럼 byte -12를 inteager -12가 아니라 integer 244로 표현하고 싶다면 어떻게 해야 할까?&lt;/p>
&lt;ul>
&lt;li>예시) $1111\ 0100_2$(-12)를 32비트 integer로 변환&lt;/li>
&lt;li>결과) $0000\ 0000\ 0000\ 0000\ 0000\ 0000\ 1111\ 0100_2$(244) 로 변환하고 싶다면?&lt;/li>
&lt;/ul>
&lt;h1 id="비트-연산을-사용하자">비트 연산을 사용하자&lt;/h1>
&lt;p>비트 연산을 이용하면 된다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> b = &lt;span style="color:#ae81ff">244.&lt;/span>toByte()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(b.toInt() and &lt;span style="color:#ae81ff">0xFF&lt;/span>) &lt;span style="color:#75715e">// 244 출력
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>b.toInt()&lt;/code> = $1111\ 1111\ 1111\ 1111\ 1111\ 1111\ 1111\ 0100_2$&lt;/li>
&lt;li>&lt;code>0xFF&lt;/code> = $0000\ 0000\ 0000\ 0000\ 0000\ 0000\ 1111\ 1111_2$&lt;/li>
&lt;/ul>
&lt;p>애초에 0xFF는 integer이기 때문에 부호 확장이 일어나지 않는다. 이 두개의 값을 and 연산하면, $0000\ 0000\ 0000\ 0000\ 0000\ 0000\ 1111\ 0100_2$를 얻을 수 있다.&lt;/p>
&lt;p>이를 한번 hex 변환해보자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> b = &lt;span style="color:#ae81ff">244.&lt;/span>toByte()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println((b.toInt() and &lt;span style="color:#ae81ff">0xFF&lt;/span>).toString(&lt;span style="color:#ae81ff">16&lt;/span>)) &lt;span style="color:#75715e">// f4 출력
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>정상적으로 &lt;code>f4&lt;/code>가 나오는 것을 알 수 있다.&lt;/p>
&lt;p>하지만 여기서 끝이 아니다.&lt;/p>
&lt;h1 id="뭔가-이상하게-출력되는데">뭔가 이상하게 출력되는데&amp;hellip;?&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> blist = arrayOf(&lt;span style="color:#ae81ff">244.&lt;/span>toByte(), &lt;span style="color:#ae81ff">0.&lt;/span>toByte(), &lt;span style="color:#ae81ff">12.&lt;/span>toByte(), &lt;span style="color:#ae81ff">255.&lt;/span>toByte())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>blist.forEach{ println((&lt;span style="color:#66d9ef">it&lt;/span>.toInt() and &lt;span style="color:#ae81ff">0xFF&lt;/span>).toString(&lt;span style="color:#ae81ff">16&lt;/span>)) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* 결과
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">f4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">ff
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>뭔가 좀 이상하다. byte를 hex로 바꾸면 &lt;code>f4 00 0c ff&lt;/code>가 출력되어야 하는데, 그렇지 않은 것을 알 수 있다. &lt;code>toString()&lt;/code>가 integer의 나눗셈을 기반으로 변환하다 보니 $0000_2$으로 표현되는 부분은 모두 생략하게 된다. 이를 어떻게 해결해야 할까?&lt;/p>
&lt;h1 id="다시-비트연산을-이용하자">다시 비트연산을 이용하자&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> b = &lt;span style="color:#ae81ff">12.&lt;/span>toByte()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(((b.toInt() and &lt;span style="color:#ae81ff">0xFF&lt;/span>) + &lt;span style="color:#ae81ff">0x100&lt;/span>).toString(&lt;span style="color:#ae81ff">16&lt;/span>)) &lt;span style="color:#75715e">// 10c 출력
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>+ 0x100&lt;/code>이 추가되었다. 이렇게 되면
$0000\ 0000\ 0000\ 0000\ 0000\ 0001\ 0000\ 1100_2$이 되기 때문에 $0001\ 0000\ 1100_2$을 가지고 string으로 변환하게 된다. 그렇다면 항상 3개의 문자를 가진 문자열로 변환할 수 있다.&lt;/p>
&lt;p>이제 다 왔다. 3개의 문자중 첫 문자인 1만 제거하면 byte를 hex로 변환할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> blist = arrayOf(&lt;span style="color:#ae81ff">244.&lt;/span>toByte(), &lt;span style="color:#ae81ff">0.&lt;/span>toByte(), &lt;span style="color:#ae81ff">12.&lt;/span>toByte(), &lt;span style="color:#ae81ff">255.&lt;/span>toByte())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>blist.forEach{ println(((&lt;span style="color:#66d9ef">it&lt;/span>.toInt() and &lt;span style="color:#ae81ff">0xFF&lt;/span>) + &lt;span style="color:#ae81ff">0x100&lt;/span>).toString(&lt;span style="color:#ae81ff">16&lt;/span>).substring(&lt;span style="color:#ae81ff">1&lt;/span>)) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* 결과
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">f4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">00
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">0c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">ff
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>끝이다.&lt;/p>
&lt;h1 id="마무리하며">마무리하며&lt;/h1>
&lt;p>자료형 간의 차이를 명확하게 알지 않는 이상, 해결하기 쉽지 않은 문제였다고 생각한다. 비트 연산 또한 잘 이용하지 않았던 것이었는데, 비트 연산을 활용해서 문제를 해결하는 방법이 꽤 인상적이었다. 홀수/짝수 구분도 최하위비트로 판단할 수 있는 것처럼 비트 연산이 최적화에 도움이 많이 될 것 같다.&lt;/p></description></item><item><title>[CS] 왜 음수를 표현할 때 2의 보수를 사용할까?</title><link>https://fhdufhdu.github.io/post/16/</link><pubDate>Sat, 17 Feb 2024 21:00:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/16/</guid><description>&lt;h1 id="시작하며">시작하며&lt;/h1>
&lt;p>최근에 kotlin으로 Spring boot 프로젝트를 제작하고 있던 중에, SHA-512를 사용해야 했었다.
방법을 찾아보니, 굉장히 특이한 코드가 보였다&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Integer&lt;/span>.toString((digest[i] and &lt;span style="color:#ae81ff">0xff&lt;/span>.toByte()) + &lt;span style="color:#ae81ff">0x100&lt;/span>, &lt;span style="color:#ae81ff">16&lt;/span>).substring(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>해당 코드는 SHA-512를 거쳐서 나온 byte를 string으로 변경하는 코드인데, 왜 이렇게 쓰는 지 궁금해졌다.&lt;/p>
&lt;p>그래서 파고파고 공부하다보니, 어느새 2의 보수까지 오게 되었다. 2의 보수를 다시 한번 공부하다보니, 음수를 표현할 때 2의 보수를 왜 사용했는 지에 대해 알 것 같았다. 그래서 해당 내용을 정리하고자 한다.&lt;/p>
&lt;p>&lt;em>해당 내용은 필자의 주관적인 견해가 많이 포함되어 있습니다.&lt;/em>&lt;/p>
&lt;h1 id="보수란">보수란?&lt;/h1>
&lt;blockquote>
&lt;p>보수(補數)는 보충을 해주는 수를 의미한다. 이를테면 1에 대한 10의 보수는 9, 4에 대한 15의 보수는 11의 개념이다. 1에 대한 2의 보수는 1이다.&lt;br>
&lt;strong>출처&lt;/strong> - &lt;a class="link" href="https://ko.wikipedia.org/wiki/%EB%B3%B4%EC%88%98_%28%EC%88%98%ED%95%99%29" target="_blank" rel="noopener"
>위키피디아&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>조금 더 보충 설명하자면, 보수는 각 자리의 수가 특정 수가 되게끔 보충해주는 수이다. 1에 대한 10의 보수는 9이고, 11에 대한 10의 보수는 89이다.&lt;/p>
&lt;h1 id="2의-보수란">2의 보수란?&lt;/h1>
&lt;p>이진법에서 2의 보수를 계산해보자. $1_2$에 2의보수를 하면 $1_2$이고, $10_2$에 2의 보수를 하면 $10_2$이다. $11_2$에 2의 보수를 하면 $1_2$일 것이다.&lt;/p>
&lt;p>이진법에서 1의 보수는 바로 이진수를 토글한 것이다. 여기에 +1을하면 2의 보수를 바로 구할 수 있다.&lt;/p>
&lt;p>예시) $0011\ 0110_2 =&amp;gt; 1100\ 1001_2 =&amp;gt; 1100\ 1010_2$&lt;/p>
&lt;blockquote>
&lt;p>토글이란? &lt;br> 이진수에서 0은 1로, 1은 0으로 변경하는 연산을 말한다. 각 비트에 not 연산을 한 것과 같다. 그래서 이진법에서 1의 보수는 매우 간단한 연산이다.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>n진법일 때 n의 보수 쉽게 구하기&lt;br>n-1의 보수를 구해서 +1을 하면 n의 보수를 바로 구할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;h1 id="이진수-토글의-특징">이진수 토글의 특징&lt;/h1>
&lt;p>이진수를 토글한 후의 값은 특정 수식을 따른다. 어려운 수식은 아니고 정말 간단한 수식이다. 사실 보수의 특징을 생각한다면 쉽게 생각할 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>$\{비트\ 수에\ 맞는\ 최대값\}-\{기존값\} = \{토글된\ 값\}$&lt;/p>
&lt;/blockquote>
&lt;p>$0011\ 0110_2$을 토글하면 $1100\ 1001_2$이 된다.
십진수로 표현하면 54 -&amp;gt; 201가 된 것이다. 이를 다시 수식에 한번 대입해보자.&lt;/p>
&lt;ol>
&lt;li>1 byte에서 최대값 255&lt;/li>
&lt;li>$0011\ 0110_2$은 십진수로 54&lt;/li>
&lt;li>255 - 54 = 201&lt;/li>
&lt;li>토글된 값은 $1100\ 1001_2$이고 이 값은 십진수로 201임&lt;/li>
&lt;li>3번과 4번의 값이 같으므로 수식이 성립함&lt;/li>
&lt;/ol>
&lt;h1 id="1byte로-표현되는-음수의-범위">1byte로 표현되는 음수의 범위&lt;/h1>
&lt;p>1byte로 표현되는 양수의 범위는 0~255($2^8$ = 256개 만큼)인 것은 다들 잘 알고 있을 것이다. 그렇다면 음수는 어떻게 표현할까?&lt;/p>
&lt;ul>
&lt;li>양수 범위 : $0000\ 0000_2$ ~ $0111\ 1111_2$ ($2^7$ = 128개)&lt;/li>
&lt;li>음수 범위 : $1000\ 0000_2$ ~ $1111\ 1111_2$ ($2^7$ = 128개)&lt;/li>
&lt;/ul>
&lt;p>양수와 음수를 가르는 결정적인 차이는 최상위 비트이다. 최상위 비트가 0이면 양수, 1이면 음수로 표현하는 것이다.&lt;/p>
&lt;p>그렇다면, 왜 최상위 비트로 결정하는 것일까? &lt;strong>그 이유는 표현 가능한 수의 개수를 정확히 2등분 하기 때문이다.&lt;/strong>&lt;/p>
&lt;p>양수와 음수를 범위를 맞춤으로써 계산하기 쉽게 하기 위함이다.&lt;/p>
&lt;h1 id="최상위-비트가-1인-이진수는-어떻게-음수로-사용하는가">최상위 비트가 1인 이진수는 어떻게 음수로 사용하는가?&lt;/h1>
&lt;p>$1000\ 0000_2$은 128인데, 이 숫자를 대체 어떻게 음수로 사용할 수 있을까? 여기서 이진수 토글이 등장한다.&lt;/p>
&lt;p>앞서 이진수 토글은 $\{비트\ 수에\ 맞는\ 최대값\}-\{기존값\} = \{토글된\ 값\}$ 가 성립하는 특징을 가진다고 했다.&lt;/p>
&lt;p>그렇다면 최상위 비트가 1인 친구들을 토글해보자.&lt;/p>
&lt;ul>
&lt;li>128 -&amp;gt; 127&lt;/li>
&lt;li>129 -&amp;gt; 126&lt;/li>
&lt;li>130 -&amp;gt; 125&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;li>253 -&amp;gt; 2&lt;/li>
&lt;li>254 -&amp;gt; 1&lt;/li>
&lt;li>255 -&amp;gt; 0&lt;/li>
&lt;/ul>
&lt;p>어떤가? 기존 값이 증가할 수록 토글된 값은 감소하는 것을 볼 수 있다.
여기에 -를 붙인다면? 음수로 사용해도 되지 않겠는가?&lt;/p>
&lt;h2 id="이진수-토글을-음수로-사용할-경우-문제">이진수 토글을 음수로 사용할 경우 문제&lt;/h2>
&lt;p>앞서 진행한 과정을 보면 완벽해보인다. 하지만, 문제가 딱 한가지 있다. 그것은 쓸모없는 값이 하나 존재한다는 것이다.&lt;/p>
&lt;p>최상위 비트가 1인 수를 이진수 토글을 통해 음수로 표현하게 되면 $-127&amp;hellip;-0,0&amp;hellip;127$와 같은 범위를 가지게 된다.&lt;/p>
&lt;p>어라, -0이라는 값이 등장했다. 255를 이진수 토글하면 0이고 여기에 -를 붙이기로 했으니 -0이 나오기는 한다. 그런데 이는 0과 중복되는 의미를 가진다. 즉, 쓸모없는 데이터가 존재한다는 것이다.&lt;/p>
&lt;h2 id="1을-해서-해결해보자">+1을 해서 해결해보자&lt;/h2>
&lt;p>응당 개발자라면 이런 값은 눈 뜨고도 쳐다볼 수 없어야한다.(필자는 좀 그렇다&amp;hellip;) 그렇다면 이진수 토글 이후 +1을 하면 해결되지 않겠는가?&lt;/p>
&lt;ul>
&lt;li>128 -&amp;gt; 128&lt;/li>
&lt;li>129 -&amp;gt; 127&lt;/li>
&lt;li>130 -&amp;gt; 126&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;li>253 -&amp;gt; 3&lt;/li>
&lt;li>254 -&amp;gt; 2&lt;/li>
&lt;li>255 -&amp;gt; 1&lt;/li>
&lt;/ul>
&lt;p>드디어 $-128&amp;hellip;-1,0&amp;hellip;127$ 와 같은 우리가 흔히 보는 범위가
완성되었다.&lt;/p></description></item><item><title>[Python] WSGI 서버를 직접!! 만들어보자</title><link>https://fhdufhdu.github.io/post/14/</link><pubDate>Tue, 06 Feb 2024 21:00:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/14/</guid><description>&lt;h1 id="계기">계기&lt;/h1>
&lt;p>사실 이 포스팅은 원래 &lt;strong>서버의 동시성&lt;/strong>에 대해 포스팅하려고 했었다. 그런데 글을 작성하다 보니 생각 외로 꼬리 질문이 많이 생겨났다. 그래서 그 의문점을 해소해 보고자 그냥 직접 HTTP 서버를 만들면서 동시성을 테스트해 보기로 했다. 이번에는 파이썬을 이용해 개발했다. 파이썬에서는 GIL 때문에 동시성이 어려운데, 이를 어떻게 해결했는지도 궁금해서 파이썬으로 골랐다.&lt;/p>
&lt;p>전체 코드는 &lt;a class="link" href="https://github.com/fhdufhdu/MyGunicorn" target="_blank" rel="noopener"
>깃허브에서&lt;/a> 확인해 볼 수 있다.&lt;/p>
&lt;h1 id="osi-7계층">OSI 7계층&lt;/h1>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/14/image.png"
width="1462"
height="1184"
loading="lazy"
alt="OSI 7계층과 TCP/IP 4계층"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="296px"
>&lt;/p>
&lt;p>우선 OSI 7계층에 대해 알아보자.&lt;/p>
&lt;p>네트워크 통신 체계는 계층마다 특정 프로토콜로 이루어져 있고, 데이터 전달은 높은 계층에서 낮은 계층으로 각각의 프로토콜에 맞게 캡슐화(encapsulation)되고 데이터 수신은 낮은 계층에서 높은 계층으로 역캡슐화(decapsulation)된다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/14/image-1.png"
width="1464"
height="1184"
loading="lazy"
alt="OSI 7계층에서 전송과 수신"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="296px"
>&lt;/p>
&lt;p>OSI 7계층에서의 L1, L2, L3, L4의 저수준 계층의 경우 하드웨어를 직접 조작하는 것이 아니면, 일반적으로 접근할 방법이 없다. 그래서 추상화가 중요해지는데 OS 단계에서 제공하는 추상화가 바로 소켓이다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>여기서 말하는 추상화란?&lt;/strong> &lt;br> 추상화는 비슷하지만, 다른 두 가지의 타입을 하나로 여기고 작업을 할 수 있도록 하는 것을 말한다. 소켓은 모두 다른 L1, L2, L3, L4 하드웨어 드라이버를 신경 쓰지 않고 하나의 코드로 네트워크 작업을 할 수 있도록 도와준다. 만약 소켓이 없었다면, 개발자는 L1, L2, L3, L4 하드웨어 드라이버에 맞게 코드를 짜야 한다. 또한 그렇게 작성한 코드는 동일한 하드웨어 구조가 아니면 다른 기기에서 작동하지 않는다.&lt;/p>
&lt;/blockquote>
&lt;h1 id="소켓">소켓&lt;/h1>
&lt;p>소켓은 앞서 말한 것처럼, 추상화된 네트워크 접속 방법이다. 그렇다면 그 위치는 어디 있을까?&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/14/image-2.png"
width="1462"
height="1184"
loading="lazy"
alt="소켓 위치"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="296px"
>&lt;/p>
&lt;p>바로 전송 계층 위에 존재한다. 대부분의 유명한 프로토콜들은(HTTP, SMTP, FTP, DNS)등은 응용 계층 프로토콜이다. 소켓을 사용할 줄 알고, 프로토콜에 대한 명세를 알고 있다면, 대부분 비슷하게 따라 만들 수 있다.&lt;/p>
&lt;p>그래서 필자도 직접 웹서버를 만들어 볼 생각을 할 수 있었다.&lt;/p>
&lt;h1 id="http">HTTP&lt;/h1>
&lt;p>그럼 HTTP는 실제로 어떻게 요청을 받고 어떻게 응답할까?&lt;/p>
&lt;p>생각보다 간단하다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>요청(Request)&lt;/p>
&lt;ul>
&lt;li>기본 구조
&lt;pre tabindex="0">&lt;code>{method} {path} {version}
{header_key_1}: {header_value_1}
{header_key_2}: {header_value_2}
{header_key_3}: {header_value_3}
...
{body}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>예시
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">GET&lt;/span> / &lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">fhdufhdu.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">*/*&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;br>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">POST&lt;/span> / &lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">fhdufhdu.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">*/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content-Type&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">application/json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">&amp;#34;test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;테스트 데이터 입니다.&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>응답(Reponse)&lt;/p>
&lt;ul>
&lt;li>기본 구조
&lt;pre tabindex="0">&lt;code>{version} {status}
{header_key_1}: {header_value_1}
{header_key_2}: {header_value_2}
{header_key_3}: {header_value_3}
...
{body}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>예시
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-http" data-lang="http">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">HTTP&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">1.1&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#a6e22e">OK&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Date&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">Sat, 09 Oct 2010 14:28:02 GMT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Server&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">Apache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Last-Modified&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">Tue, 01 Dec 2009 20:18:22 GMT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ETag&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">&amp;#34;51142bc1-7449-479b075b2891b&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Accept-Ranges&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content-Length&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">29769&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Content-Type&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">text/html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;...&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위의 형태를 소켓에 주고 받기를 하면 된다.&lt;/p>
&lt;h1 id="wsgi">WSGI&lt;/h1>
&lt;p>파이썬에는 WSGI라는 것이 있다. Web Server Gateway Interface 라는 것의 약자로, 웹 서버와 웹 어플리케이션 사이의 요청/응답 방법을 정의해놓은 것이다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/14/image-3.png"
width="1542"
height="864"
loading="lazy"
alt="구조도"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>WSGI는 WSGI Server와 WSGI Application으로 구성된다.&lt;/p>
&lt;ul>
&lt;li>WSGI Server
&lt;ul>
&lt;li>소켓을 이용해서 TCP 통신을 하는 곳&lt;/li>
&lt;li>받은 데이터에서 &lt;code>path&lt;/code>, &lt;code>method&lt;/code>, &lt;code>query&lt;/code>, &lt;code>body&lt;/code>, &lt;code>header&lt;/code> 등 HTTP Request 데이터 역캡슐화&lt;/li>
&lt;li>WSGI Application에서 받은 응답 데이터를 HTTP Response 명세에 맞게 캡슐화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WSGI Application
&lt;ul>
&lt;li>WSGI Server에게 받은 데이터로 처리 후 응답&lt;/li>
&lt;li>대표적인 WSGI Application에는 &lt;code>Django&lt;/code>가 있음&lt;/li>
&lt;li>&lt;code>Django&lt;/code>가 하는 일이 WSGI Application의 역할임&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="wsgi-application-구현">WSGI Application 구현&lt;/h2>
&lt;p>WSGI Application은 WSGI Server가 전달한 데이터를 받고 처리를 거친 후 데이터를 반환할 것이다.&lt;/p>
&lt;p>그렇게하기 위해서는 WSGI Server(이하 server)와 WSGI Application(이하 app) 간에 약속된 호출 방식과 데이터 구조가 있어야한다.&lt;/p>
&lt;ul>
&lt;li>app은 &lt;em>Callable Object&lt;/em> 이어야한다
&lt;ul>
&lt;li>&lt;code>app(environ, start_response)&lt;/code> 형태로 실행 가능 해야 한다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>server는 app에게 두 가지 정보를 전달해주어야 한다.
&lt;ol>
&lt;li>environ
&lt;ul>
&lt;li>method, path, query, version, host, body 등의 정보를 담은 &lt;code>Dict 객체&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>start_response
&lt;ul>
&lt;li>status, headers를 파라미터로 가지는 &lt;code>Callback 함수&lt;/code>&lt;/li>
&lt;li>app에서 이 함수를 호출해서 server에게 status와 header를 전달해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>app은 &lt;code>Iterator[bytes]&lt;/code>를 반환해야한다.
&lt;ul>
&lt;li>이 데이터는 HTTP body에 들어갈 데이터이다.&lt;/li>
&lt;li>이터레이터를 반환해야 한다는 말은, &lt;br>
&lt;code>for x in app(environ, start_response)&lt;/code>가 작동해야 한다는 의미이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>그럼 간단한 app 구현체를 보자. 파이썬의 빌트인 라이브러리에서 간단한 app을 제공해준다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># from wsgiref.simple_server import demo_app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">demo_app&lt;/span>(environ, start_response):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_response(&lt;span style="color:#e6db74">&amp;#34;200 OK&amp;#34;&lt;/span>, [(&lt;span style="color:#e6db74">&amp;#39;Content-Type&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;text/plain; charset=utf-8&amp;#39;&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Hello World!!&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>)]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 app은 함수로 구성되어 있다. 파이썬에서는 함수도 Callable Object이기 때문에 유효한 구현이다.&lt;/p>
&lt;p>그리고 start_response를 통해 status와 header를 서버에게 전달해준다. return 또한 list로 반환하기 때문에 &lt;code>for x in demo_app(environ, start_response)&lt;/code>가 구동 가능하므로 WSGI를 충족한다.&lt;/p>
&lt;p>이제 함수로 구성된 app을 클래스로 변경해보자&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DemoApp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, environ, start_response):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>environ &lt;span style="color:#f92672">=&lt;/span> environ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>start_response &lt;span style="color:#f92672">=&lt;/span> start_response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __iter__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>start_response(&lt;span style="color:#e6db74">&amp;#34;200 OK&amp;#34;&lt;/span>, [(&lt;span style="color:#e6db74">&amp;#39;Content-Type&amp;#39;&lt;/span>,&lt;span style="color:#e6db74">&amp;#39;text/plain; charset=utf-8&amp;#39;&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">yield&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello World!!&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>조금은 복잡해졌다. 이 코드를 이해하려면 &lt;code>__iter__&lt;/code>, &lt;code>__next__&lt;/code>, &lt;code>generator&lt;/code>를 이해해야 한다. 이 게시글에서는 설명하지 않도록 하겠다.&lt;/p>
&lt;p>&lt;code>__iter__&lt;/code>함수가 generator이므로 &lt;code>for x in DemoApp(environ, start_response)&lt;/code>가 구동 가능하다. 그러므로 WSGI를 충족한다.&lt;/p>
&lt;h1 id="wsgi-server-구현">WSGI Server 구현&lt;/h1>
&lt;p>app이 어떻게 구성되는지 알아보았다. 이제 핵심은 server를 구현해보고자 한다. 앞서 간단한 app을 만들어 보았지만, app 부분은 이번 구현 목적에서 크게 중요한 것이 아니기 때문에 Django로 대체하고자 한다.&lt;/p>
&lt;h2 id="소켓으로-http-서버-만들기">소켓으로 HTTP 서버 만들기&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> socket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># TCP로 소켓 연결&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> socket&lt;span style="color:#f92672">.&lt;/span>socket(socket&lt;span style="color:#f92672">.&lt;/span>AF_INET, socket&lt;span style="color:#f92672">.&lt;/span>SOCK_STREAM) &lt;span style="color:#66d9ef">as&lt;/span> ss:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 소켓이 사용하던 포트가 종료되면, 기본적으로 해당 포트를 일정시간 동안 사용을 막음. 그 설정을 풀어주는 코드&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss&lt;span style="color:#f92672">.&lt;/span>setsockopt(socket&lt;span style="color:#f92672">.&lt;/span>SOL_SOCKET, socket&lt;span style="color:#f92672">.&lt;/span>SO_REUSEADDR, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 포트에서 사용할 host와 port&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss&lt;span style="color:#f92672">.&lt;/span>bind((&lt;span style="color:#e6db74">&amp;#39;localhost&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">1026&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 포트를 실제로 점유하고, accept 요청을 얼마나 저장할 지 설정(=100)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss&lt;span style="color:#f92672">.&lt;/span>listen(&lt;span style="color:#ae81ff">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 클라이언트 접속&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cc, address &lt;span style="color:#f92672">=&lt;/span> ss&lt;span style="color:#f92672">.&lt;/span>accept()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 클라이언트로부터 데이터 수신&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recv_data &lt;span style="color:#f92672">=&lt;/span> cc&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">1048576&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># http request 양식대로 분류 작업&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recv_data &lt;span style="color:#f92672">=&lt;/span> recv_data&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_recv_data &lt;span style="color:#f92672">=&lt;/span> recv_data&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(splited_recv_data) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http_info, body &lt;span style="color:#f92672">=&lt;/span> splited_recv_data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http_info &lt;span style="color:#f92672">=&lt;/span> recv_data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> body &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 분류 작업 끝&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 받은 데이터 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;[http 정보]&amp;#34;&lt;/span>, http_info&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#39;utf-8&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;body 정보&amp;#34;&lt;/span>, body)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 클라이언트에게 데이터 발신&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cc&lt;span style="color:#f92672">.&lt;/span>sendall(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;HTTP/1.1 200 OK&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Date: Sat, 09 Oct 2010 14:28:02 GMT&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Server: Apache&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">ETag: &amp;#34;51142bc1-7449-479b075b2891b&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Accept-Ranges: bytes&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Content-Length: 29769&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Content-Type: text/html&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello World!!&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cc&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 코드를 실행시키고 &lt;code>localhost:1026&lt;/code>으로 접속하면 아래와 같이 접속이 잘 되는 것을 확인 할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/14/image-4.png"
width="656"
height="242"
loading="lazy"
alt="소켓 서버 HTTP로 접속 성공"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="650px"
>&lt;/p>
&lt;p>또한 서버 내 로그도 아래와 같이 잘 작동하는 모습을 보여준다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/14/image-5.png"
width="2020"
height="632"
loading="lazy"
alt="소켓 서버 로그"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="767px"
>&lt;/p>
&lt;h2 id="소켓-서버를-wsgi로-변경하기">소켓 서버를 WSGI로 변경하기&lt;/h2>
&lt;p>자 이제 소켓으로 HTTP 서버를 열어보았다. 이제 WSGI에 충족하도록 WSGI Server를 제작해보자.&lt;/p>
&lt;p>전체코드는 아래와 같다. 코드는 계속해서 업데이트 될 예정이므로, &lt;a class="link" href="https://github.com/fhdufhdu/MyGunicorn" target="_blank" rel="noopener"
>깃허브 링크&lt;/a>도 참고하자!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> importlib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> multiprocessing
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> re
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> signal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> socket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> multiprocessing &lt;span style="color:#f92672">import&lt;/span> Process
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyGunicornHandler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, ss: socket&lt;span style="color:#f92672">.&lt;/span>socket, app_path: str):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ss &lt;span style="color:#f92672">=&lt;/span> ss
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>app_path &lt;span style="color:#f92672">=&lt;/span> app_path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>status_and_headers &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#e6db74">&amp;#34;status&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;headers&amp;#34;&lt;/span>: []}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c_proc &lt;span style="color:#f92672">=&lt;/span> multiprocessing&lt;span style="color:#f92672">.&lt;/span>current_process()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _from, _import &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>app_path&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> module &lt;span style="color:#f92672">=&lt;/span> importlib&lt;span style="color:#f92672">.&lt;/span>import_module(_from)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app &lt;span style="color:#f92672">=&lt;/span> getattr(module, _import)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;START: &amp;#34;&lt;/span>, c_proc&lt;span style="color:#f92672">.&lt;/span>name, &lt;span style="color:#e6db74">&amp;#34; || &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;PID: &amp;#34;&lt;/span>, c_proc&lt;span style="color:#f92672">.&lt;/span>pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn, address &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>ss&lt;span style="color:#f92672">.&lt;/span>accept()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> raw_data &lt;span style="color:#f92672">=&lt;/span> conn&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">1048576&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> raw_data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> raw_data &lt;span style="color:#f92672">=&lt;/span> raw_data&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_raw_data &lt;span style="color:#f92672">=&lt;/span> raw_data&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(splited_raw_data) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_headers, b_body &lt;span style="color:#f92672">=&lt;/span> splited_raw_data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_headers, b_body &lt;span style="color:#f92672">=&lt;/span> (raw_data, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#f92672">=&lt;/span> b_headers&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#f92672">=&lt;/span> headers&lt;span style="color:#f92672">.&lt;/span>rsplit(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method, path, version_of_protocol &lt;span style="color:#f92672">=&lt;/span> headers[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> path:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path, query &lt;span style="color:#f92672">=&lt;/span> path&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path, query &lt;span style="color:#f92672">=&lt;/span> path, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environ &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;REQUEST_METHOD&amp;#34;&lt;/span>: method,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;SERVER_PROTOCOL&amp;#34;&lt;/span>: version_of_protocol,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;SERVER_SOFTWARE&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;WOOSEONG_WSGI&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;PATH_INFO&amp;#34;&lt;/span>: path,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;QUERY_STRING&amp;#34;&lt;/span>: query,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;REMOTE_HOST&amp;#34;&lt;/span>: address[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;REMOTE_ADDR&amp;#34;&lt;/span>: address[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wsgi.input&amp;#34;&lt;/span>: io&lt;span style="color:#f92672">.&lt;/span>BytesIO(b_body),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wsgi.url_scheme&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wsgi.version&amp;#34;&lt;/span>: (&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> idx, header &lt;span style="color:#f92672">in&lt;/span> enumerate(headers):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> idx &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key, value &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\s*:\s*&amp;#34;&lt;/span>, header, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#f92672">=&lt;/span> key&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>upper()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#f92672">=&lt;/span> value&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make_key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">lambda&lt;/span> x: &lt;span style="color:#e6db74">&amp;#34;HTTP_&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> key &lt;span style="color:#f92672">in&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;CONTENT_TYPE&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;CONTENT_LENGTH&amp;#34;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environ[key] &lt;span style="color:#f92672">=&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> make_key(key) &lt;span style="color:#f92672">in&lt;/span> environ:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environ[make_key(key)] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environ[make_key(key)] &lt;span style="color:#f92672">=&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">start_response&lt;/span>(status, headers):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>status_and_headers[&lt;span style="color:#e6db74">&amp;#34;status&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>status_and_headers[&lt;span style="color:#e6db74">&amp;#34;headers&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> headers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_body &lt;span style="color:#f92672">=&lt;/span> app(environ, start_response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 응답 첫번째 라인 구성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_first &lt;span style="color:#f92672">=&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version_of_protocol&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>status_and_headers[&lt;span style="color:#e6db74">&amp;#39;status&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 응답 헤더부분 구성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_headers &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">lambda&lt;/span> x: &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>x[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>x[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>status_and_headers[&lt;span style="color:#e6db74">&amp;#34;headers&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 응답 첫번째 라인 + 헤더 부분&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_first
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> response_headers &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> response_headers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># byte로 인코딩&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># response_body 붙이기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> b &lt;span style="color:#f92672">in&lt;/span> response_body:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">+=&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn&lt;span style="color:#f92672">.&lt;/span>send(response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;END: &amp;#34;&lt;/span>, c_proc&lt;span style="color:#f92672">.&lt;/span>name, &lt;span style="color:#e6db74">&amp;#34; || &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;PID: &amp;#34;&lt;/span>, c_proc&lt;span style="color:#f92672">.&lt;/span>pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">KeyboardInterrupt&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyGunicorn&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 소켓 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ss &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>__init_socket__()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 프로세스 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ps &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># graceful shutdown 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signal&lt;span style="color:#f92672">.&lt;/span>signal(signal&lt;span style="color:#f92672">.&lt;/span>SIGINT, self&lt;span style="color:#f92672">.&lt;/span>close)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signal&lt;span style="color:#f92672">.&lt;/span>signal(signal&lt;span style="color:#f92672">.&lt;/span>SIGTERM, self&lt;span style="color:#f92672">.&lt;/span>close)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 소켓 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init_socket__&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#f92672">=&lt;/span> socket&lt;span style="color:#f92672">.&lt;/span>socket(socket&lt;span style="color:#f92672">.&lt;/span>AF_INET, socket&lt;span style="color:#f92672">.&lt;/span>SOCK_STREAM)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss&lt;span style="color:#f92672">.&lt;/span>setsockopt(socket&lt;span style="color:#f92672">.&lt;/span>SOL_SOCKET, socket&lt;span style="color:#f92672">.&lt;/span>SO_REUSEADDR, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ss
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app_path: str,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host: str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;localhost&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port: int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1026&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backlog: int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ss&lt;span style="color:#f92672">.&lt;/span>bind((host, port))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ss&lt;span style="color:#f92672">.&lt;/span>listen(backlog)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(worker):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Process(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target&lt;span style="color:#f92672">=&lt;/span>MyGunicornHandler&lt;span style="color:#f92672">.&lt;/span>run_on_process, args&lt;span style="color:#f92672">=&lt;/span>(self&lt;span style="color:#f92672">.&lt;/span>ss, app_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">close&lt;/span>(self, signum, frame):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;shutdown: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>signum&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ss&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyGunicorn()&lt;span style="color:#f92672">.&lt;/span>run(app_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;wsgiserver.wsgi:application&amp;#34;&lt;/span>, worker&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span>, backlog&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="소켓을-사용하는-서버부분">소켓을 사용하는 서버부분&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyGunicorn&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 소켓 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ss &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>__init_socket__()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># graceful shutdown 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signal&lt;span style="color:#f92672">.&lt;/span>signal(signal&lt;span style="color:#f92672">.&lt;/span>SIGINT, self&lt;span style="color:#f92672">.&lt;/span>close)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signal&lt;span style="color:#f92672">.&lt;/span>signal(signal&lt;span style="color:#f92672">.&lt;/span>SIGTERM, self&lt;span style="color:#f92672">.&lt;/span>close)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 소켓 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">__init_socket__&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#f92672">=&lt;/span> socket&lt;span style="color:#f92672">.&lt;/span>socket(socket&lt;span style="color:#f92672">.&lt;/span>AF_INET, socket&lt;span style="color:#f92672">.&lt;/span>SOCK_STREAM)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss&lt;span style="color:#f92672">.&lt;/span>setsockopt(socket&lt;span style="color:#f92672">.&lt;/span>SOL_SOCKET, socket&lt;span style="color:#f92672">.&lt;/span>SO_REUSEADDR, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ss
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app_path: str,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host: str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;localhost&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port: int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1026&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backlog: int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ss&lt;span style="color:#f92672">.&lt;/span>bind((host, port))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ss&lt;span style="color:#f92672">.&lt;/span>listen(backlog)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(worker):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">=&lt;/span> MyGunicornHandler(ss&lt;span style="color:#f92672">=&lt;/span>ss, app_path&lt;span style="color:#f92672">=&lt;/span>app_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Process(target&lt;span style="color:#f92672">=&lt;/span>handler&lt;span style="color:#f92672">.&lt;/span>run)&lt;span style="color:#f92672">.&lt;/span>start()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">close&lt;/span>(self, signum, frame):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;shutdown: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>signum&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>ss&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>서버가 생성되면, 소켓을 먼저 설정한다. 그리고 종료시 안전하게 종료될 수 있도록 signal를 이용해서 종료 신호에 반응하도록 한다.&lt;/p>
&lt;p>이후 &lt;strong>동시성을 위해&lt;/strong> 멀티 프로세싱을 이용해 프로세스를 여러 개 띄운다. 이 프로세스에서 클라이언트의 요청을 실제로 처리하게 된다. 실제로 Gunicorn은 동시성을 위해 스레드를 사용하는 것이 아니라, 프로세스를 사용한다. 그 이유는 맨 처음 언급했듯이, GIL 때문이다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>GIL(Global Interpreter Lock)&lt;/strong> &lt;br> GIL은 하나의 스레드가 활성화 되면 다른 스레드가 활성화 되지 않도록 락을 걸고 사용하는 것을 의미한다. 이는 CPython에만 존재하며 다른 파이썬 구현체에는 존재하지 않는다. I/O 바운드에는 GIL이 잘 적용되지 않아서 스레드가 효율적이고, CPU 바운드에는 GIL이 적극적으로 적용된다고 한다. 웹 서버의 경우 CPU 바운드와 I/O 바운드가 적절하게 존재하므로 스레드를 사용하는 것보다 프로세스를 사용하는 것이 더 효율적이다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="요청을-처리하는-부분">요청을 처리하는 부분&lt;/h2>
&lt;p>각 프로세스마다 Handler 클래스를 하나씩 만들어 실행시킨다.&lt;/p>
&lt;p>이후 해당 run 함수 부분에서는 크게 &amp;ldquo;request를 파싱해서 &lt;code>environ&lt;/code>과 &lt;code>start_response&lt;/code>를 적절하게 만들어서 app에게 제공하는 부분&amp;rdquo;, &amp;ldquo;app에게 response를 받아서 소켓을 통해 발신하는 부분&amp;quot;으로 나뉜다.&lt;/p>
&lt;ol>
&lt;li>&lt;code>environ&lt;/code>과 &lt;code>start_response&lt;/code>를 적절하게 만들어서 app에게 제공하는 부분
&lt;ul>
&lt;li>상세 명세는 해당 &lt;a class="link" href="https://wsgi.readthedocs.io/en/latest/definitions.html" target="_blank" rel="noopener"
>문서&lt;/a>를 확인하자&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 클라이언트 연결&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn, address &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>ss&lt;span style="color:#f92672">.&lt;/span>accept()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 데이터 수신&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> raw_data &lt;span style="color:#f92672">=&lt;/span> conn&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">1048576&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 데이터가 없으면 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> raw_data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 데이터를 받아서 http info 부분과 body 부분 분리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> raw_data &lt;span style="color:#f92672">=&lt;/span> raw_data&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> splited_raw_data &lt;span style="color:#f92672">=&lt;/span> raw_data&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(splited_raw_data) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_headers, b_body &lt;span style="color:#f92672">=&lt;/span> splited_raw_data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b_headers, b_body &lt;span style="color:#f92672">=&lt;/span> (raw_data, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#f92672">=&lt;/span> b_headers&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> headers &lt;span style="color:#f92672">=&lt;/span> headers&lt;span style="color:#f92672">.&lt;/span>rsplit(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># http info 첫 번째 라인에서 method, paht, version_of_protocol 추출&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> method, path, version_of_protocol &lt;span style="color:#f92672">=&lt;/span> headers[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> path:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path, query &lt;span style="color:#f92672">=&lt;/span> path&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path, query &lt;span style="color:#f92672">=&lt;/span> path, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># environ 제작&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environ &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;REQUEST_METHOD&amp;#34;&lt;/span>: method,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;SERVER_PROTOCOL&amp;#34;&lt;/span>: version_of_protocol,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;SERVER_SOFTWARE&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;WOOSEONG_WSGI&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;PATH_INFO&amp;#34;&lt;/span>: path,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;QUERY_STRING&amp;#34;&lt;/span>: query,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;REMOTE_HOST&amp;#34;&lt;/span>: address[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;REMOTE_ADDR&amp;#34;&lt;/span>: address[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wsgi.input&amp;#34;&lt;/span>: io&lt;span style="color:#f92672">.&lt;/span>BytesIO(b_body),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wsgi.url_scheme&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;http&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;wsgi.version&amp;#34;&lt;/span>: (&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># environ에 http header 정보 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> idx, header &lt;span style="color:#f92672">in&lt;/span> enumerate(headers):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> idx &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key, value &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">r&lt;/span>&lt;span style="color:#e6db74">&amp;#34;\s*:\s*&amp;#34;&lt;/span>, header, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#f92672">=&lt;/span> key&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>upper()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#f92672">=&lt;/span> value&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make_key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">lambda&lt;/span> x: &lt;span style="color:#e6db74">&amp;#34;HTTP_&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> key &lt;span style="color:#f92672">in&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;CONTENT_TYPE&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;CONTENT_LENGTH&amp;#34;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environ[key] &lt;span style="color:#f92672">=&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> make_key(key) &lt;span style="color:#f92672">in&lt;/span> environ:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environ[make_key(key)] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;,&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> environ[make_key(key)] &lt;span style="color:#f92672">=&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># app에게서 response status와 header를 받는 함수 개발&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">start_response&lt;/span>(status, headers):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>status_and_headers[&lt;span style="color:#e6db74">&amp;#34;status&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>status_and_headers[&lt;span style="color:#e6db74">&amp;#34;headers&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> headers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>app에게 response를 받아서 소켓을 통해 발신하는 부분&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> response_body &lt;span style="color:#f92672">=&lt;/span> app(environ, start_response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 응답 첫번째 라인 구성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_first &lt;span style="color:#f92672">=&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>version_of_protocol&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>self&lt;span style="color:#f92672">.&lt;/span>status_and_headers[&lt;span style="color:#e6db74">&amp;#39;status&amp;#39;&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 응답 헤더부분 구성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_headers &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">lambda&lt;/span> x: &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>x[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">: &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>x[&lt;span style="color:#ae81ff">1&lt;/span>]&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>status_and_headers[&lt;span style="color:#e6db74">&amp;#34;headers&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 응답 첫번째 라인 + 헤더 부분&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response_first
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> response_headers &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> response_headers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\r\n\r\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># byte로 인코딩&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">=&lt;/span> response&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># response_body 붙이기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> b &lt;span style="color:#f92672">in&lt;/span> response_body:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> response &lt;span style="color:#f92672">+=&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn&lt;span style="color:#f92672">.&lt;/span>send(response)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="결과">결과&lt;/h1>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/14/image-6.png"
width="524"
height="526"
loading="lazy"
alt="실행 시"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;p>첫 실행에 프로세스가 제대로 띄워지는 것을 볼 수 있다.&lt;/p>
&lt;p>이후 브라우저에서 접속을 하면&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/14/image-7.png"
width="2396"
height="972"
loading="lazy"
alt="접속 시"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="591px"
>&lt;/p>
&lt;p>아래 처럼 잘 접속되는 것을 볼 수 있다.&lt;/p>
&lt;p>동시성 테스트도 진행해보았다.
조건은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>0.1초 단위로 요청 전송&lt;/li>
&lt;li>동시에 1000명 접속&lt;/li>
&lt;li>worker=16&lt;/li>
&lt;li>backlog =1000&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/14/image-8.png"
width="3686"
height="2584"
loading="lazy"
alt="동시성 테스트 결과"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>왼쪽이 필자가 구현한 MyGunicorn이고 오른쪽이 Gunicorn이다.
상당히 유사한 그래프를 그리는 것을 볼 수 있다.&lt;/p>
&lt;p>이 결과를 보고나서, 정말 기뻤다. 생각보다 성능이 밀리지 않는 것 같아서 기분이 매우 좋더라. 물론, Gunicorn에 비해 많은 허점이 있을 것이다.&lt;/p>
&lt;p>그렇지만 처음부터 공식문서만 보고 하나하나 시도해서 성공했다는 것에 너무 기쁘고 성장한 것 같아서 기분이 좋다.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[PostgreSQL] 인덱스 이야기</title><link>https://fhdufhdu.github.io/post/13/</link><pubDate>Tue, 23 Jan 2024 09:33:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/13/</guid><description>&lt;h1 id="문제와-원인">문제와 원인&lt;/h1>
&lt;p>갑자기 에러가 엄청나게 발생하면서 DB CPU 점유율이 100%까지 올랐던 경험이 있다. 해당 서버는 에러 로그를 데이터베이스에 저장하는데, 에러가 많이 발생했으니 그것을 저장한다고 DB CPU 점유율이 높아진 듯 보였다.&lt;/p>
&lt;p>현재 DB는 AWS의 RDS를 사용한다. RDS의 경우 &lt;strong>&amp;ldquo;성능 개선 도우미&amp;rdquo;&lt;/strong> 라는 도구가 있는데, 이 도구를 통해 확인해 본 결과 예상과는 전혀 달랐다.&lt;/p>
&lt;p>특정 쿼리를 실행하는 곳에서 2.5초가 걸리고 있었다. 이 쿼리는 매우 자주 호출되는 것이기 때문에, 이 속도가 지연된다면, 지연된 시간에 동시에 다른 쿼리가 많이 실행되고 있을 것이고, 그래서 CPU 점유율이 올라간 것이었다.&lt;/p>
&lt;p>결국 해당 쿼리를 최적화하거나, 다른 해결 방법을 모색해야했다.&lt;/p>
&lt;h1 id="해결-방법-후보들">해결 방법 후보들&lt;/h1>
&lt;h2 id="1-쿼리-최적화">1. 쿼리 최적화&lt;/h2>
&lt;p>해당 쿼리는 서브 쿼리를 사용하고 있다. 그것이 문제라고 생각했다. &lt;em>&amp;ldquo;그 쿼리를 &lt;a class="link" href="https://fhdufhdu.github.io/post/7" >with절&lt;/a>로 빼면, 해결되지 않을까?&amp;rdquo;&lt;/em> 라고 생각하고 테스트를 해보았으나, 기대한 만큼의 결과가 나오지 않았다. 2.5s -&amp;gt; 1.5s 로 시간이 줄기는 했으나, 해당 시간 또한 오래 걸리는 것은 마찬가지였다. 해당 테이블의 row의 개수가 200만+ 인 것을 그때 인지했다.&lt;/p>
&lt;h2 id="2-인덱스">2. 인덱스&lt;/h2>
&lt;p>1번으로도 해결이 안되고, row의 개수가 많은 것도 인지해서, select 자체에 문제가 있음을 인지했다. 보통 이런 경우 인덱스가 문제였길래, 인덱스가 지정되어 있는지를 확인했다.&lt;/p>
&lt;p>역시, 인덱스가 걸려있지 않았다. 사수에게 듣기로는 row가 100만 건 넘어가면, 그때부터 인덱스의 부재가 느껴진다고 했다. 이번 문제의 테이블은 200만+건이니까, 인덱스가 문제였다는 확신이 들었다.&lt;/p>
&lt;p>그런데 바로 인덱스를 적용하기에는 조금 걱정이 되었다. CPU 점유율이 100%였다가 계속 50% 정도를 유지하고 있는 상황에서 인덱스를 걸면 점유율이 또 올라서 문제가 생길 수도 있으니까 말이다. (기존에는 평균 5%~10%를 유지했다.)&lt;/p>
&lt;p>그래서 어떻게 했냐면&amp;hellip;&lt;/p>
&lt;h3 id="복제-db-생성하기">복제 DB 생성하기&lt;/h3>
&lt;p>RDS에는 매일매일 특정 시간에 스냅샷을 저장하는 옵션이 있다. 해당 DB에는 그 옵션이 적용되어 있었다. 그래서 해당 스냅샷을 이용해서 복제 데이터베이스를 만들어 놓고 거기서 인덱스를 거는 실험을 해보았다. 만약 시간이 오래걸리고 CPU 점유율도 높아지는 것이 보인다면 사람이 잘 사용하지 않는 시간대에 인덱스 적용 작업을 해야할 것이다.&lt;/p>
&lt;p>전날 스냅샷을 기반으로 데이터베이스를 새롭게 만들고, 테스트를 진행했다. 예상외로 4개 정도 컬럼에 인덱스를 적용하는 것에 2초 정도 걸렸다. 이 정도면 할 만하겠다 싶어서, 바로 적용을 시작했다.&lt;/p>
&lt;h1 id="후기">후기&lt;/h1>
&lt;p>현재 사용중인 DB라서 그런진 몰라도 4초 정도 걸렸지만, 다행히도 매우 빠르게 끝났다. 이후 쿼리를 테스트해보니 0.2초만에 끝나는 것을 확인했다.&lt;/p></description></item><item><title>[JS] this 바인딩에 대해 알아보자</title><link>https://fhdufhdu.github.io/post/12/</link><pubDate>Wed, 17 Jan 2024 13:08:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/12/</guid><description>&lt;h1 id="this란">this란?&lt;/h1>
&lt;p>일반적으로 대부분의 언어에서 &lt;code>this&lt;/code> 키워드는 자기 자신의 인스턴스를 가리키는 용어이다.(python에서는 &lt;code>self&lt;/code> 키워드)&lt;/p>
&lt;p>하지만, javascript의 &lt;code>this&lt;/code> 키워드는 다른 언어와는 다른 방식으로 작동한다.&lt;/p>
&lt;p>* chrome 브라우저 환경에서 테스트한 결과입니다. node의 경우 &lt;code>window&lt;/code> 전역 객체 대신 &lt;code>global&lt;/code> 전역 객체를 사용하는데, &lt;code>global&lt;/code>이 제대로 반환되지 않아서 브라우저 환경에서 진행하였습니다.&lt;/p>
&lt;h2 id="java에서의-this">Java에서의 &lt;code>this&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> number;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setNumber&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> number){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> number
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test t1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Test();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Test t2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Test();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t1.&lt;span style="color:#a6e22e">setNumber&lt;/span>(1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t2.&lt;span style="color:#a6e22e">setNumber&lt;/span>(2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(t1.&lt;span style="color:#a6e22e">number&lt;/span>); &lt;span style="color:#75715e">// 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(t2.&lt;span style="color:#a6e22e">number&lt;/span>); &lt;span style="color:#75715e">// 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>당연하게도 Java에서의 &lt;code>this&lt;/code>는 Test 인스턴스를 가리킨다는 것을 알 수 있다. 그렇다면 js에서는 어떻게 작동할까?&lt;/p>
&lt;h1 id="javascript에서의-this">javascript에서의 &lt;code>this&lt;/code>&lt;/h1>
&lt;h2 id="this-바인딩-규칙">&lt;code>this&lt;/code> 바인딩 규칙&lt;/h2>
&lt;p>우선 설명 이전에, 바인딩 규칙부터 알아보자.&lt;/p>
&lt;ol>
&lt;li>일반 함수(function 키워드 사용)에서 사용된 &lt;code>this&lt;/code>는 해당 함수를 호출하는 객체를 가리킨다.&lt;/li>
&lt;li>화살표 함수에서 사용된 &lt;code>this&lt;/code>는 block을 타고 올라갔을 때, 맨 처음 만나는 일반 함수의 &lt;code>this&lt;/code>를 가리킨다.&lt;/li>
&lt;li>&lt;code>new&lt;/code> 키워드를 사용할 경우 생성자 함수가 객체 그 자체가 된다. 생성자 함수는 일반 함수여야한다. 생성자 함수 호출 시 &lt;code>this&lt;/code>는 무조건 자기 자신이다.&lt;/li>
&lt;/ol>
&lt;h2 id="첫-번째-규칙---일반-함수의-this">첫 번째 규칙 - 일반 함수의 &lt;code>this&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>일반 함수(function 키워드 사용)에서 사용된 &lt;code>this&lt;/code>는 해당 함수를 호출하는 객체를 가리킨다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setNumber&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">number&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span>) &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>) &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>해당 방식은 다른 언어와 유사하게 작동하는 것을 알 수 있다.&lt;/p>
&lt;p>규칙에 맞게 따져보자.&lt;/p>
&lt;ul>
&lt;li>&lt;code>setNumber&lt;/code> 함수가 일반 함수로 선언되어 있음.&lt;/li>
&lt;li>&lt;code>setNumber&lt;/code> 함수를 &lt;code>test&lt;/code> 객체가 호출함.
&lt;ul>
&lt;li>ex. &lt;code>test.setNumber(1)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>-&amp;gt; &lt;code>setNumber&lt;/code> 에서 &lt;code>this&lt;/code> = &lt;code>test&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>그렇다면 &lt;code>setNumber&lt;/code> 함수를 다른 객체에서 사용하면 어떻게 될까?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setNumber&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">number&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">other&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span>) &lt;span style="color:#75715e">// undefined
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span>) &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>) &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">other&lt;/span>) &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>test&lt;/code> 의 &lt;code>setNumber&lt;/code> 를 &lt;code>other&lt;/code> 의 &lt;code>setNumber&lt;/code> 로 옮김.&lt;/li>
&lt;li>&lt;code>other.setNubmer(1)&lt;/code> 을 실행.&lt;/li>
&lt;li>-&amp;gt; &lt;code>this&lt;/code> = &lt;code>other&lt;/code> 임을 알 수 있음.&lt;/li>
&lt;/ul>
&lt;p>즉, 규칙에 따라, &lt;code>this&lt;/code>는 일반함수를 호출하는 객체임을 알 수 있다.&lt;/p>
&lt;h2 id="두-번째-규칙---화살표-함수의-this">두 번째 규칙 - 화살표 함수의 &lt;code>this&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>화살표 함수에서 사용된 &lt;code>this&lt;/code> 는 block 계층을 타고 올라갔을 때, 맨 처음 만나는 일반 함수의 &lt;code>this&lt;/code> 를 가리킨다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setNumber&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">number&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span>) &lt;span style="color:#75715e">// undefined
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>) &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> window) &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>해당 코드를 보면, &lt;code>setNumber&lt;/code> 내부의 &lt;code>this&lt;/code> 가 window 객체임을 알 수 있다. 왜 이런 현상이 발생한 것 일까?&lt;/p>
&lt;p>규칙에 맞게 한번 따져보자,&lt;/p>
&lt;ul>
&lt;li>&lt;code>setNumber&lt;/code> 는 화살표 함수임.&lt;/li>
&lt;li>&lt;code>setNumber&lt;/code> 의 상위 블록은 전역 객체인 &lt;code>window&lt;/code> 임.&lt;/li>
&lt;li>맨 처음 만나는 일반 함수가 없었으므로, &lt;code>window&lt;/code> = &lt;code>this&lt;/code> 임을 알 수 있음.&lt;/li>
&lt;/ul>
&lt;p>이번엔 일반함수가 있는 경우를 알아보자&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setNumber&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">number&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">number&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#a6e22e">number&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span>) &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>) &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> window) &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이번 코드의 결과는 위의 결과와 완전히 정반대라는 것을 알 수 있다.&lt;/p>
&lt;p>다시한번 규칙에 맞게 따져보자.&lt;/p>
&lt;ul>
&lt;li>&lt;code>setNumber&lt;/code> 는 일반 함수임.&lt;/li>
&lt;li>&lt;code>setNumber&lt;/code> 내부에 &lt;code>run&lt;/code> 이라는 화살표 함수가 존재함.&lt;/li>
&lt;li>&lt;code>setNumber&lt;/code> 는 &lt;code>run&lt;/code> 을 실행한 후 결과를 반환함.&lt;/li>
&lt;li>&lt;code>run&lt;/code> 의 상위 계층 블록은 &lt;code>setNumber&lt;/code>이고, &lt;code>setNumber&lt;/code> 의 상위 계층 블록은 &lt;code>window&lt;/code> 임.&lt;/li>
&lt;li>&lt;code>run&lt;/code> 에게는 &lt;code>setNumber&lt;/code> 가 상위 계층 블록 중 처음 만나는 일반 함수이므로 &lt;code>setNumber&lt;/code> 의 &lt;code>this&lt;/code> 가 바로 &lt;code>run&lt;/code> 의 &lt;code>this&lt;/code> 임.&lt;/li>
&lt;li>&lt;code>setNumber&lt;/code> 를 호출한 객체는 &lt;code>test&lt;/code> 객체임&lt;/li>
&lt;li>그러므로 &lt;code>this&lt;/code> = &lt;code>test&lt;/code> 임을 알 수 있음.&lt;/li>
&lt;/ul>
&lt;h2 id="세-번째-규칙---new-키워드">세 번째 규칙 - new 키워드&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>new&lt;/code> 키워드를 사용할 경우 생성자 함수가 객체 그 자체가 된다. 생성자 함수는 일반 함수여야한다. 생성자 함수 호출 시 &lt;code>this&lt;/code>는 무조건 자기 자신이다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setNumber&lt;/span>(&lt;span style="color:#a6e22e">number&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span>) &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>) &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>해당 코드는 &lt;code>setNumber&lt;/code>가 일반함수이므로 당연히 &lt;code>this&lt;/code> 가 &lt;code>test&lt;/code> 임을 알 수 있다.&lt;/p>
&lt;p>그런데 만약 아래와 같은 코드가 있다면 어떨까?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setNumber&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">number&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span>) &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>) &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>해당 코드는 &lt;code>setNumber&lt;/code>가 화살표 함수이므로, 앞서 말했던 것 처럼 &lt;code>this&lt;/code>가 &lt;code>window&lt;/code>가 될 것 같지 않은가?&lt;/p>
&lt;p>그렇지 않다. 위 코드는 아래와 같은 코드이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">number&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">setNumber&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">test&lt;/span>.&lt;span style="color:#a6e22e">number&lt;/span>) &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>) &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>js에서는 함수에 &lt;code>new&lt;/code>를 붙여버리면, 그 함수가 생성자 함수가 되어버린다. 그리고 &lt;code>new&lt;/code>는 일반 함수에만 붙일 수 있다.&lt;/p>
&lt;p>그렇다면 &lt;code>setNumber&lt;/code>의 맨 처음 만나는 상위 블록의 일반 함수가 생성자이고, 생성자의 호출시 &lt;code>this&lt;/code>는 자기자신이므로 &lt;code>setNumber&lt;/code>의 &lt;code>this&lt;/code>는 &lt;code>test&lt;/code>가 된다.&lt;/p>
&lt;h1 id="정리">정리&lt;/h1>
&lt;p>해당 내용은 &lt;a class="link" href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noopener"
>mdn web docs - this&lt;/a>을 참고해서 작성한 글이다. 더 자세한 정보를 얻고 싶다면 문서에서 확인해보자.&lt;/p>
&lt;ul>
&lt;li>&lt;code>this&lt;/code> 바인딩 정리
&lt;ol>
&lt;li>일반 함수(function 키워드 사용)에서 사용된 &lt;code>this&lt;/code>는 해당 함수를 호출하는 객체를 가리킨다.&lt;/li>
&lt;li>화살표 함수에서 사용된 &lt;code>this&lt;/code>는 block을 타고 올라갔을 때, 맨 처음 만나는 일반 함수의 &lt;code>this&lt;/code>를 가리킨다.&lt;/li>
&lt;li>&lt;code>new&lt;/code> 키워드를 사용할 경우 생성자 함수가 객체 그 자체가 된다. 생성자 함수는 일반 함수여야한다. 생성자 함수 호출 시 &lt;code>this&lt;/code>는 무조건 자기 자신이다.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>최상위 &lt;code>this&lt;/code>는 &lt;code>window&lt;/code> 이다.(node.js에서는 global)&lt;/li>
&lt;/ul>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[Hugo] [개선판] 무한스크롤을 구현해 보자</title><link>https://fhdufhdu.github.io/post/11/</link><pubDate>Sun, 14 Jan 2024 14:16:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/11/</guid><description>&lt;h1 id="이전-버전의-문제">이전 버전의 문제&lt;/h1>
&lt;p>&lt;a class="link" href="https://fhdufhdu.github.io/post/10" >저번 게시글&lt;/a>에서 무한 스크롤을 구현했지만, 하나의 html에 모든 데이터를 가지고 있는 구조였다. 해당 구조는 게시글이 1,000개 혹은 10,000개가 된다면, 메인 페이지를 불러오는데, 많은 네트워크 자원을 소비하게 될 것이다. 실제로 게시글 200개 정도로 테스트해 보니, 요청에 600kb를 사용하는 것을 확인했다.&lt;/p>
&lt;h1 id="방법을-찾자">방법을 찾자&lt;/h1>
&lt;p>처음 발상은 이랬다.&lt;/p>
&lt;blockquote>
&lt;p>특정 범위에 해당하는 게시글 리스트를 미리 저장해놓고, http GET 요청을 통해 그때그때 가져오면 되지 않을까?&lt;/p>
&lt;/blockquote>
&lt;p>그런데 여기에는 아래와 같은 조건이 붙는다.&lt;/p>
&lt;ul>
&lt;li>html로 만들어진 게시글 리스트가 필요.
&lt;ul>
&lt;li>테마가 업데이트되어도 수정 없이 무한 스크롤을 구현하고 싶음.&lt;/li>
&lt;li>json과 같은 데이터는 js로 html을 만들어야 하므로, 현재 사용하는 테마가 업데이트되면, 필자가 작성한 js도 수정해야 함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>즉, 5개씩 로딩하고 싶다면, &lt;strong>아래와 같은 리스트를 5개씩 html 형태로 빌드하고, 해당 데이터를 http get을 이용해 가져와야 한다&lt;/strong>는 것이다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/11/image.png"
width="937"
height="853"
loading="lazy"
alt="메뉴 리스트"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;p>여러가지 생각이 들었는데,&lt;/p>
&lt;ul>
&lt;li>&lt;code>게시글.md&lt;/code>를 &lt;code>게시글.html&lt;/code>로 바꿔주는 로직이 있으니, &lt;code>게시글.md&lt;/code>를 &lt;code>게시글.html&lt;/code>, &lt;code>게시글-타이틀.html&lt;/code>로 만들어 줄 수 있겠다.
&lt;ul>
&lt;li>공식문서를 살펴보니, &lt;code>게시글.md&lt;/code>는 무조건 하나의 &lt;code>게시글.html&lt;/code>로 치환되도록 설계되어 있음.(&lt;a class="link" href="https://gohugo.io/templates/lookup-order/" target="_blank" rel="noopener"
>공식 문서&lt;/a>)&lt;/li>
&lt;li>적용 불가&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Pagination&lt;/code> 기능을 활용해 볼까? (&lt;a class="link" href="https://gohugo.io/templates/pagination/" target="_blank" rel="noopener"
>공식 문서&lt;/a>)
&lt;ul>
&lt;li>&lt;code>Pagination&lt;/code> 기능을 활성화하면, &lt;code>/page/${pageNum}&lt;/code>으로 접근 가능함.&lt;/li>
&lt;li>&lt;code>Pagination&lt;/code>은 &lt;code>index.html&lt;/code>을 총 페이지 숫자에 맞게 여러 개 생성해 줌.&lt;/li>
&lt;li>그래서 &lt;code>index.html&lt;/code>에 &lt;code>Pagination&lt;/code> 템플릿을 삽입하면 각 페이지에 맞는 컨텐츠를 삽입해 줌.&lt;/li>
&lt;li>&lt;strong>index.html&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>{{ $pages := where .Site.RegularPages &amp;#34;Type&amp;#34; &amp;#34;in&amp;#34; .Site.Params.mainSections }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ $notHidden := where .Site.RegularPages &amp;#34;Params.hidden&amp;#34; &amp;#34;!=&amp;#34; true }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ $filtered := ($pages | intersect $notHidden) }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{ $pag := .Paginate ($filtered) }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">section&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;posts&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;posts&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;article-list&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ range $index, $element := $pag.Pages }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ partial &amp;#34;article-list/default&amp;#34; . }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ end }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">section&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>위와 같은 &lt;code>index.html&lt;/code>이 있고, &lt;code>paginate=5&lt;/code>로 설정해둔다면,
&lt;ul>
&lt;li>&lt;code>index.html&lt;/code>은 &lt;code>1~5 게시글&lt;/code>이 삽입되어서 빌드.&lt;/li>
&lt;li>&lt;code>page/1/index.html&lt;/code>은 &lt;code>index.html&lt;/code>으로 &lt;strong>리다이렉팅&lt;/strong>하게끔 빌드.&lt;/li>
&lt;li>&lt;code>page/2/index.html&lt;/code>은 &lt;code>6~10 게시글&lt;/code>이 삽입되어서 빌드.&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;li>즉, &lt;code>index.html&lt;/code>과 &lt;code>page/{pageNum}/index.html&lt;/code>은 기본 구조가 &lt;strong>동일&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>그렇다면 이것을 활용하면 되겠다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>그래서 &lt;code>Pagination&lt;/code>을 이용해서 개발을 진행하기로 한다.&lt;/p>
&lt;h1 id="구현">구현&lt;/h1>
&lt;h2 id="hugotoml-수정">hugo.toml 수정&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">baseURL&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;https://fhdufhdu.github.io/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">languageCode&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;ko-KR&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">title&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;fhdufhdu&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">theme&lt;/span> = &lt;span style="color:#e6db74">&amp;#39;hugo-theme-stack&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">paginate&lt;/span> = &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">//추가&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="indexhtml-수정">index.html 수정&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">section&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;posts&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;article-list&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ range $index, $element := $pag.Pages }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ partial &amp;#34;article-list/default&amp;#34; . }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {{ end }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">section&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;posts-footer&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">postsId&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;#posts&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">XMLHttpRequest&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">page&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#75715e">// 1 페이지는 index.html에 들어가 있으니까. 2 페이지로 init value 지정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">intersectionObserver&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">IntersectionObserver&lt;/span>((&lt;span style="color:#a6e22e">entries&lt;/span>)=&amp;gt;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// intersectionRatio가 0 이하이면 아직 노출되지 않은 것
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">entries&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>].&lt;span style="color:#a6e22e">intersectionRatio&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`/page/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">page&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">page&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">페이지 로드 중...`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// http 요청을 통해 page html 가져오기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>((&lt;span style="color:#a6e22e">response&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ok가 아니라면 마지막 페이지라는 것
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">ok&lt;/span>) &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Error(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">page&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">페이지가 마지막입니다`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">text&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>((&lt;span style="color:#a6e22e">html&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 데이터 파싱을 위해 html을 가상의 element에 넣음.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">element&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;temp&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">element&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">html&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// #posts 데이터를 들고와서 innerHTML 추가(innerHTML에는 게시글 리스트가 있음)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#a6e22e">postsId&lt;/span>).&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">element&lt;/span>.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#a6e22e">postsId&lt;/span>).&lt;span style="color:#a6e22e">innerHTML&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">page&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">페이지 로드 완료`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">page&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">catch&lt;/span>((&lt;span style="color:#a6e22e">err&lt;/span>)=&amp;gt;&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// element 구독
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">intersectionObserver&lt;/span>.&lt;span style="color:#a6e22e">observe&lt;/span>(document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;#posts-footer&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="후기">후기&lt;/h1>
&lt;p>이전 게시글에서 무한 스크롤을 구현하고나서 많이 뿌듯했지만, 한편으로는 가슴속에 남아있는 불편함이 있었다. 보기에는 무한 스크롤이지만, 실제로는 무한 스크롤이라고 부르기는 좀 좋지 않은 구조였기 때문이다. 실제로 게시글 수가 많아질수록 쓸데없이 네트워크 자원을 소비한다는 문제가 있는 구조이다.&lt;/p>
&lt;p>어쨌든, 좀 더 나은 코드를 작성하는 것이 바로 개발자의 역할이 아니겠는가? 이 불편한 감정을 해결하기 위해 고민을 오래 했던 것 같다. 샤워하다가도 생각나고, 밥먹다가도 생각나고, 출근하다가도 생각이 났다.&lt;/p>
&lt;p>그런 상황에서 해결하고 나니, 진짜 진지하게 속이 뻥 뚫리는 느낌이다. 이래서 개발을 못 끊나 보다.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[Hugo] [구버전] 무한스크롤을 구현해 보자</title><link>https://fhdufhdu.github.io/post/10/</link><pubDate>Thu, 11 Jan 2024 09:41:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/10/</guid><description>&lt;h1 id="새로운-방법-추가">새로운 방법 추가!&lt;/h1>
&lt;p>해당 방법보다 더 좋은 아이디어로 개발했습니다.
&lt;a class="link" href="https://fhdufhdu.github.io/post/11" >해당 게시글&lt;/a> 참고 해주세요!&lt;/p>
&lt;h1 id="발단">발단&lt;/h1>
&lt;p>Hudi님의 &lt;a class="link" href="https://hudi.blog/" target="_blank" rel="noopener"
>블로그&lt;/a>를 보다 보니 게시글 목록이 무한 스크롤로 구성되어 있었다. 필자도 구현하고 싶어서 여러 가지 방법을 찾아보았다.&lt;/p>
&lt;p>찾아보니 제일 좋은 방법은 &lt;code>IntersectionObserver&lt;/code>를 이용하는 것이라고 한다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>InsersectionObserver&lt;/code>란 상위 요소와의 교차 영역에 대한 변화를 비동기적으로 감지하는 API. element가 화면에 노출되었는지 여부를 간단하게 구독할 수 있음.&lt;/p>
&lt;/blockquote>
&lt;h1 id="문제">문제&lt;/h1>
&lt;p>그런데 문제는, hugo와 js가 궁합이 그렇게 좋지 않다는 것이다.&lt;/p>
&lt;p>블로그 게시글 hugo 템플릿과 js는 공존이 불가능하다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">{{ $test := 1 }}{{ $test }}{{ &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">num&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> }}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위와 같은 코드는 빌드 시에 아래처럼 에러가 발생한다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/10/image.png"
width="1526"
height="166"
loading="lazy"
alt="hugo 에러 로그"
class="gallery-image"
data-flex-grow="919"
data-flex-basis="2206px"
>&lt;/p>
&lt;p>이유가 무엇일까? 우리는 &lt;code>hugo 빌드&lt;/code>와 &lt;code>js 실행&lt;/code> 사이의 순서를 알아야 한다.&lt;/p>
&lt;ol>
&lt;li>hugo 빌드&lt;/li>
&lt;li>hugo 템플릿에 값들이 설정되어 변환됨
&lt;ul>
&lt;li>ex. &lt;code>{{ $test := 1 }}{{ $test }}&lt;/code> 라는 템플릿은 &lt;code>1&lt;/code>로 변환&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>변환된 html이 배포됨&lt;/li>
&lt;li>사용자가 해당 사이트에 접속할 때 js 실행&lt;/li>
&lt;/ol>
&lt;p>즉, hugo 빌드 시점에 템플릿에는 값이 설정되어야 하는데 js가 실행되지 않았으므로 빌드를 완료할 수 없는 것이다.&lt;/p>
&lt;h1 id="해결-방법">해결 방법&lt;/h1>
&lt;p>방법은 전체 html을 만들어 놓고, 필요에 따라 잘라서 집어 넣는 것이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">section&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;posts&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;article-list&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">&amp;lt;!-- 게시글 목록이 보여질 곳 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">section&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!-- IntersectionObserver로 구독할 element --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;posts-footer&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 전체 게시글 대상으로 게시글 목록 html을 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// &amp;#34;__pd__&amp;#34;의 경우 게시글과 게시글 사이 구분자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">pageHtml&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {{ range $index, $element := $filtered }}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {{ partial &amp;#34;article-list/default&amp;#34; . }}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {{ &amp;#34;__pd__&amp;#34; }}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> {{ end }}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> `&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 구분자로 html을 게시글 html list로 만듦
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">pageHtmlList&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">pageHtml&lt;/span>.&lt;span style="color:#a6e22e">split&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;__pd__&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 현재 보여지는 게시글 갯수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">currCnt&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 몇 개씩 보여질지
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">paginate&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">intersectionObserver&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">IntersectionObserver&lt;/span>((&lt;span style="color:#a6e22e">entries&lt;/span>)=&amp;gt;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// intersectionRatio가 0 이하이면 아직 노출되지 않은 것
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">entries&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>].&lt;span style="color:#a6e22e">intersectionRatio&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 게시글 추가 이후 보여지는 게시글 갯수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">nextCnt&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">currCnt&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">paginate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">currCnt&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">nextCnt&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">pageHtmlList&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 게시글 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;#posts&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">pageHtmlList&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 현재 게시글 갯수 업데이트
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">currCnt&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">nextCnt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Loaded new items&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// element 구독
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">intersectionObserver&lt;/span>.&lt;span style="color:#a6e22e">observe&lt;/span>(document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;#posts-footer&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이렇게 하면 정상 구동하는 것을 확인할 수 있다.&lt;/p>
&lt;script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js">&lt;/script>
&lt;div style="width: 100%; height: 100%;">
&lt;lottie-player src="scroll.json" background="transparent" speed="1" style="width: auto; height: auto" controls>&lt;/lottie-player>
&lt;/div>
&lt;p>위 영상을 보면, 새로고침하고나서 &lt;code>Loaded new items&lt;/code>가 한번 출력되고, 이후 스크롤을 내리면서 &lt;code>&amp;lt;div id=&amp;quot;posts-footer&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code>가 화면에 노출될 때 마다 &lt;code>Loaded new items&lt;/code>가 계속해서 호출되는 것을 볼 수 있다.&lt;/p>
&lt;h1 id="후기">후기&lt;/h1>
&lt;p>쉬울듯 하면서도 생각보다 너무 어려웠다. &lt;code>hugo 템플릿은 브라우저에서 동적으로 작동하지 않는다.&lt;/code> 라는 것을 모르는 상태에서 js와 결합하려고 하니 그랬던 것 같다. 그래도 &lt;code>IntersectionObserver&lt;/code>를 알게되고, &lt;code>hugo 템플릿의 작동 방식&lt;/code>을 알게된 좋은 기회였다.&lt;/p>
&lt;p>하지만 조금은 아쉬운 방식이다. 저 방식은 한 html에 모든 데이터를 가지고 있고 보여주는 것만 잘라서 보여주는 것이니까, 본질적으로 한번에 모든 데이터를 보여주는 것과 똑같다고 느껴진다.
조금 더 hugo의 정보를 찾아봐서 다른 방식을 찾아봐야 겠다.&lt;/p>
&lt;p>오랜만에 하나하나 내가 원하는 것을 만들어가는 재미를 느낀 것 같다. 앞으로도 더 많이 꾸며봐야지.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[PostgreSQL] 쿼리 결과를 임시로 저장해서 사용하는 방법(with 절)</title><link>https://fhdufhdu.github.io/post/9/</link><pubDate>Thu, 11 Jan 2024 08:54:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/9/</guid><description>&lt;h1 id="with-절이란">With 절이란?&lt;/h1>
&lt;p>복잡한 쿼리를 작성하다 보면, 비슷한 쿼리를 여러 번 사용해야 할 때가 있다. 매번 똑같은 쿼리를 사용하면 실행 시간이 계속 늘어날 것 같고, 한 번만 실행하고 싶을 때가 있을 것이다.&lt;/p>
&lt;p>이럴 때 필요한 것이 &lt;code>with&lt;/code> 절이다. with 절은 select 쿼리를 실행하고 해당 결과를 임시로 저장해준다. 이러한 것들은 &lt;code>CTE(common table expression)&lt;/code>라고 한다.&lt;/p>
&lt;h1 id="사용법">사용법&lt;/h1>
&lt;h2 id="테이블-구조">테이블 구조&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">create&lt;/span> &lt;span style="color:#66d9ef">table&lt;/span> &lt;span style="color:#66d9ef">user&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id integer &lt;span style="color:#66d9ef">not&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#66d9ef">primary&lt;/span> &lt;span style="color:#66d9ef">key&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name varchar(&lt;span style="color:#ae81ff">8&lt;/span>) &lt;span style="color:#66d9ef">not&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locale varchar(&lt;span style="color:#ae81ff">8&lt;/span>) &lt;span style="color:#66d9ef">not&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="select-쿼리">select 쿼리&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> temp_user &lt;span style="color:#66d9ef">as&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#66d9ef">user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">where&lt;/span> name &lt;span style="color:#66d9ef">like&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fhdu%&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">from&lt;/span> temp_user u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">left&lt;/span> &lt;span style="color:#66d9ef">join&lt;/span> temp_user u2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">on&lt;/span> u1.locale &lt;span style="color:#f92672">=&lt;/span> u2.locale
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>temp_user에 결과를 저장해놓고 계속 불러와서 쓸 수 있게 도와준다.&lt;/p>
&lt;h3 id="with-절-여러-개-사용">with 절 여러 개 사용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> temp_user &lt;span style="color:#66d9ef">as&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#66d9ef">user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">where&lt;/span> name &lt;span style="color:#66d9ef">like&lt;/span> &lt;span style="color:#e6db74">&amp;#34;fhdu%&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>), temp_user2 &lt;span style="color:#66d9ef">as&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#66d9ef">user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">where&lt;/span> name &lt;span style="color:#66d9ef">like&lt;/span> &lt;span style="color:#e6db74">&amp;#34;woo%&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">from&lt;/span> temp_user u1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">left&lt;/span> &lt;span style="color:#66d9ef">join&lt;/span> temp_user2 u2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">on&lt;/span> u1.locale &lt;span style="color:#f92672">=&lt;/span> u2.locale
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위와 같이 &lt;code>,&lt;/code>기호로 하나의 쿼리에서 여러 개의 with 절을 사용할 수 있다.&lt;/p></description></item><item><title>[PostgreSQL] 데이터를 일관되게 전달해 보자</title><link>https://fhdufhdu.github.io/post/8/</link><pubDate>Wed, 10 Jan 2024 14:34:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/8/</guid><description>&lt;h1 id="문제"> 문제&lt;/h1>
&lt;p>&lt;a class="link" href="https://fhdufhdu.github.io/post/7" >1편의 문제&lt;/a>를 해결한 이후 새로운 이슈가 발생했다. 해당 이슈는 &lt;code>게시글 리스트의 댓글 개수와 실제 게시글에 들어갔을 때 댓글 개수가 달라요&lt;/code> 이다. 이전에 수정한 코드가 문제가 있던 것은 아니고, 기존의 로직 자체의 문제였다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/8/image.png"
width="678"
height="272"
loading="lazy"
alt="게시글 리스트(기글하드웨어) - 해당 이미지는 예시입니다."
class="gallery-image"
data-flex-grow="249"
data-flex-basis="598px"
>&lt;/p>
&lt;p>위 이미지의 &lt;code>델 oem 4090의 모험(완)&lt;/code> 게시글을 보면 댓글이 6개라고 나와 있다. 그런데, 실제로 해당 게시글을 클릭해서 들어가면 5개, 4개 같이 댓글 개수가 줄어드는 버그가 있었다.&lt;/p>
&lt;p>이는 서비스의 댓글 정책에서 기인하는 문제이다. 해당 정책은 댓글의 노출이 필요한 조건이 복잡하다.&lt;/p>
&lt;p>그래서 그랬을까? 애초에 기존 로직이 조금 이상했었다. 게시글 리스트를 가져올 때는 단순하게 삭제된 댓글을 제외한 개수를 가져와서 반환하고, 게시글 상세 정보 조회 시에는 실제로 댓글 리스트에 정책을 js 코드로 필터를 작성해서 반환했다. 그래서 댓글의 작성과 삭제가 빈번하게 일어나는 게시글일수록 점점 차이가 심하게 나기 시작했다.&lt;/p>
&lt;p>솔직히 처음 코드를 보고 조금 벙쪘다. 아무리 그래도 그렇지&amp;hellip; 두개의 댓글 개수 카운팅 방식이 같지 않다니&amp;hellip;&lt;/p>
&lt;h1 id="문제를-어떻게-해결할-것인가">문제를 어떻게 해결할 것인가&lt;/h1>
&lt;p>문제의 원인을 파악하고 나서, 어떻게 해결할 지 고민이 많이 되었다. 곰곰히 생각하면서 세가지의 생각이 떠올랐다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>프론트엔드에게 처리 맞기기&lt;/strong>
&lt;ul>
&lt;li>절대 안된다.&lt;/li>
&lt;li>프론트엔드에게 처리를 맞기면 똑같은 문제가 발생할 것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>게시글 목록 조회시 댓글도 싹다 불러와서 정책 필터 적용시키기&lt;/strong>
&lt;ul>
&lt;li>전체 게시글 개수(n) * 전체 댓글 개수(m) = &lt;strong>O(n*m)&lt;/strong> 만큼의 시간 소모&lt;/li>
&lt;li>뭔가 딱봐도 시간이 오래 걸릴 것 같은 느낌&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>orm을 제거하고 정책을 sql 쿼리에 녹여서 만들기&lt;/strong>
&lt;ul>
&lt;li>생각만해도 어렵고, 귀찮다.&lt;/li>
&lt;li>근데 이 방법 밖에 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>결론은 sql 쿼리를 사용하는 것이었다. 하지만 여기에도 문제가 존재한다.&lt;/p>
&lt;h3 id="추가-문제">추가 문제&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>기존 response dto를 유지해야함.&lt;/strong>
&lt;ul>
&lt;li>이것이 제일 큰 문제이다.&lt;/li>
&lt;li>orm은 join시 자동으로 아래 예시 처럼 nest object를 만들어준다.&lt;/li>
&lt;li>기존 response dto는 orm의 nest object에 강하게 의존하고 있다.&lt;/li>
&lt;li>sql로도 해당 nest object를 만들 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>일반적으로 sql로 내려받은 데이터는 object안에 object가 없는 평면적인 데이터이다. 이를 코드상으로 해결하기에는 꽤나 보기싫은 코드가 생겨나게 될 것이다.(많은 loop와 map을 이용한 코드)&lt;/p>
&lt;p>상당히 보기 지저분한 코드가 나올 것이라고 예상할 수 있다. 또한 2중 중첩이 아니라. 3중,4중으로 가게되면 더욱 복잡해질 것이다.&lt;/p>
&lt;p>답은 postgresql의 jsonb 기능이다. postgresql은 groub by 집계함수로 json을 만들어 낼 수가 있다. 이를 통해 결론적으로 nested object를 만들어 바로 반환할 것이다.&lt;/p>
&lt;blockquote>
&lt;p>postgresql에는 jsonb와 json 타입이 있다. jsonb는 바이너리, json은 텍스트이다. 바이너리로 구성된 jsonb는 내부 값 컨트롤(추가, 수정, 삭제)이 가능하다.&lt;/p>
&lt;/blockquote>
&lt;h1 id="해결-과정">해결 과정&lt;/h1>
&lt;h2 id="with절-적극-활용하기">with절 적극 활용하기&lt;/h2>
&lt;p>postgresql에는 with절이라는 것이 있다. with절은 특정 select 구문을 한번 실행하고 임시로 저장해두는 역할을 한다. 비슷한 쿼리를 여러번 실행해야 하는 경우 속도 측면에서 엄청난 강점을 가진다. 이를 보통 &lt;code>CTE(common table expression)&lt;/code>이라고 한다. (&lt;a class="link" href="https://fhdufhdu.github.io/post/9" >참고 링크&lt;/a>)&lt;/p>
&lt;h2 id="대상-게시글-선택">대상 게시글 선택&lt;/h2>
&lt;p>with절을 활용해 게시글을 조회한다. 해당 게시글 id로 댓글 조회 row 개수를 최소화 하는 목적을 가진다.&lt;/p>
&lt;h2 id="댓글-선택">댓글 선택&lt;/h2>
&lt;p>댓글 테이블의 self join을 통해 정책을 sql에 녹여낸다. self join시 row 개수가 많으면 시간이 오래 걸리므로 위의 게시글 조회를 저장해둔 결과를 가져와 댓글 범위를 최소화 한다. 이후 댓글과 유저를 join 한 후 유저 정보를 jsonb로 변환한다. 해당 결과도 with절로 저장해둔다.&lt;/p>
&lt;h2 id="게시글과-댓글-조합-후-json-제작">게시글과 댓글 조합 후 json 제작&lt;/h2>
&lt;p>대상 게시글과 댓글 정보를 이용해 join을 맺는다. 이를 통해 &lt;code>게시글-댓글리스트&lt;/code>를 json으로 만들고 전달할 수 있게 된다.&lt;/p>
&lt;h1 id="후기">후기&lt;/h1>
&lt;p>해당 쿼리를 게시글 리스트 조회 API와 게시글 상세 조회 API 모두에 사용했다. 같은 쿼리를 사용함으로써 두 API의 데이터를 일관적으로 전달할 수 있었다. 또한 앞서 언급한 jsonb를 이용해서 response dto도 그대로 유지할 수 있었다.&lt;/p>
&lt;p>의외로 추가적인 소득도 있었다. 속도가 &lt;strong>1s에서 200ms 대로 줄었던 것이다.&lt;/strong> with절을 이용한 방식이 효과가 컸던 것 같다. 이번 문제를 해결하기 위해 처음으로 사용해본 것인데, 앞으로도 애용할 것 같다.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[PostgreSQL] Select 쿼리 속도를 개선해 보자</title><link>https://fhdufhdu.github.io/post/7/</link><pubDate>Sun, 07 Jan 2024 20:35:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/7/</guid><description>&lt;h1 id="문제"> 문제&lt;/h1>
&lt;p>SQL 쿼리를 조회하는데 15초가 걸려버리는 일이 발생했다. 이 문제를 보자마자 바로 SQL 쿼리 문제라는 생각이 들었다. 역시나 예상대로 쿼리가 문제였다.&lt;/p>
&lt;p>정확히 말하면, ORM이 문제였다. ORM으로 작성하다보니, 쿼리 최적화를 마음대로 할 수 없었고, 그래서 문제가 발생했던 것이다.&lt;/p>
&lt;p>이제 한번 문제를 자세히 살펴보자&lt;/p>
&lt;h2 id="원인">원인&lt;/h2>
&lt;p>특정 쿼리의 결과가 아래와 같았다. 그리고 해당 쿼리에는 select에 서브쿼리가 작성되어 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>c.id&lt;/th>
&lt;th>c.content&lt;/th>
&lt;th>b.id&lt;/th>
&lt;th>l.id&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>&amp;ldquo;반가워요&amp;rdquo;&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>&amp;ldquo;반가워요&amp;rdquo;&lt;/td>
&lt;td>1&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>&amp;ldquo;반가워요&amp;rdquo;&lt;/td>
&lt;td>1&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>&amp;ldquo;안녕&amp;rdquo;&lt;/td>
&lt;td>4&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>&amp;ldquo;안녕&amp;rdquo;&lt;/td>
&lt;td>4&lt;/td>
&lt;td>6&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>원하는 결과는 c의 리스트이다. 노출되는 c의 개수는 2개인데, 총 row의 개수는 5개로 뻥튀기된 것을 볼 수 있다. 그렇다면 2번만 서브쿼리를 실행하면 될 것을, 5번이나 실행하고 있었다는 것이다.&lt;/p>
&lt;p>원하는 결과에 c의 갯수가 많아지면 많아 질 수록 row의 개수는 뻥튀기 될 것이다. 만약 20개의 c를 원한다고 하면 100개의 row가 조회될 수도 있고, 100개의 row에 모두 서브쿼리가 실행된다면 20개의 서브쿼리보다 훨씬 느릴 것이다.&lt;/p>
&lt;h1 id="원인파악-완료-개선해-보자">원인파악 완료! 개선해 보자&lt;/h1>
&lt;h2 id="result-row의-갯수를-줄이자">Result Row의 갯수를 줄이자.&lt;/h2>
&lt;p>ORM 코드를 잘 살펴보니 특정 조건이 빠져있었다. 그래서 필요한 행 말고 모든 행에 대해 join을 걸면서 row의 갯수가 늘어났던 것이었다.&lt;/p>
&lt;p>그 조건을 넣어서 테스트 해봤더니 row의 갯수도 잘 줄어들었고, 15s -&amp;gt; 1s로 속도가 빨라진 것을 확인했다.&lt;/p>
&lt;h1 id="후기">후기&lt;/h1>
&lt;p>생각보다 간단하게 수정되어서 조금은 허탈했다.&lt;/p>
&lt;p>코드의 의도를 읽기 위해서 온갖 시도를 했었는데(실제 코드는 많이 복잡하다.) 의도를 파악하고, 문제를 파악하고 나니, 정말 어이없는 곳에서 문제가 있었던 케이스였던 것 같다.&lt;/p>
&lt;p>이 트러블슈팅 경험으로 인해 ORM에 대한 단점이 더 눈에 들어오더라. ORM이 마냥 좋은 것만은 아니라는 건 체감하고 있었지만, 이번 경험으로 인해 그 생각이 확고히 굳어진 것 같다. SQL, 그리고 DBMS에 대한 이해 없이 ORM만 사용하게 된다면, 좋은 개발자가 될 수 없을 것이라고 생각한다.&lt;/p>
&lt;p>앞으로도 여러 가지 방법을 잘 조합해서 사용해 보도록 해야겠다.&lt;/p></description></item><item><title>[Python] 커스텀 Router 객체를 만들어 보았다.</title><link>https://fhdufhdu.github.io/post/6/</link><pubDate>Thu, 04 Jan 2024 23:10:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/6/</guid><description>&lt;h1 id="문제">문제&lt;/h1>
&lt;p>문제는 importlib이라는 python 기본 라이브러리가 문제였다. 해당 라이브러리를 사용할 때 간헐적으로 최대 1.8초나 지연되는 현상이 발생했다.
​&lt;/p>
&lt;h2 id="기존-라우팅-방식">기존 라우팅 방식&lt;/h2>
&lt;p>​
해당 서버는 웹 프레임워크를 사용하지 않았기에, 챗봇별로 로직을 실행할 때 &lt;code>importlib&lt;/code>이라는 라이브러리를 이용해서 라우팅을 실시했다. &lt;code>importlib&lt;/code>은 동적으로 import를 할 수 있게 도와주는 라이브러리이다.
​
예를 들어 body에 &lt;code>chatbotId&lt;/code>가 &lt;code>Foo&lt;/code>이면 &lt;code>FooFacade&lt;/code> 클래스를 import 해서 쓰거나, &lt;code>Bar&lt;/code>이면 &lt;code>BarFacade&lt;/code> 클래스를 import해서 쓰거나 하는 식으로 진행했다.
​
그런데 &lt;code>importlib&lt;/code>이 느리다니&amp;hellip; 이해가 되지 않았다. &lt;code>importlib&lt;/code>은 결국 &lt;code>__import__&lt;/code> 함수의 래퍼이다. &lt;code>__import__&lt;/code>함수는 import 구문을 만나면 실행되는 기본적인 함수이다. 이게 느리다면, 파이썬을 사용해도 되는 것일까?
​&lt;/p>
&lt;h2 id="import의-작동-방식에-대해서-알아보자">Import의 작동 방식에 대해서 알아보자&lt;/h2>
&lt;p>​
해당 정보는 &lt;a class="link" href="https://medium.com/@likegondry/python-til-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%B4-import%EB%A1%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%84-%EB%B6%88%EB%9F%AC%EC%98%A4%EB%8A%94-%EB%B0%A9%EB%B2%95-76e268e7613b" target="_blank" rel="noopener"
>김지연 님의 블로그&lt;/a>를 참고해서 작성했다.
​&lt;/p>
&lt;h2 id="1-sysmodule에-모듈이-존재하는지-찾아보기">1. sys.module에 모듈이 존재하는지 찾아보기&lt;/h2>
&lt;p>​
sys.module에는 이때까지 사용했던 module들이 딕셔너리 형태로 저장되어 있다. import시 해당 모듈이 이전에 import 된 것이라면 빠르게 가져올 수 있다.
​&lt;/p>
&lt;h2 id="2-syspath에-저장된-파일-목록들-하나하나-찾아보기">2. sys.path에 저장된 파일 목록들 하나하나 찾아보기&lt;/h2>
&lt;p>​
이 작업이 좀 오래 걸린다. 파일 리스트을 하나하나 탐색하면서 모듈을 가져오기 때문에 시간이 오래걸린다. 아마 필자의 생각으로는 File I/O 작업이라서 오래 걸리는 것 같다.
​&lt;/p>
&lt;h2 id="그럼-동적으로-import-하는-것은">그럼 동적으로 import 하는 것은&amp;hellip;?&lt;/h2>
&lt;p>​
만약 &lt;code>FooFacade&lt;/code> 클래스를 &lt;strong>처음&lt;/strong> 동적으로 import 한다면, 생각보다 시간이 오래 걸릴 수 있겠다는 생각이 들었다. 실제로도 처음 실행할 때와, 조금 유휴시간이 지난 후 실행하면 &lt;code>importlib&lt;/code> 동작 시간이 오래 걸리는 것을 확인할 수 있었다.
​
심지어 AWS 람다를 이용하고 있어서, 일정 유휴시간이 지나면 컨테이너가 내려가버린다. 그렇다면 새롭게 컨테이너가 생성될 때마다, &lt;code>importlib&lt;/code>에서 시간을 많이 잡아먹었다.
​&lt;/p>
&lt;h1 id="해결방법">해결방법&lt;/h1>
&lt;p>​
이제 문제점을 찾았으니 해결을 해보자.
​
결국 라우팅의 문제였으니, 이 라우팅을 다른 방식으로 하면 되지 않을까?
​
그래서 유명한 파이썬 웹 프레임워크인 FastAPI의 &lt;a class="link" href="https://github.com/tiangolo/fastapi" target="_blank" rel="noopener"
>깃허브 소스&lt;/a>를 뜯어보았다.
​
FastAPI는 어떻게 라우팅을 사용하고 있을까?
​&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> fastapi &lt;span style="color:#f92672">import&lt;/span> APIRouter, FastAPI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">​&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app &lt;span style="color:#f92672">=&lt;/span> FastAPI()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>internal_router &lt;span style="color:#f92672">=&lt;/span> APIRouter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>users_router &lt;span style="color:#f92672">=&lt;/span> APIRouter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">​&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@users_router.get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/users/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">read_users&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> [{&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Rick&amp;#34;&lt;/span>}, {&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Morty&amp;#34;&lt;/span>}]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">​&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>internal_router&lt;span style="color:#f92672">.&lt;/span>include_router(users_router)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>app&lt;span style="color:#f92672">.&lt;/span>include_router(internal_router)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>​
이런 식으로 &lt;code>APIRouter&lt;/code> 객체를 하나 생성하고, APIRouter 객체의 &lt;code>get&lt;/code>(&lt;code>post&lt;/code>, &lt;code>put&lt;/code>, &amp;hellip;) 함수를 라우팅 하고자 하는 함수에 데코레이터로 붙여준다. 그리고 &lt;code>app&lt;/code> 객체에 해당 라우터를 전달한다.
​
이후 http 요청이 들어오면 &lt;code>app&lt;/code> 객체로 전달되고, &lt;code>app&lt;/code> 객체는 라우팅 정보를 확인해서 해당 함수를 실행한다.
​
자 어떻게 이것이 가능할까.
​
필자의 생각은 아래와 같았다.
​&lt;/p>
&lt;ol>
&lt;li>&lt;code>APIRouter&lt;/code> 객체는 멤버 함수로 데코레이터로 사용가능한 함수를 가지고 있다.(ex. &lt;code>get&lt;/code>, &lt;code>post&lt;/code>, &lt;code>put&lt;/code>, &lt;code>patch&lt;/code>, &lt;code>delete&lt;/code>)&lt;/li>
&lt;li>데코레이터 함수는 자기가 붙은 함수를 객체 형태로 사용할 수 있다.&lt;br>
(ex. &lt;code>user_router&lt;/code>의 get 함수는 &lt;code>read_users&lt;/code> 함수를 객체형태로 사용가능)&lt;/li>
&lt;li>그렇다면 get을 호출하면, &lt;code>read_users&lt;/code> 같은 함수를 &lt;code>users_router&lt;/code>에 딕셔너리 형태로 저장하면 되겠네?&lt;br>
(ex. &lt;code>{&amp;quot;users&amp;quot;: read_user}&lt;/code> 와 같은 형태로)&lt;/li>
&lt;li>맞는 것 같은데&amp;hellip; 한번 확인해 볼까?
​
&lt;code>APIRouter&lt;/code>의 &lt;code>get&lt;/code> 함수를 보면 &lt;code>self.api_route(...)&lt;/code>를 호출하고 해당 결괏값을 바로 반환한다.
​
그렇다면 &lt;code>api_route&lt;/code> 함수를 보자.
​&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 너무 길어서 간략하게 축소한 버전이다.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">api_route&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path: str,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">**&lt;/span>kwargs,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Callable[[DecoratedCallable], DecoratedCallable]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">decorator&lt;/span>(func: DecoratedCallable) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> DecoratedCallable:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>add_api_route(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> func,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">**&lt;/span>kwargs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> func
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">​&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> decorator
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>​
해당 함수를 보게 되면, &lt;code>user_router.get&lt;/code>이 &lt;code>read_users&lt;/code>에 데코레이터로 붙게 되는 순간 &lt;code>func&lt;/code> 파라미터에 &lt;code>read_users가&lt;/code> 들어오게 된다. 이후 &lt;code>self.add_api_route&lt;/code>를 호출하는데, 이때 아래와 같은 코드가 실행된다.
​&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">add_api_route&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path: str,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endpoint: Callable[&lt;span style="color:#f92672">...&lt;/span>, Any],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">**&lt;/span>kwargs,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 생략
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> route &lt;span style="color:#f92672">=&lt;/span> route_class(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>prefix &lt;span style="color:#f92672">+&lt;/span> path,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endpoint&lt;span style="color:#f92672">=&lt;/span>endpoint,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> 생략
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>routes&lt;span style="color:#f92672">.&lt;/span>append(route)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>​
path는 &amp;ldquo;/user/&amp;rdquo;, endpoint는 &lt;code>read_users&lt;/code> 함수이다. 이 두 가지를 통해 &lt;code>route&lt;/code> 객체를 하나 만들고 이를 &lt;code>user_routes의&lt;/code> &lt;code>routes&lt;/code> 리스트에 추가한다.
​
필자가 생각한 3번 과정은 아니고, 리스트 탐색으로 라우팅을 하는 것이지만, 어찌 됐든 비슷하다고 생각했다.
​
그리고 path param을 생각하면 딕셔너리의 key, value 탐색보다 리스트 탐색이 더 낫다고 생각이 든다.(path param이 들어가면 어쨌든 n만큼 순회해야 하니까!)&lt;/p>
&lt;p>​
필자의 생각이 어느 정도 맞다는 걸 인지했으니 신나게 Router 객체를 제작해서 만들었다.&lt;/p>
&lt;h1 id="결과">결과&lt;/h1>
&lt;p>​
무려 라우팅시 1.8초나 걸리던 것이 0.001초 미만에 해결되는 모습을 보였다. 해당 코드를 만들고 코드리뷰 때 &amp;ldquo;어떻게 이런 생각을 했냐&amp;quot;라고 하셔서 되게 기분이 좋았다.&lt;/p></description></item><item><title>[JS] 이벤트 루프와 비동기 함수</title><link>https://fhdufhdu.github.io/post/5/</link><pubDate>Wed, 03 Jan 2024 23:34:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/5/</guid><description>&lt;p>오늘은 JS의 비동기에 관해 설명해 보고자 한다. JS에 대해 잘 모르고 비동기에 대한 개념이 희박하던 때, 단순히 콜백함수가 비동기 함수인 줄 알았다. 하지만 단순히 콜백함수를 만든다고 해서 비동기적으로 작동하는 것은 아니다. 특정 조건의 함수만 비동기 함수가 될 수 있다.&lt;/p>
&lt;p>동기와 비동기 작업에 대해 알아보고 싶다면 해당&lt;a class="link" href="https://fhdufhdu.github.io/page/4" >게시글&lt;/a>을 참고하자.&lt;/p>
&lt;p>조금 더 자세히 알아보자.&lt;/p>
&lt;h1 id="콜백-함수는-동기이다">콜백 함수는 동기이다.&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">num&lt;/span>, &lt;span style="color:#a6e22e">callback&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">num&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">num&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">callback&lt;/span>(&lt;span style="color:#a6e22e">num&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">count&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, (&lt;span style="color:#a6e22e">num&lt;/span>) =&amp;gt;{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">num&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;============================&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">count&lt;/span>(&lt;span style="color:#ae81ff">1000&lt;/span>, (&lt;span style="color:#a6e22e">num&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#ae81ff">1000&lt;/span>, &lt;span style="color:#a6e22e">num&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>count 함수는 파라미터 num에 10번 반복문을 돌면서 1을 더하는 함수이다. 그리고 for가 끝나면 콜백을 실행한다.&lt;/p>
&lt;p>해당 코드를 실행하면 아래와 같은 결과가 나온다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1 11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>============================
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1002
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1003
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1004
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1005
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1006
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1007
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1008
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1009
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1000 1010
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>완벽하게 동기로 실행되는 것을 볼 수 있다. 그러므로 콜백함수를 만든다고 해서 비동기로 작동하지 않는다.&lt;/p>
&lt;h1 id="javascript-런타임">javascript 런타임&lt;/h1>
&lt;p>js에서 비동기를 이해하기 위해서는 &lt;code>javacript 런타임&lt;/code> 에 대해 이해할 필요가 있다.&lt;/p>
&lt;p>런타임은 어떠한 코드가 실제로 구동할 수 있는 환경을 의미힌다. 그러므로 당연하게도 &lt;code>javascript 런타임&lt;/code>은 js 코드를 실제로 구동할 수 있는 환경이다.&lt;/p>
&lt;p>&lt;code>javascript 런타임&lt;/code>도 종류가 있는데, 크게 분리하면 &lt;code>웹 브라우저&lt;/code> 와 &lt;code>node.js&lt;/code>가 있다. 웹 브라우저는 흔히 사용하는 크롬, 사파리, 파이어폭스 등이 있다.&lt;/p>
&lt;p>앞서 런타임은 구동 환경을 의미한다고 했다. &lt;code>javascript 런타임&lt;/code>에는 어떤 종류의 환경이 존재할까?&lt;/p>
&lt;ul>
&lt;li>&lt;code>javacript 엔진&lt;/code>
&lt;ul>
&lt;li>&lt;code>이벤트 루프&lt;/code> 포함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Web APIs&lt;/code>(node.js에서는 &lt;code>libuv&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>이 두가지가 존재한다.&lt;/p>
&lt;h2 id="javascript-엔진">javascript 엔진&lt;/h2>
&lt;p>그렇다면 &lt;code>javascript 엔진&lt;/code>이란 무엇일까? js 코드를 실제로 실행하는 영역이다. 개발자가 작성한 모든 js 코드는 &lt;code>javascript 엔진&lt;/code>에서 파싱되고 실행된다. 이 &lt;code>javascript 엔진&lt;/code>은 &lt;strong>싱글 스레드&lt;/strong>에서 작동한다.&lt;/p>
&lt;p>여기에는 흔히 알려져 있는 &lt;code>이벤트 루프&lt;/code>도 포함되어 있다. &lt;code>이벤트 루프&lt;/code>에 대해서는 뒤에서 자세하게 설명하도록 하겠다. 우선 이 &lt;code>이벤트 루프&lt;/code>가 &lt;code>javascript 엔진&lt;/code>에서 작동한다는 사실만 기억하자.&lt;/p>
&lt;h3 id="javascript-엔진의-구성-요소">javascript 엔진의 구성 요소&lt;/h3>
&lt;ul>
&lt;li>콜 스택 (call stack)
&lt;ul>
&lt;li>
&lt;p>실행되어야할 함수들을 저장하는 곳&lt;/p>
&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">num&lt;/span>) =&amp;gt; { &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">num&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://fhdufhdu.github.io/post/5/image.png"
width="1280"
height="678"
loading="lazy"
alt="JS 콜스택"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;code>test(1)&lt;/code>이 이 콜스택에 삽입 후 실행&lt;/li>
&lt;li>&lt;code>test(1)&lt;/code>에 있는 &lt;code>console.log(1)&lt;/code>을 콜스택에 삽입 후 실행&lt;/li>
&lt;li>1이 출력 후 &lt;code>console.log(1)&lt;/code> 콜스택에서 제거&lt;/li>
&lt;li>&lt;code>test(1)&lt;/code> 콜스택에서 제거&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>힙 (heap)
&lt;ul>
&lt;li>데이터가 동적으로 저장되는 공간&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이벤트 루프(event loop)
&lt;ul>
&lt;li>비동기 작업이 끝난 후 결과값을 처리할 &lt;strong>콜백 함수를 저장해두는 곳&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="web-apis">Web APIs&lt;/h2>
&lt;p>&lt;code>웹 브라우저&lt;/code>에서 비동기적인 이벤트를 처리하기 위해 제공하는 API들이다. &lt;code>웹 브라우저&lt;/code>에서 제공하는 것이기 때문에, 해당 api는 &lt;code>javascript 엔진&lt;/code>에서 실행되지 않는다. 이 api들은 &lt;code>javascript 엔진&lt;/code>과 실제로 다른 프로세스에서 실행되며, js에서 호출할 수 있도록 &lt;code>javascript 엔진&lt;/code>에서는 인터페이스만 제공한다.&lt;/p>
&lt;h3 id="여기서-잠깐-인터페이스만-제공한다는-것의-의미란">여기서 잠깐! 인터페이스만 제공한다는 것의 의미란?&lt;/h3>
&lt;p>API는 Application Programming Interface의 약자이다. 이는 &lt;strong>두 개의 서로 다른 프로세스(혹은 프로그램)간에 통신을 위한 일종의 약속&lt;/strong>이다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>A&lt;/code>와 &lt;code>B&lt;/code>라는 두 개의 프로세스가 있고, &lt;code>B&lt;/code>에는 &lt;code>getData&lt;/code>라는 기능이 있다. &lt;code>A&lt;/code>에서 &lt;code>B&lt;/code>의 &lt;code>getData&lt;/code>라는 기능을 사용하기 위해서는 &lt;code>getData&lt;/code>의 실행에 필요한 데이터를 전달해 주어야 한다.
이때 &lt;strong>&amp;quot;&lt;code>B&lt;/code>는 특정 형태의 프로토콜과 특정 형태의 구조로 데이터를 전달해주면, &lt;code>getData&lt;/code>라는 기능을 실행하고, 결과를 특정한 형태로 응답해주겠다&amp;quot;&lt;/strong> 라고 약속하는 것이 바로 API라고 할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>Web APIs&lt;/code>도 똑같다. 실제 &lt;code>Web APIs&lt;/code>는 js 코드로 실행하면, &lt;code>javascript 엔진&lt;/code>이 해당 요청을 다른 프로세스(=웹 브라우저)에게 요청하고, 응답을 받으면 그것을 js에서 사용할 수 있도록 결과값을 반환해주는 역할을 한다.&lt;/p>
&lt;p>즉, &lt;code>javascript 엔진&lt;/code>과 &lt;code>웹 브라우저&lt;/code> 간의 통신 약속이 바로 &lt;code>Web APIs&lt;/code>이다.&lt;/p>
&lt;p>해당 게시글을 처음 시작할 때, 특정 조건의 함수만 비동기가 될 수 있다고 했다. 그 특정 조건의 함수란 바로, &lt;code>Web APIs&lt;/code>에 등록된 함수이다.&lt;/p>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/ko/docs/Web/API" target="_blank" rel="noopener"
>Web APIs 함수 목록-mdn web docs&lt;/a>&lt;/p>
&lt;h1 id="이벤트-루프">이벤트 루프&lt;/h1>
&lt;p>이벤트 루프를 이해하기 위해서는 비동기에 대한 이해가 필요하다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;!-- raw HTML omitted -->비동기란?&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->
파일 저장, 네트워크 요청 등 처리에 시간이 걸리는 I/O 작업이 진행 중에 다른 코드를 실행하는 것을 의미한다.&lt;!-- raw HTML omitted -->
시간이 걸리는 작업 중에는 프로그램은 놀고 있는 것이기 때문에, 이 시간을 최대한 활용하기 위해 나온 개념이다.&lt;/p>
&lt;/blockquote>
&lt;p>js는 싱글 스레드이기 때문에, 비동기 코드를 실행할 수 없다. 그래서 앞서 설명한 &lt;code>Web APIs&lt;/code>를 통해 브라우저에게 비동기 작업을 요청한다. 그렇다면, 비동기 작업이 종료되었을때, 응답을 받을 것이다. 그 응답은 어떻게 처리해야 할까?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setTimeout&lt;/span>(()=&amp;gt;{&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)}, &lt;span style="color:#ae81ff">1000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">결과
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위와 같은 코드를 보자. 해당 코드는 실행하면 2가 출력되고 1초 후 1이 출력될 것이다. 조금 이상하지 않은가? 코드는 위에서 아래로 진행하면서 실행될 텐데, 1, 2가 출력되는 것이 아니라 2, 1로 반대로 출력된다. 마치 이것은 두 번째 줄이 먼저 실행되고, 첫 번째 줄이 실행된 것 처럼 보인다.&lt;/p>
&lt;p>이것이 앞서 설명한 응답 처리에 대한 질문의 답이라고 할 수 있다. 코드 실행을 순서대로 알아보자&lt;/p>
&lt;ul>
&lt;li>&lt;code>setTimeout&lt;/code> 콜스택에 삽입 후 실행&lt;/li>
&lt;li>1초 타이머를 &lt;code>Web API&lt;/code>를 통해 &lt;code>웹 브라우저&lt;/code>에게 요청, 이때 &lt;code>()=&amp;gt;{console.log(1)}&lt;/code>을 같이 &lt;code>웹 브라우저에게 전달&lt;/code>&lt;/li>
&lt;li>&lt;code>setTimeout&lt;/code> 콜스택에서 제거&lt;/li>
&lt;li>&lt;code>console.log(2)&lt;/code> 콜스택에 삽입 후 실행&lt;/li>
&lt;li>2 출력&lt;/li>
&lt;li>&lt;code>console.log(2)&lt;/code> 콜스택에서 제거&lt;/li>
&lt;li>1초가 지난 후 &lt;code>웹 브라우저&lt;/code>는 &lt;code>()=&amp;gt;{console.log(1)}&lt;/code>을 &lt;code>이벤트 루프&lt;/code> 큐에 삽입&lt;/li>
&lt;li>&lt;code>이벤트 루프&lt;/code>는 큐에 &lt;code>()=&amp;gt;{console.log(1)}&lt;/code>가 생겼으므로, 해당 함수를 콜스택에 삽입&lt;/li>
&lt;li>&lt;code>()=&amp;gt;{console.log(1)}&lt;/code> 실행&lt;/li>
&lt;li>&lt;code>console.log(1)&lt;/code> 콜스택에 삽입 후 실행&lt;/li>
&lt;li>1 출력&lt;/li>
&lt;li>&lt;code>console.log(1)&lt;/code> 콜스택에서 제거&lt;/li>
&lt;li>&lt;code>()=&amp;gt;{console.log(1)}&lt;/code> 콜스택에서 제거&lt;/li>
&lt;li>종료&lt;/li>
&lt;/ul>
&lt;p>이렇듯, 코드는 순차적으로 실행된 것이 맞고, 응답 처리의 방법은 비동기 작업이 종료된 이후 처리할 코드를 미리 넘겨주는 것이다. 이것이 바로 &lt;code>콜백 함수&lt;/code>이다. 위 예제에서 콜백 함수는 &lt;code>()=&amp;gt;{console.log(1)}&lt;/code>이다.&lt;/p>
&lt;p>그리고 이벤트 루프의 역할은 &lt;strong>비동기 처리가 완료된 이후 실행되어야 할 콜백 함수들의 저장소&lt;/strong>이다. 이 이벤트 루프는 콜백 함수를 저장하고, 일정 주기(틱)마다 콜백 함수 큐를 확인해서 콜백 함수가 존재하면 해당 함수를 콜 스택에 삽입한다.&lt;/p>
&lt;p>아래 GIF를 보면 &lt;code>콜 스택&lt;/code>, &lt;code>웹 브라우저&lt;/code>, &lt;code>이벤트 루프&lt;/code>간의 상호작용을 한눈에 볼 수 있다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/5/event-loop.gif"
width="720"
height="405"
loading="lazy"
alt="JS 비동기 작업 GIF"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;h1 id="정리">정리&lt;/h1>
&lt;ul>
&lt;li>콜백을 사용한다고 모두 비동기가 되는 것이 아니다.&lt;/li>
&lt;li>&lt;code>javascript 런타임&lt;/code>은 js를 실행하는 구동 환경이다.
&lt;ul>
&lt;li>&lt;code>javascript 엔진&lt;/code>과 &lt;code>Web APIs&lt;/code>로 구성된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>javascript 엔진&lt;/code>은 js를 파싱하고 실행한다.
&lt;ul>
&lt;li>싱글 스레드로 작동한다.&lt;/li>
&lt;li>여기서는 비동기가 작동할 수 없다.&lt;/li>
&lt;li>&lt;code>콜 스택&lt;/code>, &lt;code>힙&lt;/code>, &lt;code>이벤트 루프&lt;/code>로 구성된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Web APIs&lt;/code>는 &lt;code>웹 브라우저&lt;/code>에서 비동기 이벤트를 처리하기 위해 제공되는 api이다.
&lt;ul>
&lt;li>&lt;code>javascript 엔진&lt;/code>은 비동기 요청을 &lt;code>Web APIs&lt;/code>를 통해 &lt;code>웹 브라우저&lt;/code>에게 전달한다.&lt;/li>
&lt;li>&lt;code>웹 브라우저&lt;/code>는 비동기 작업이 끝나면 콜백 함수를 &lt;code>이벤트 루프&lt;/code> 콜백 함수 큐에 삽입힌다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>콜백 함수&lt;/code>란 비동기 요청이 끝난 후 응답을 처리하는 함수이다.&lt;/li>
&lt;li>&lt;code>이벤트 루프&lt;/code>란 콜백 함수 저장소이다.
&lt;ul>
&lt;li>&lt;code>일정 주기(틱)&lt;/code>마다 콜백 함수 큐를 검사하고, 콜백 함수가 존재하면 콜 스택에 해당 함수를 삽입한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[CS] 동기/비동기에 대해서 알아보자(sync/async)</title><link>https://fhdufhdu.github.io/post/4/</link><pubDate>Tue, 02 Jan 2024 22:15:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/4/</guid><description>&lt;p>오늘은 동기와 비동기에 대해서 설명하고자 한다.&lt;/p>
&lt;p>해당 개념은 설명만 들으면 쉽게 이해가 될 수도 있지만, 헷갈릴 여지도 많은 개념이라고 생각한다.&lt;/p>
&lt;p>특히 스레드 개념과 엮이기 시작하면 많이 헷갈리기 시작하는 개념이다.&lt;/p>
&lt;h1 id="동기sync">동기(Sync)&lt;/h1>
&lt;p>동기가 제일 간단하다. 흔히 우리가 쓰는 코드를 상상하면 된다.&lt;/p>
&lt;p>아래 JS 예제가 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p> 결과는 위에서부터 순차적으로 실행되어 아래와 같은 결과를 보일 것이다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/4/image.png"
width="210"
height="216"
loading="lazy"
alt="코드 결과"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="233px"
>&lt;/p>
&lt;h1 id="비동기async">비동기(Async)&lt;/h1>
&lt;p>자 이제 비동기에 대해 이해해 보자. 단순하게 비동기는 동기의 반대말이다. 동기가 순차적으로 실행되는 것을 의미하니까 비동기는 순차적으로 실행되지 않는다고 생각하면 된다. 순차적으로 실행되지 않는다면, 코드의 실행순서를 파악하기 힘들 것이다. 이렇게 생각했을 때 비동기가 정말 필요한지에 대해 의문점이 생긴다.&lt;/p>
&lt;h2 id="비동기의-필요성">비동기의 필요성&lt;/h2>
&lt;p>비동기가 등장한 이유는 낭비되는 시간이 아까워서이다. 아래와 같은 코드를 보자&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 해당 코드는 psuedo 코드이다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">reqBody&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;choding&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;is good&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//2. 해당 http 요청이 100초가 오래걸린다는 것을 가정하자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">requests&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://localhost:3000&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">reqBody&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 이후 필요한 로직 실행!
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>단순하게 http 요청을 보내는 코드이다. 이 코드가 동기적으로 작동한다면 대락 100초 이후에 console.log(response.body)가 실행되고 이후 로직이 작동할 것이다. 근데 http 요청을 보내고, 받는 100초 동안 프로세스는 무엇을 하고 있을까?&lt;/p>
&lt;p>정답은 &lt;strong>&amp;ldquo;아무것도 안하고 있다.&amp;rdquo;&lt;/strong> 이다. 정말 아무것도 안 하고 http 응답을 받는 순간까지 기다리는 것만 진행할 것이다. 만약 이 100초라는 시간에 다른 작업을 하면 어떨까? 웬만하면 많은 작업들을 처리할 수 있을 것이다.&lt;/p>
&lt;p>이 남는 시간을 활용하기 위해 비동기라는 개념이 등장했다.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/4/image-1.png"
width="1440"
height="554"
loading="lazy"
alt="비동기 작동 과정"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="623px"
>&lt;/p>
&lt;p>위 그림처럼, 2번이 완료되지 않았음에도, 2번의 응답이 오기까지의 시간동안 다른 작업을 하는 것이 바로 비동기라고 할 수 있다.&lt;/p>
&lt;h2 id="콜백">콜백&lt;/h2>
&lt;p>앞서 비동기의 필요성을 말했다. 그렇다면 100초 동안 비는 시간에 다른 작업을 하고 나서, 응답을 받는 순간에는 어떻게 될까? 해당 값으로 처리하는 로직이 필요할 것이다. 그것이 바로 콜백(callback)이다.&lt;/p>
&lt;p>콜백의 주요 논지는 &lt;strong>&amp;ldquo;해야할 일을 뒤로 미루는 것&amp;rdquo;&lt;/strong> 이다.&lt;/p>
&lt;p>사실, 이름만 봐도 알 수 있다. callback은 회신하다/답신하다는 뜻이다.&lt;/p>
&lt;p>그러니까 &amp;ldquo;할일 다 하고(=해야 할 일 미루고), 네가 요청한 일 처리할 수 있을 때 처리하겠다&amp;quot;라는 것이다.&lt;/p>
&lt;p>아래 코드를 다시 보자.&lt;/p>
&lt;p>2번 과정이 100초가 걸리니까, 2번의 응답이 오는 100초 동안 다른 일을 JS가 한다고 하자. 이후 100초가 지난 후, 2번의 응답을 가지고 무언가 작업을 해야 할 것이다. 그런데, 어떻게 실행할 것인가? &lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 해당 코드는 psuedo 코드이다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">reqBody&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;choding&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;is good&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//2. 해당 http 요청이 100초가 오래걸린다는 것을 가정하자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">requests&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://localhost:3000&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">reqBody&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 이후 필요한 로직 실행!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//100초 후...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//어라, 어떻게 응답을 처리하지?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//응답은 왔는데.... 처리할 코드를 어떻게 작성하지...?
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이때 콜백을 작성하면 응답을 처리할 수 있는 코드를 작성할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 해당 코드는 psuedo 코드이다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">reqBody&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;choding&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;is good&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//2. 해당 http 요청이 100초가 오래걸린다는 것을 가정하자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">requests&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http://localhost:3000&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">reqBody&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4. 100초 후 이 함수 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">body&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 처럼 콜백 함수를 작성할 수 있을 것이다. 저 4번 콜백 함수는 http 응답이 오면 실행된다.&lt;/p>
&lt;p>4번의 콜백 함수는 앞서 말한 &lt;strong>&amp;ldquo;해야 할 일을 뒤로 미루는 것&amp;quot;과&lt;/strong> 같다.&lt;/p>
&lt;h1 id="마무리">마무리&lt;/h1>
&lt;p>간단하게 비동기와 콜백에 대해 알아보았다.&lt;/p>
&lt;p>이렇게 보면 비동기 자체는 크게 어렵지 않은 것 같다. 하지만 필자도 이 개념을 오해 없이 이해하기에 많은 시간이 들었다.&lt;/p>
&lt;p>여러분들도 오해없이 비동기를 이해할 수 있게 되었으면 좋겠다.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[Docker] 컨테이너를 Docker Hub에 올리기</title><link>https://fhdufhdu.github.io/post/3/</link><pubDate>Wed, 20 Dec 2023 12:39:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/3/</guid><description>&lt;p>Docker 컨테이너를 그대로 이미지로 만들어서 Docker Hub에 올리고 싶다면 아래와 같이 진행하자.&lt;/p>
&lt;h1 id="docker-hub-로그인하기">Docker Hub 로그인하기&lt;/h1>
&lt;p>&lt;a class="link" href="https://hub.docker.com/" target="_blank" rel="noopener"
>Docker Hub&lt;/a>에 들어가서 로그인을 먼저 한다. 회원가입을 진행하지 않았다면 회원가입을 먼저 하자.&lt;/p>
&lt;p>개인 Docker Hub Repository에 이미지를 올리기 때문에 로그인은 필수다.&lt;/p>
&lt;p>회원가입을 하고 나면 플랜을 선택하라는 화면이 나올 수 있는데, 이때 Personal 플랜으로 진행하면 된다.(무료)&lt;/p>
&lt;h1 id="repository-만들기">Repository 만들기&lt;/h1>
&lt;p>로그인을 하고나서 메인화면에서&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/3/image.png"
width="2552"
height="292"
loading="lazy"
alt="도커 허브 웹페이지"
class="gallery-image"
data-flex-grow="873"
data-flex-basis="2097px"
>&lt;/p>
&lt;p>위 이미지와 같이 Repository -&amp;gt; Create Repository를 눌러준다.&lt;/p>
&lt;p>정보 입력 후 Repostiory를 생성하게 되면 자신의 Repository 화면으로 들어갈 수 있게 된다.&lt;/p>
&lt;h1 id="컨테이너-commit-하기">컨테이너 commit 하기&lt;/h1>
&lt;p>현재 자신의 컴퓨터에 존재하는 컨테이너를 image화 하는 과정이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker commit 자신의컨테이너이름 repository경로:tag
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 실제 입력 예&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># tag(=version)는 본인 전략대로 사용하기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker commit es fhdufhdu/test_elasticsearch:1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="생성된-이미지를-업로드하기">생성된 이미지를 업로드하기&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 로그인, username에 email은 입력하지 말기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker login
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#이미지 이름에 있는 repository로 이미지가 업로드되게 된다.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker push fhdufhdu/mim_elasticsearch:1.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The push refers to repository &lt;span style="color:#f92672">[&lt;/span>docker.io/fhdufhdu/mim_elasticsearch&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ec8582fc54e5: Pushed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bca54c335b28: Mounted from library/elasticsearch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>de080e772c1a: Mounted from library/elasticsearch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cfc1ead7498a: Mounted from library/elasticsearch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>245d80f411fb: Mounted from library/elasticsearch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>489e330647ba: Mounted from library/elasticsearch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cff7c30e604c: Mounted from library/elasticsearch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3a50035e8665: Mounted from library/elasticsearch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7074040eb2b7: Mounted from library/elasticsearch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>af7ed92504ae: Mounted from library/elasticsearch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>1.0: digest: sha256:018de9cde96f6304cb8967a5747fe123244af76ef502fd7c5e446dd91b6aa765 size: &lt;span style="color:#ae81ff">2417&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위 명령어를 실행하면, 이미지를 Repository에 올릴 것이다.&lt;/p>
&lt;p>이후 이미지를 받아와서 컨테이너에 올리는 작업은 기존 방식과 동일하게 진행하면 된다.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 15
else if(width &lt; 0) return 0
return (15/767) * width - (11520/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[Python] 추상 클래스 만들기</title><link>https://fhdufhdu.github.io/post/2/</link><pubDate>Wed, 20 Dec 2023 12:16:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/2/</guid><description>&lt;h1 id="추상-클래스-만들기">추상 클래스 만들기&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> abc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BaseClass&lt;/span>(metaclass&lt;span style="color:#f92672">=&lt;/span>abc&lt;span style="color:#f92672">.&lt;/span>ABCMeta):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@abc.abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 아래처럼 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BaseClass&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __metaclass__ &lt;span style="color:#f92672">=&lt;/span> abc&lt;span style="color:#f92672">.&lt;/span>ABCMeta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@abc.abstractmethod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ChildClass&lt;/span>(BaseClass):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;hello world!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#f92672">=&lt;/span> ChildClass()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위와 같이 &lt;code>metaclass&lt;/code>로 해당 클래스가 추상 클래스라는 것을 명시한다.&lt;/p>
&lt;p>이후 추상클래스로 쓰고 싶은 메서드에 &lt;code>abstractmethod&lt;/code> 데코레이터를 달면 된다.&lt;/p>
&lt;p>만약 상속받는 클래스에서 추상클래스를 구현하지 않으면 아래와 같이 에러가 뜬다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Traceback &lt;span style="color:#f92672">(&lt;/span>most recent call last&lt;span style="color:#f92672">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;/var/task/main.py&amp;#34;&lt;/span>, line 12, in &amp;lt;module&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#f92672">=&lt;/span> ChildClass&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TypeError: Can&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>t instantiate abstract class ChildClass with abstract method run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>[개발방법론] 객체 지향과 절차 지향에 대해 알아보자</title><link>https://fhdufhdu.github.io/post/1/</link><pubDate>Wed, 20 Dec 2023 11:14:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/1/</guid><description>&lt;blockquote>
&lt;p>개발을 막 시작한 새내기 개발자부터 개발 경력이 많은 개발자까지 무조건 들어봤을 용어, 객체 지향에 대해 알아보자.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->자동차 운전을 코드로 구현하는 것을 예시로, 객체 지향과 절차 지향을 비교해 가면서 설명한다. 객체 지향을 배우러 왔는데, 절차 지향까지 알아야 한다고 겁먹지 말자, 절차 지향을 이해한다면, 객체 지향을 이해하기 더욱 쉬울 것이다.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->이 내용은 기본적인 코드 작성 지식이 있어야 이해할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;h1 id="절차-지향과-객체-지향">절차 지향과 객체 지향&lt;/h1>
&lt;h2 id="절차-지향이란">절차 지향이란?&lt;/h2>
&lt;p>객체지향이 있기 이전, 개발 패러다임은 절차 지향이었다. 절차 지향은 간단히 &amp;ldquo;어떤 일을 하기 위해 필요한 행동들의 나열&amp;rdquo; 이라고 정의할 수 있다. 아래와 같은 코드 예제를 보자&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> direction &lt;span style="color:#f92672">=&lt;/span> input(&lt;span style="color:#e6db74">&amp;#34;핸들을 어느 방향으로 돌릴 것 인가요?(left, right): &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> direction &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 오른쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 왼쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>사용자에게 핸들 방향을 입력받고, 해당 방향에 맞게 핸들을 돌렸다고 출력해 주는 코드이다.&lt;/p>
&lt;p>이와 같이, &amp;ldquo;핸들을 꺾기 위해(어떤 일) 사용자의 입력을 받고, 입력에 맞게 문자열을 출력하는 코드 (행동들의 나열)&amp;ldquo;로 볼 수 있는 것이 절차 지향적인 코드 작성 방법이다.&lt;/p>
&lt;h2 id="객체-지향이란">객체 지향이란?&lt;/h2>
&lt;p>객체 지향은 절차지향의 정의인 &amp;ldquo;어떤 일을 하기 위해 필요한 행동들의 나열&amp;quot;을 확장해서 &amp;ldquo;어떤 일을 하기 위한 객체들의 상호작용&amp;quot;으로 정의할 수 있다. 아래와 같은 코드 예제를 보자&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">chagne_direction&lt;/span>(self, direction: string):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> direction &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 오른쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 왼쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> direction &lt;span style="color:#f92672">=&lt;/span> input(&lt;span style="color:#e6db74">&amp;#34;핸들을 어느 방향으로 돌릴 것 인가요?(left, right): &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> car &lt;span style="color:#f92672">=&lt;/span> Car()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> car&lt;span style="color:#f92672">.&lt;/span>chagne_direction(direction)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>우선 Car라는 클래스를 만든다. 해당 클래스에서는 자동자의 &amp;ldquo;행동&amp;quot;과 관련된 모든 것을 다룬다. 여기에서는 방향전환 행동만을 추가했다.&lt;/p>
&lt;p>그리고 절차 지향에서의 코드와 같이 사용자에게 입력을 받고, 해당 입력을 저장해 둔다.&lt;/p>
&lt;p>이후, Car(클래스)에서 car(인스턴스)를 만들고, car(인스턴스)의 change_direction을 실행해서 핸들을 전환하도록 한다.&lt;/p>
&lt;p>이와 같이 자동차라는 개념적인 그룹으로 묶어서 코드를 작성하는 방식을 객체 지향 개발이라고 한다.&lt;/p>
&lt;h1 id="클래스와-인스턴스">클래스와 인스턴스&lt;/h1>
&lt;p>클래스/인스턴스는 처음 마주했을 때 이해하기 쉽지 않은 용어이다.&lt;/p>
&lt;p>자동차를 예로 들어보자.&lt;/p>
&lt;p>자동차는 어떤 것인가? 명확히 정의하긴 어렵지만, 바퀴 4개(혹은 더 여러 개), 엔진, 핸들이 있는 탈 것이라고 할 수 있다. 이런 개념적인 것들을 가진 모든 것들을 자동차라고 부를 수 있다. 이렇게 보면, 완전히 추상적인 개념이라고 볼 수 있다. 이런 것들을 클래스라고 한다.&lt;/p>
&lt;p>우리가 실제 이용하는 자동차들은 무엇이 있을까. 나의 산타페, 다른 사람의 산타페, 602-1A번 버스 등 많은 자동차들이 있다. 이런 것들을 인스턴스라고 한다.&lt;/p>
&lt;p>자동차라는 &amp;ldquo;개념&amp;quot;만 가지고는 행동을 할 수 없지만, 산타페라는 실체를 가지고는 운전을 할 수 있다. 이처럼 행동을 할 수 있도록 클래스에서 객체를 만들어서 사용한다.&lt;/p>
&lt;p>아래와 같은 코드 예제를 보자&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">chagne_direction&lt;/span>(self, direction: string):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> direction &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 오른쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 왼쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># car1과 car2는 Car에서 생성된 두개의 다른 실체임&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> car1 &lt;span style="color:#f92672">=&lt;/span> Car()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> car2 &lt;span style="color:#f92672">=&lt;/span> Car()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 코드는 Car클래스에서 두 개의 인스턴스를 생성한다.&lt;br>
다르게 이야기하면, 하나의 Car라는 추상적인 개념에서 두 대의 실제 자동차를 생성한 것이고, 이 자동차들을 각자 개별적으로 움직일 것이다.&lt;/p>
&lt;p>정리하자면,&lt;/p>
&lt;p>&lt;strong>클래스는 &amp;ldquo;어떤 행동을 하는 추상적인 개념 - 자동차, 사람&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>**인스턴스는 &amp;ldquo;실제로 그 행동을 하는 실체 - 산타페(자동차), 나 자신(사람), 여러분들(사람)&amp;rdquo;**으로 정리할 수 있겠다.&lt;/p>
&lt;h1 id="객체와의-상호작용">객체와의 상호작용&lt;/h1>
&lt;p>이번엔 객체 지향 프로그래밍의 본질인, 객체와의 상호작용을 알아보자.&lt;/p>
&lt;p>이번에도 코드 예제를 보도록 하자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Wheel&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">change_direction&lt;/span>(self, direction: string):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> direction &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;바퀴를 오른쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;바퀴를 왼쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>wheel &lt;span style="color:#f92672">=&lt;/span> Wheel()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">chagne_direction&lt;/span>(self, direction: string):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> direction &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 오른쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 왼쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>wheel&lt;span style="color:#f92672">.&lt;/span>change_direction(direction)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> direction &lt;span style="color:#f92672">=&lt;/span> input(&lt;span style="color:#e6db74">&amp;#34;핸들을 어느 방향으로 돌릴 것 인가요?(left, right): &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> car &lt;span style="color:#f92672">=&lt;/span> Car()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> car&lt;span style="color:#f92672">.&lt;/span>chagne_direction(direction)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>main 함수는 위의 예제와 같다.&lt;/p>
&lt;p>이번에 추가된 것은 Wheel의 존재다. 잘 생각해 보면, 자동차는 바퀴가 있어야 굴러갈 것이다. 그리고 사용자가 핸들을 돌리면 바퀴가 돌아가야 할 것이다. 그러므로 Car는 Wheel을 가지고 있어야 한다. (이것을 has-a 관계라고 하는데, 이 부분은 나중에 설명하겠다)&lt;/p>
&lt;p>그래서 위의 예제는 사용자가 핸들을 돌리면 바퀴도 같이 돌아가는 예제이다.&lt;/p>
&lt;p>Car는 처음 생성될 때, Wheel을 생성해서 자신이 가지고 있고, 사용자가 핸들을 돌리면, Car는 Wheel의 방향을 변경한다.&lt;/p>
&lt;p>이렇게 보면 Car와 Wheel이 상호작용하고 있는 것을 볼 수 있다.&lt;/p>
&lt;p>만약 절차 지향적인 코드였다면 어땠을까? &lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> direction &lt;span style="color:#f92672">=&lt;/span> input(&lt;span style="color:#e6db74">&amp;#34;핸들을 어느 방향으로 돌릴 것 인가요?(left, right): &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> direction &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;right&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 오른쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;바퀴를 오른쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;핸들을 왼쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;바퀴를 왼쪽으로 전환!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>main()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위와 같이 끝났을 것이다.&lt;/p>
&lt;p>어라 근데 여기서 이상한 점이 보인다.&lt;/p>
&lt;h1 id="절차-지향이-더-좋아-보이는데">절차 지향이 더 좋아 보이는데&amp;hellip;?&lt;/h1>
&lt;p>필자가 제시한 예제를 보면, 절차지향적인 코드가 훨씬 짧고 간결해 보이고, 이해하기도 쉬워 보인다.&lt;/p>
&lt;p>하지만 다들 실제로 객체지향적으로 구현을 하고 있다.&lt;/p>
&lt;p>이유가 뭘까?&lt;/p>
&lt;p>이유는 &lt;strong>재사용성&lt;/strong>이다.&lt;/p>
&lt;p>만약 자동차가 100대가 동시에 움직인다면?&lt;/p>
&lt;p>저 if-else 부분을 100번 돌리는 것이 좋을까? Car를 100개 만드는 게 좋을까?&lt;/p>
&lt;p>직관적으로 봤을 때, Car를 100개 만드는 것이 다른 사람이 볼 때 더욱 이해하기가 쉽지 않을까?&lt;/p>
&lt;p>하지만 더욱 중요한 이유가 있다.&lt;/p>
&lt;h1 id="다른-사람과의-협업을-고려하자">다른 사람과의 협업을 고려하자.&lt;/h1>
&lt;p>개발은 혼자 할 수 도 있지만 여러 명과 같이 할 수도 있다.&lt;/p>
&lt;p>클래스로 짜놓으면, 누가 봐도 &amp;lsquo;아 이 부분은 자동차를 구현하려고 한 거구나&amp;rsquo;를 알 수 있다.(주석 없이도!) if-else 문을 100번 반복한다고 했을 때, 같이 협업하는 사람이 보면 과연 이 코드를 제대로 이해할까? 필자였다면, 머릿속에 물음표만을 띄웠을 것이다.&lt;/p>
&lt;p>그런 면에서 봤을 때, 객체 지향 프로그래밍이 많이 쓰이는 이유를 알 수 있을 것이다.&lt;/p>
&lt;h1 id="맹신은-금물">맹신은 금물.&lt;/h1>
&lt;p>어느 패러다임이 항상 정답은 경우는 없다. 객체 지향이 무조건 옳지도 않고, 상황에 따라 절차 지향적으로 개발하는 것이 더 좋을 때도 있다.&lt;/p>
&lt;p>항상 요구사항에 맞게 개발하는 것이 중요하다. 무조건적인 적용은 오히려 협업을 방해할 수도 있다는 것을 명심하자.&lt;/p>
&lt;h1 id="마무리하며">마무리하며&lt;/h1>
&lt;p>오늘은 객체 지향에 대해 설명해 보았다. 필자도 객체지향에 대해 설명하면서, 알고 있다고 생각했지만 머릿속에 막연히 있는 개념을 글로 풀어내는 것이 참 어렵다고 느낀다. 이 개념을 처음 접하는 분들도 이해하지 못한 부분이 있을 것이라고 생각한다. 그런 부분이 있다면 댓글로 물어봐주시길 바란다.&lt;/p></description></item></channel></rss>