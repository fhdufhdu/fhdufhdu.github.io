<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Boot on fhdufhdu</title><link>https://fhdufhdu.github.io/categories/spring-boot/</link><description>Recent content in Spring Boot on fhdufhdu</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Wed, 01 May 2024 16:00:00 +0900</lastBuildDate><atom:link href="https://fhdufhdu.github.io/categories/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>[Spring Boot][Kotlin] @Valid 사용시에 Enum 값을 검증해보자(Custom Validation, Enum Validation)</title><link>https://fhdufhdu.github.io/post/22/</link><pubDate>Wed, 01 May 2024 16:00:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/22/</guid><description>&lt;h2 id="들어가며">들어가며&lt;/h2>
&lt;p>필자는 Enum 값을 즐겨 사용한다. Enum은 코드로 값을 고정할 수 있다는 점에서 &lt;strong>컴파일 단계에서 안전&lt;/strong>하다. Spring Boot에서 &lt;code>@Valid&lt;/code> 어노테이션을 사용하는 Body, Query를 Enum으로 검증해 보자.&lt;/p>
&lt;h2 id="주의사항">주의사항&lt;/h2>
&lt;p>잘 알아야 하는 것은, &lt;em>&lt;strong>검증&lt;/strong>&lt;/em> 만 하는 것이다. 절대로 &lt;em>&lt;strong>변환&lt;/strong>&lt;/em> 을 하는 것이 아니다!&lt;/p>
&lt;p>Body 혹은 Query의 String을 Enum으로 변환하고자 하는 것이 아니라, String이 Enum 값에 있는지 확인하고자 하는 것이라는 것을 이해하자.&lt;/p>
&lt;p>필자가 처음에 이것을 헷갈렸다가 시간을 너무 낭비했던 경험이 있다.&lt;/p>
&lt;h2 id="valid">&lt;code>@Valid&lt;/code>&lt;/h2>
&lt;p>스프링은 &lt;code>@Valid&lt;/code>가 달린 객체에 대해서 검증을 실시한다. 검증을 실시할 때는 어노테이션이 달린 멤버 변수에 대해서 검증한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FooController&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// GetFooRequest 와 PostFooRequest가 값이 올바른지 검증한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">getFoo&lt;/span>(&lt;span style="color:#a6e22e">@Valid&lt;/span> &lt;span style="color:#a6e22e">@ModelAttribute&lt;/span> query: GetFooRequest) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">..&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@PostMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">postFoo&lt;/span>(&lt;span style="color:#a6e22e">@Valid&lt;/span> &lt;span style="color:#a6e22e">@RequestBody&lt;/span> body: PostFooRequest) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">..&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* GetFooRequest를 검증할 때
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * bar는 null이거나 빈 스트링이면 안되고,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * pageNumer는 음수이면 안되고,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * pageSize는 3 이상인지 검증함.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GetFooRequest&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@field&lt;/span>:NotBlank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> bar: String,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@field&lt;/span>:Min(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> pageNumber: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@field&lt;/span>:Min(&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> pageSize: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// field는 kotlin에서 사용하는 방식. kotlin에서는 생성자 부분에 멤버변수를 선언할 수 있으므로 생성자 부분에 있는 필드가 어느 부분에 적용되는지를 알려줘야한다.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>위의 &lt;code>@NotBlank&lt;/code>, &lt;code>@Min&lt;/code> 과 같은 어노테이션들을 &lt;strong>Bean Validation&lt;/strong>이라고 한다.(&lt;a class="link" href="https://beanvalidation.org/" target="_blank" rel="noopener"
>문서&lt;/a>)&lt;/p>
&lt;p>기본으로 제공되는 어노테이션 말고, 우리가 원하는 방식으로 검증하도록 수정할 수도 있다.&lt;/p>
&lt;h2 id="간단한-spring-boot에서의-검증-흐름">간단한 Spring boot에서의 검증 흐름&lt;/h2>
&lt;p>검증은 일반적으로 Dispatcher Servlet에서 Handler Adapter를 통해 Controller의 Method를 호출하기 전에 &lt;code>@Valid&lt;/code> 파라미터 메소드에 있는지 확인하고 있다면 검증을 시도한다.&lt;/p>
&lt;ol>
&lt;li>사용자 요청&lt;/li>
&lt;li>Dispatcher Sevlet 실행&lt;/li>
&lt;li>Handler Mapping을 통해 실행할 컨트롤러와 메소드를 확인&lt;/li>
&lt;li>Handler Adapter를 통해 컨트롤러의 메소드 실행
&lt;ol>
&lt;li>실행하기 이전 &lt;code>@ModelAttriBute&lt;/code>, &lt;code>@RequestBody&lt;/code>, &lt;code>@AuthenticationPrincipal&lt;/code> 같은 어노테이션 확인 후 적절한 로직 실행&lt;/li>
&lt;li>&lt;code>@Valid&lt;/code> 어노테이션 확인 후 검증 로직 실행&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="custom-validator-구현">Custom Validator 구현&lt;/h2>
&lt;h3 id="1-annotaion-만들기">1. Annotaion 만들기&lt;/h3>
&lt;p>이제 &lt;code>@NotBlank&lt;/code> 같은 어노테이션을 만들어야 한다. 아래와 같이 만들 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.validation.Constraint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.validation.ConstraintValidator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.validation.ConstraintValidatorContext
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.validation.Payload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> kotlin.reflect.KClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Target&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.FUNCTION,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.PROPERTY_GETTER,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.PROPERTY_SETTER,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.FIELD,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.ANNOTATION_CLASS,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.CONSTRUCTOR,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.VALUE_PARAMETER,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.CLASS,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.TYPE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.TYPE_PARAMETER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Retention&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationRetention&lt;/span>.RUNTIME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">annotation&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ValidEnum&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> enum: KClass&amp;lt;&lt;span style="color:#66d9ef">out&lt;/span> Enum&amp;lt;*&amp;gt;&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> isNull: Boolean = &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 아래 값은 필수 값
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> message: String = &lt;span style="color:#e6db74">&amp;#34;허용되지 않은 값입니다.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> groups: Array&amp;lt;KClass&amp;lt;Any&amp;gt;&amp;gt; = [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> payload: Array&amp;lt;KClass&amp;lt;Payload&amp;gt;&amp;gt; = [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>키워드&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@Target&lt;/td>
&lt;td>어노테이션의 적용 범위&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Retention&lt;/td>
&lt;td>언제 적용되는지&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>message&lt;/td>
&lt;td>검증 실패 시 출력할 에러 메시지&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>groups&lt;/td>
&lt;td>어떤 그룹에 속하는지(그룹 별로 검증할지 안 할지 정할 수 있음)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>payload&lt;/td>
&lt;td>추가적인 검증 메타데이터&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>enum&lt;/td>
&lt;td>검증할 Enum 클래스&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>isNull&lt;/td>
&lt;td>null 값을 허용하는지&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>message&lt;/code>, &lt;code>groups&lt;/code>, &lt;code>payload&lt;/code>는 필수 파라미터이다. 자세한 건 &lt;a class="link" href="https://jakarta.ee/specifications/bean-validation/3.0/jakarta-bean-validation-spec-3.0.html#constraintsdefinitionimplementation-constraintdefinition-properties" target="_blank" rel="noopener"
>공식 문서&lt;/a>를 참고해 보자.&lt;/p>
&lt;h3 id="2-validator-만들기">2. Validator 만들기&lt;/h3>
&lt;p>어노테이션을 만들었으니, 스프링이 검증 로직을 실행할 때 사용할 Validator가 필요하다.&lt;/p>
&lt;p>따로 파일을 분리해서 만들어도 되고, 방금 만든 어노테이션 클래스의 inner class로 만들어도 된다. 필자는 inner class로 만들도록 한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> com.fhdufhdu.windows7board.common.dto.ValidEnum.EnumValidator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.validation.Constraint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.validation.ConstraintValidator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.validation.ConstraintValidatorContext
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> jakarta.validation.Payload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> kotlin.reflect.KClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Target&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.FUNCTION,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.PROPERTY_GETTER,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.PROPERTY_SETTER,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.FIELD,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.ANNOTATION_CLASS,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.CONSTRUCTOR,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.VALUE_PARAMETER,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.CLASS,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.TYPE,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationTarget&lt;/span>.TYPE_PARAMETER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Retention&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">AnnotationRetention&lt;/span>.RUNTIME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 추가된 부분
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">@Constraint&lt;/span>(validatedBy = [EnumValidator&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">annotation&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ValidEnum&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> enum: KClass&amp;lt;&lt;span style="color:#66d9ef">out&lt;/span> Enum&amp;lt;*&amp;gt;&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> isNull: Boolean = &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> message: String = &lt;span style="color:#e6db74">&amp;#34;허용되지 않은 값입니다.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> groups: Array&amp;lt;KClass&amp;lt;Any&amp;gt;&amp;gt; = [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> payload: Array&amp;lt;KClass&amp;lt;Payload&amp;gt;&amp;gt; = [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> ignoreCase: Boolean = &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 추가된 부분
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">EnumValidator&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) : ConstraintValidator&amp;lt;ValidEnum, String&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">lateinit&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> annotation: ValidEnum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">initialize&lt;/span>(constraintAnnotation: ValidEnum) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#66d9ef">annotation&lt;/span> = constraintAnnotation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">isValid&lt;/span>(&lt;span style="color:#66d9ef">value&lt;/span>: String?, context: ConstraintValidatorContext): Boolean {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> enums = &lt;span style="color:#66d9ef">annotation&lt;/span>.&lt;span style="color:#66d9ef">enum&lt;/span>.java.enumConstants
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">value&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">annotation&lt;/span>.isNull) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> enums.any { &lt;span style="color:#66d9ef">it&lt;/span>.name &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">value&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Validator는 &lt;code>jakarta.validation.ConstraintValidator&lt;/code> 인터페이스를 구현해서 만들어야 한다.&lt;/p>
&lt;p>&lt;code>initialize&lt;/code>를 통해 어노테이션 정보를 가져오고, &lt;code>isValid&lt;/code>를 통해 검증 여부를 판단할 수 있다.(&lt;code>true&lt;/code> 성공, &lt;code>false&lt;/code> 실패)&lt;/p>
&lt;p>우리는 &lt;code>isValid&lt;/code> 함수를 집중적으로 구현할 것이다.&lt;/p>
&lt;ol>
&lt;li>우선 어노테이션의 &lt;code>enum&lt;/code> 멤버 변수에서 모든 enum 값 리스트 추출&lt;/li>
&lt;li>어노테이션에 isNull이 붙어있고 value가 null이라면 true&lt;/li>
&lt;li>enum 값 리스트에서 value가 하나라도 매칭되면 true, 그렇지 않으면 false&lt;/li>
&lt;/ol>
&lt;h3 id="3-적용">3. 적용&lt;/h3>
&lt;h4 id="request-dto">Request DTO&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GetFooRequest&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@field&lt;/span>:ValidEnum(&lt;span style="color:#66d9ef">enum&lt;/span> = SortCriteria&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> sortCriteria: String = &lt;span style="color:#a6e22e">SortCriteria&lt;/span>.&lt;span style="color:#a6e22e">CREATED_AT&lt;/span>.name,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SortCriteria&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TITLE, CONTENT, CREATED_AT, USER_ID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="controller">Controller&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@PreAuthorize&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;isAuthenticated()&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FooController&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> fooService: FooService
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">getFoo&lt;/span>(&lt;span style="color:#a6e22e">@Valid&lt;/span> &lt;span style="color:#a6e22e">@ModelAttribute&lt;/span> query: GetFooRequest) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이렇게 사용할 수 있다.&lt;/p>
&lt;h2 id="디버그-모드로-적용-확인">디버그 모드로 적용 확인&lt;/h2>
&lt;p>이제 이 Custom Validation이 잘 적용되는지 확인해 보자.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/22/image.png"
width="1594"
height="1336"
loading="lazy"
alt="Break Point"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="286px"
>&lt;/p>
&lt;p>해당 라인에 break point를 걸어서 디버그 모드로 확인해 보자.&lt;/p>
&lt;p>&lt;img src="https://fhdufhdu.github.io/post/22/image-1.png"
width="1624"
height="1306"
loading="lazy"
alt="JVM Stack"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>&lt;a class="link" href="#%ea%b0%84%eb%8b%a8%ed%95%9c-spring-boot%ec%97%90%ec%84%9c%ec%9d%98-%ea%b2%80%ec%a6%9d-%ed%94%8c%eb%a1%9c%ec%9a%b0" >간단한 Spring boot에서의 검증 플로우&lt;/a>에서 말했던 것처럼 검증 로직이 진행된다는 것을 알 수 있다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>이 기능에 대해 구현하고 블로그를 작성하며 Spring boot의 내부 구조와 작동 방식에 대해서 다시 한번 공부하게 되었고, Bean Validation에 대한 공식 문서를 보면서 작동 방식에 대해 익숙해질 수 있었다.&lt;/p>
&lt;p>또한 디버그 모드를 통해 validation이 작동하는 위치에 대한 추측을 증명할 수 있었다.&lt;/p>
&lt;p>블로그 글을 오랜만에 작성하면서 &amp;ldquo;알고 있는 지식은 공유해야 본인에게도 정리가 잘되는 것 같다&amp;quot;는 생각이 다시 한번 들었다. 앞으로도 게으름 피우지 말고 열심히 블로그 글을 작성해야겠다.&lt;/p>
&lt;div id="fhdufhdu-card">
&lt;/div>
&lt;script>
const resize = () => {
var iamges = []
var interval = setInterval(()=>{
images = document.querySelectorAll('.gallery')
if (images.length > 0){
images.forEach((image)=>{
const getEm = (width) => {
if (width > 1535) return 4
else if(width &lt; 0) return 0
return (4/767) * width - (3072/767)
}
const em = getEm(window.innerWidth)
image.style.padding = `0 ${em}em 0 ${em}em`
})
clearInterval(interval)
}
}, 100)
}
window.addEventListener("resize", resize)
resize()
&lt;/script></description></item><item><title>[Spring Boot] Controller, Service, Repository에서의 DTO 분리 그리고 네이밍에 대해서</title><link>https://fhdufhdu.github.io/post/21/</link><pubDate>Tue, 30 Apr 2024 09:00:00 +0900</pubDate><guid>https://fhdufhdu.github.io/post/21/</guid><description>&lt;h2 id="들어가며">들어가며&lt;/h2>
&lt;p>오랜만에 포스팅하게 되었다. 그동안 회사도 바빴고, 개인적으로 Spring boot를 이용한 게시판을 만들고 있었다. 예전과는 다르게, 실무에서 겪었던 문제들을 바탕으로 해결책들을 녹여내기 위해서 노력했다. (&lt;a class="link" href="http://fhdufhdu.hopto.org" target="_blank" rel="noopener"
>해당 게시판&lt;/a> &amp;hellip;홍보도 겸사겸사)&lt;/p>
&lt;p>사실 백엔드 개발을 하며 제일 크게 문제라고 느꼈던 건, 네이밍과 관심사 분리였다.&lt;/p>
&lt;p>필자는 서버를 Controller, Service, Repository, Infrasturcture 계층으로 나누어서 주로 개발한다. 여기까지는 관습적으로 잘 지켜오고 있었는데, 그 외의 DTO가 문제였다.&lt;/p>
&lt;p>이에 대한 이야기와, 나름대로 해결책을 정리해 보겠다.&lt;/p>
&lt;h2 id="request-dto를-모든-곳에서-사용하지-말자">Request DTO를 모든 곳에서 사용하지 말자&lt;/h2>
&lt;p>제일 크게 문제였던 것은, Request DTO였다. 필자는 이전까지 Request DTO를 모든 계층에서 돌려쓸 때가 있었다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FooController&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> fooService: FooService
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">getData&lt;/span>(&lt;span style="color:#a6e22e">@RequestBody&lt;/span>() body: DataRequest){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> fooService.fetchData(body)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FooService&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> fooRepository: FooRepository
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">fetchData&lt;/span>(body: DataRequest){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> fooRepository.findOne(body.id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>해당 코드를 보면 Controller, Service 계층에서 같은 DataRequest 를 쓰고 있다.&lt;/p>
&lt;p>실제로 겪어본 결과, 이 방식은 문제점이 많았다.&lt;/p>
&lt;ol>
&lt;li>&lt;code>FooService&lt;/code>의 &lt;code>fetchData&lt;/code> 메소드는 &lt;code>FooController&lt;/code>에서만 사용되는 것이 아니다.
&lt;ul>
&lt;li>다른 곳에서 사용될 수가 있을 텐데, 파라미터가 &lt;code>DataRequest&lt;/code>인 것은 이상하다. 마치 &lt;code>FooController&lt;/code>에 종속된 것처럼 보인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>DataRequest&lt;/code>가 변경되면 모든 레이어에 영향을 끼친다. 이때 컴파일 시 에러가 발생하지 않고 런타임 때 발생할 수 있다.
&lt;ul>
&lt;li>이를 추적하여 수정하는 것은 많은 비용이 든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>그렇다면 어떻게 해야 할까&amp;hellip;?&lt;/p>
&lt;h2 id="dto를-모든-계층에서-분리하자">DTO를 모든 계층에서 분리하자!&lt;/h2>
&lt;p>문제를 해결하기 위해 모든 계층에서 DTO를 만들어보려고 했다. 다만 이럴 때 문제점은 DTO 이름이 너무나도 중복이 많이 되는 것이 문제였다.&lt;/p>
&lt;p>그래서 주위에 물어보거나, 많은 자료조사 끝에, 나름대로 철칙을 만들었다.&lt;/p>
&lt;ol>
&lt;li>모든 계층에서의 parameter, return type을 분리한다.&lt;/li>
&lt;li>네이밍을 아래와 같이 정한다.
&lt;ul>
&lt;li>Controller
&lt;ul>
&lt;li>prameter: &lt;code>...Request&lt;/code>&lt;/li>
&lt;li>return: &lt;code>...Response&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Service
&lt;ul>
&lt;li>parameter: &lt;code>...Command&lt;/code>,&lt;/li>
&lt;li>return: 서비스 메소드에 맞게 정한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Repository
&lt;ul>
&lt;li>parameter: &lt;code>...Condition&lt;/code>&lt;/li>
&lt;li>return: &lt;code>...Projection&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이렇게 분리하게 되면, 앞서 이야기한 문제가 해결된다. 단점은 DTO를 많이 만들고 수정해야 한다는 것이다. 하지만 런타임 에러를 방지한다는 목적으로 보자면 매우 효율적인 비용이라고 생각한다.&lt;/p>
&lt;p>이제 적용 예시를 보자.&lt;/p>
&lt;h3 id="게시글-목록-조회">게시글 목록 조회&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 컨트롤러
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">@Controller&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BoardController&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> boardService: BoardService
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@PreAuthorize&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;permitAll&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@GetMapping&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;posts&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">getPostSummaries&lt;/span>(&lt;span style="color:#a6e22e">@Valid&lt;/span> &lt;span style="color:#a6e22e">@ModelAttribute&lt;/span> query: PostSummariesRequest): PostSummaries {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> page = &lt;span style="color:#a6e22e">PostSummariesCommand&lt;/span>.Page(query.pageNumber, query.pageSize)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> sort = &lt;span style="color:#a6e22e">PostSummariesCommand&lt;/span>.Sort(query.sortCriteria, query.sortDirection)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> search: &lt;span style="color:#a6e22e">PostSummariesCommand&lt;/span>.Search? = &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (query.searchQuery &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> query.searchCriteria &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> search = &lt;span style="color:#a6e22e">PostSummariesCommand&lt;/span>.Search(query.searchQuery&lt;span style="color:#f92672">!!&lt;/span>, query.searchCriteria&lt;span style="color:#f92672">!!&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> findPostsInput = PostSummariesCommand(page, sort, search)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> boardService.filterPostSummaries(findPostsInput)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//서비스
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">@Service&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BoardService&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> postRepository: PostRepository,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> commentRepository: CommentRepository,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> userRepository: UserRepository
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">filterPostSummaries&lt;/span>(input: PostSummariesCommand): PostSummaries {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> orderCondition = &lt;span style="color:#a6e22e">PostSummariesCondition&lt;/span>.Order(input.sort.direction.queryDslOrder, input.sort.criteria.&lt;span style="color:#66d9ef">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> searchCondition = &lt;span style="color:#a6e22e">PostSummariesCondition&lt;/span>.Search(input.search&lt;span style="color:#f92672">?.&lt;/span>searchQuery, input.search&lt;span style="color:#f92672">?.&lt;/span>searchCriteria&lt;span style="color:#f92672">?.&lt;/span>&lt;span style="color:#66d9ef">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 페이지네이션 조건 객체
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> pageable = &lt;span style="color:#a6e22e">PageRequest&lt;/span>.of(input.page.number, input.page.size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 객체 조회
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> page = postRepository.findPostSummaries(PostSummariesCondition(searchCondition, orderCondition), pageable)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> postDtoList = page.content.stream().map {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PostSummaries&lt;/span>.PostSummary(&lt;span style="color:#66d9ef">it&lt;/span>.id, &lt;span style="color:#66d9ef">it&lt;/span>.userId, &lt;span style="color:#66d9ef">it&lt;/span>.title, &lt;span style="color:#66d9ef">it&lt;/span>.content, &lt;span style="color:#66d9ef">it&lt;/span>.createdAt, &lt;span style="color:#66d9ef">it&lt;/span>.updatedAt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.toList()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> PostSummaries(postDtoList, page.number, page.totalPages, page.totalElements)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// QueryDSL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PostQueryDslImpl&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> queryFactory: JPAQueryFactory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) : PostQueryDsl {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">findPostSummaries&lt;/span>(condition: PostSummariesCondition, pageable: Pageable): Page&amp;lt;PostSummariesProjection&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> post = &lt;span style="color:#a6e22e">QPost&lt;/span>.post
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> whereConditions = arrayOf(&lt;span style="color:#a6e22e">QPost&lt;/span>.post.status.eq(&lt;span style="color:#a6e22e">Post&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>.PUBLISHED), condition.search.searchExpression)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 쿼리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> query = queryFactory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .select(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Projections&lt;/span>.&lt;span style="color:#66d9ef">constructor&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PostSummariesProjection&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span>.java,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> post.id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> post.user.id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> post.title,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> post.content.substring(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">30&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> post.createdAt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> post.updatedAt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .from(post)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">where&lt;/span>(*whereConditions)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .orderBy(condition.order.orderSpecifier)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .offset(pageable.offset)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .limit(pageable.pageSize.toLong())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> countQuery = queryFactory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .select(post.count())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .from(post)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">where&lt;/span>(*whereConditions)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 쿼리 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> posts = query.fetch()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> count = countQuery.fetchOne()&lt;span style="color:#f92672">!!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> PageImpl(posts, pageable, count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>모든 계층에서, 자신의 DTO를 다른 계층의 DTO로 변환해서 호출하는 것을 볼 수 있다. 이런 방식을 통해 하나의 DTO가 변경되더라도 런타임 에러를 방지할 수 있다.&lt;/p>
&lt;h2 id="마무리하며">마무리하며&lt;/h2>
&lt;p>DTO 이슈는 현업을 진행하며 많이 고민이 되었던 문제였다. 이번에 Spring 개발을 진행하며 나름대로 생각 정리가 되어서 후련하다. 사실 이번 DTO 관련 이슈를 제외하고서도 나름대로 정리된 내용이 많다. 다음 포스팅에서는 DTO의 역할에 대해서도 생각을 정리해 보는 시간을 가져보도록 하겠다.&lt;/p></description></item></channel></rss>